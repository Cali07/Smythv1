# Changelog

All notable changes to the SmythOS SDK will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [1.0.4] - 2025-19-06

### Added

-   **LLM**: Doc parsers : PDF, DOCX, Markdown, Text
-   **LLM**: automatic doc parser based on the mime type or file extension

### Documentation

-   **LLM**: Updated the documentation with detailed examples for LLMs

## [1.0.0] - 2025-17-06

### Initial Release

This is the first release of the SmythOS SDK - a powerful toolkit for building, managing, and deploying sophisticated AI agents with ease.

### Core Agent System

-   **Agent Class**: Complete agent creation and management system

    -   Fluent API for creating agents with customizable models and behaviors
    -   Support for multiple LLM providers (see LLM Providers section below)
    -   Agent identification system for data isolation and persistence
    -   Built-in prompt processing with intelligent skill selection

-   **Skills Framework**: Extensible skill system for agent capabilities
    -   Supports creating skill with TypeScript functions, from .smyth file or by composing a workflow programmatically (Components / Connections syntax)
    -   AI-assisted skill selection based on natural language prompts
    -   Direct skill calling for programmatic access

### Conversation & Interaction

-   **Prompting System**: Multiple interaction patterns

    -   Simple promise-based prompting (`agent.prompt()`)
    -   Real-time streaming responses with event emitters
    -   Support for both one-shot and conversational interactions

-   **Chat Management**: Persistent conversation handling

    -   Interactive chat sessions with memory
    -   Conversation persistence across sessions
    -   Readline integration for CLI applications
    -   Event-driven streaming with granular control

-   **Event System**: Comprehensive event handling
    -   `TLLMEvent.Content` - Text content streaming
    -   `TLLMEvent.ToolCall` - Skill/tool invocation events
    -   `TLLMEvent.Usage` - Usage reporting
    -   `TLLMEvent.ToolResult` - Skill execution results
    -   `TLLMEvent.End` - Response completion
    -   `TLLMEvent.Error` - Error handling

### Vector Database Integration

-   **Multi-Provider Support**: Seamless vector database integration

    -   Pinecone connector with full API support
    -   RAM-based vector storage for development
    -   Milvus connector support
    -   Agent-scoped and team-scoped data isolation

-   **Document Processing & Indexing**:
    -   Automatic document chunking and embedding
    -   Metadata preservation and search
    -   Semantic search capabilities with configurable results

### Document Parser System

-   **Multiple Format Support**: Comprehensive document processing

    -   **PDF Parser**: Extract text and metadata from PDF files
    -   **DOCX Parser**: Microsoft Word document processing
    -   **Markdown Parser**: Structured markdown document parsing
    -   **Text Parser**: Plain text file processing

-   **Advanced Features**:
    -   Custom metadata injection
    -   Document chunking for vector storage
    -   File path and string content support
    -   Configurable parsing options

### Storage System

-   **Multi-Provider Storage**: Persistent data management
    -   Local storage for development and testing
    -   S3 integration for cloud storage
    -   Agent-scoped and team-scoped access control

### Team Management

-   **Multi-Agent Orchestration**: Team-based agent management
    -   Team creation and agent assignment
    -   Shared resource access (storage, vector databases)
    -   Access control and data isolation
    -   Team-wide collaboration features

### Component Architecture

-   **Workflow Components**: Visual workflow building

    -   API call components with dynamic parameter injection
    -   Output formatting and filtering components
    -   Component interconnection system
    -   Visual workflow representation

-   **Component Types**:
    -   `Component.APICall()` - External API integration
    -   `Component.APIOutput()` - Response formatting
    -   Skill components with input/output definitions

### Integrations

-   **LLM Providers**: Comprehensive language model support

    -   **OpenAI**: GPT-4, GPT-4o, GPT-4o-mini, o3-mini, and reasoning models
    -   **Anthropic**: Claude 3 Sonnet, Claude 3 Haiku, and Claude 3.5 models
    -   **Google AI**: Gemini Pro, Gemini Flash, and Gemini Vision models
    -   **DeepSeek**: DeepSeek Chat and DeepSeek v2.5 models
    -   **Groq**: High-speed inference for various open-source models
    -   **TogetherAI**: Meta Llama, Mistral, Qwen, and other open-source models
    -   **xAI**: Grok and Grok Vision models
    -   **Echo**: Fake LLM that just parses string templates and returns them
    -   **Runware**: Image generation and processing models
    -   Configurable model parameters and provider abstraction layer

-   **Vector Databases**:

    -   Pinecone integration
    -   Milvus connector
    -   Local RAM-based vector storage (RAMVec)
    -   Embedding model support (OpenAI text-embedding-3-large)

-   **Storage Providers**:
    -   Local filesystem storage
    -   AWS S3 integration
    -   Extensible provider architecture
