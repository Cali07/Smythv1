{"version":3,"file":"index.dev.js","sources":["../src/subsystems/AgentManager/AgentRequest.class.ts","../src/types/SRE.types.ts","../src/utils/general.utils.ts","../src/utils/date-time.utils.ts","../src/utils/string.utils.ts","../src/constants.ts","../src/utils/base64.utils.ts","../src/utils/data.utils.ts","../src/utils/cli.utils.ts","../src/utils/numbers.utils.ts","../src/utils/validation.utils.ts","../src/config.ts","../src/helpers/Log.helper.ts","../src/Core/DummyConnector.ts","../src/Core/Connector.class.ts","../src/Core/SystemEvents.ts","../src/Core/ConnectorsService.ts","../src/subsystems/AgentManager/EmbodimentSettings.class.ts","../src/subsystems/AgentManager/AgentSettings.class.ts","../src/types/ACL.types.ts","../src/subsystems/Security/AccessControl/AccessRequest.class.ts","../src/subsystems/Security/AccessControl/AccessCandidate.class.ts","../src/subsystems/Security/AccessControl/ACL.class.ts","../src/subsystems/IO/Storage.service/SmythFS.class.ts","../src/helpers/BinaryInput.helper.ts","../src/helpers/JsonContent.helper.ts","../src/helpers/TypeChecker.helper.ts","../src/Components/Component.class.ts","../src/subsystems/Security/Vault.service/Vault.helper.ts","../src/helpers/TemplateString.helper.ts","../src/Components/APIEndpoint.class.ts","../src/Components/APIOutput.class.ts","../src/subsystems/LLMManager/models.ts","../src/subsystems/LLMManager/LLM.helper.ts","../src/Components/PromptGenerator.class.ts","../src/Components/APICall/parseHeaders.ts","../src/Components/APICall/parseUrl.ts","../src/Components/APICall/parseData.ts","../src/Components/APICall/parseProxy.ts","../src/Components/APICall/mimeTypeCategories.ts","../src/Components/APICall/ArrayBufferResponse.helper.ts","../src/Components/APICall/APICall.class.ts","../src/Components/VisionLLM.class.ts","../src/Components/FSleep.class.ts","../src/Components/FHash.class.ts","../src/Components/FEncDec.class.ts","../src/Components/FTimestamp.class.ts","../src/Components/DataSourceLookup.class.ts","../src/subsystems/Security/SecureConnector.class.ts","../src/subsystems/IO/VectorDB.service/VectorDBConnector.ts","../src/subsystems/IO/VectorDB.service/Vectors.helper.ts","../src/Components/DataSourceIndexer.class.ts","../src/Components/DataSourceCleaner.class.ts","../src/Components/JSONFilter.class.ts","../src/Components/LogicAND.class.ts","../src/Components/LogicOR.class.ts","../src/Components/LogicXOR.class.ts","../src/Components/LogicAtLeast.class.ts","../src/Components/LogicAtMost.class.ts","../src/Core/AgentProcess.helper.ts","../src/subsystems/MemoryManager/LLMContext.ts","../src/helpers/OpenApiParser.helper.ts","../src/helpers/Conversation.helper.ts","../src/Components/AgentPlugin.class.ts","../src/Components/LLMAssistant.class.ts","../src/subsystems/AgentManager/ForkedAgent.class.ts","../src/Components/Async.class.ts","../src/Components/Await.class.ts","../src/Components/ForEach.class.ts","../src/Components/Code.class.ts","../src/Components/HuggingFace.class.ts","../src/Components/ZapierAction.class.ts","../src/Components/GPTPlugin.class.ts","../src/Components/ImageGenerator.class.ts","../src/Components/Classifier.class.ts","../src/Components/FSign.class.ts","../src/Components/index.ts","../src/subsystems/AgentManager/AgentLogger.class.ts","../src/subsystems/MemoryManager/RuntimeContext.ts","../src/subsystems/AgentManager/AgentRuntime.class.ts","../src/subsystems/AgentManager/OSResourceMonitor.ts","../src/subsystems/AgentManager/Agent.class.ts","../src/Core/SmythRuntime.class.ts","../src/subsystems/IO/Storage.service/StorageConnector.ts","../src/subsystems/IO/Storage.service/connectors/S3Storage.class.ts","../src/subsystems/IO/Storage.service/index.ts","../src/subsystems/LLMManager/paramMappings.ts","../src/subsystems/LLMManager/LLM.service/LLMConnector.ts","../src/subsystems/LLMManager/LLM.service/connectors/Echo.class.ts","../src/types/LLM.types.ts","../src/subsystems/LLMManager/LLM.service/connectors/OpenAI.class.ts","../src/subsystems/LLMManager/LLM.service/connectors/GoogleAI.class.ts","../src/subsystems/LLMManager/LLM.service/connectors/AnthropicAI.class.ts","../src/subsystems/LLMManager/LLM.service/connectors/Groq.class.ts","../src/subsystems/LLMManager/LLM.service/connectors/TogetherAI.class.ts","../src/subsystems/LLMManager/LLM.service/index.ts","../src/subsystems/MemoryManager/Cache.service/CacheConnector.ts","../src/subsystems/MemoryManager/Cache.service/connectors/RedisCache.class.ts","../src/subsystems/MemoryManager/Cache.service/index.ts","../src/subsystems/Security/Vault.service/VaultConnector.ts","../src/subsystems/Security/Vault.service/connectors/JSONFileVault.class.ts","../src/utils/oauth.utils.ts","../src/subsystems/Security/Vault.service/connectors/SmythVault.class.ts","../src/subsystems/Security/Vault.service/connectors/SecretsManager.class.ts","../src/subsystems/Security/Vault.service/index.ts","../src/subsystems/Security/Account.service/AccountConnector.ts","../src/subsystems/Security/Account.service/connectors/SmythAccount.class.ts","../src/subsystems/Security/Account.service/connectors/DummyAccount.class.ts","../src/subsystems/Security/Account.service/index.ts","../src/subsystems/AgentManager/AgentData.service/AgentDataConnector.ts","../src/subsystems/AgentManager/AgentData.service/connectors/CLIAgentDataConnector.class.ts","../src/subsystems/AgentManager/AgentData.service/connectors/LocalAgentDataConnector.class.ts","../src/subsystems/AgentManager/AgentData.service/index.ts","../src/subsystems/IO/VectorDB.service/connectors/PineconeVectorDB.class.ts","../src/subsystems/IO/VectorDB.service/index.ts","../src/subsystems/IO/CLI.service/CLIConnector.ts","../src/subsystems/IO/CLI.service/index.ts","../src/subsystems/IO/NKV.service/NKVConnector.ts","../src/subsystems/IO/NKV.service/connectors/NKVRedis.class.ts","../src/subsystems/IO/NKV.service/index.ts","../src/Core/boot.ts","../src/index.ts"],"sourcesContent":["export default class AgentRequest {\r\n    public headers: any;\r\n    public body: any;\r\n    public query: any;\r\n    public params: any;\r\n    public method: string = 'GET';\r\n    public path: string = '';\r\n    public sessionID: string = '';\r\n    public res: Response | null = null;\r\n    public req: Request | null = null;\r\n    public files: any[] = [];\r\n    public _agent_authinfo: any;\r\n    constructor(req?: AgentRequest | string[] | any) {\r\n        if (!req) return;\r\n        this.headers = JSON.parse(JSON.stringify(req.headers || {}));\r\n        this.body = JSON.parse(JSON.stringify(req.body || req.data || {}));\r\n        this.query = JSON.parse(JSON.stringify(req.query || {}));\r\n        this.params = JSON.parse(JSON.stringify(req.params || {}));\r\n\r\n        if (req.url) {\r\n            const parsedUrl = new URL(req.url || '');\r\n            this.path = parsedUrl.pathname;\r\n        }\r\n        if (req.path) this.path = req.path;\r\n\r\n        this.method = req.method;\r\n\r\n        this.sessionID = req.sessionID;\r\n        this.files = req.files || [];\r\n        this._agent_authinfo = req._agent_authinfo;\r\n\r\n        this.req = req instanceof AgentRequest ? req?.req : req;\r\n        this.res = req?.res || null;\r\n    }\r\n    header(name: string) {\r\n        return this.headers[name.toLowerCase()];\r\n    }\r\n}\r\n","import { AgentDataService } from '@sre/AgentManager/AgentData.service';\r\nimport { CLIService } from '@sre/IO/CLI.service';\r\nimport { NKVService } from '@sre/IO/NKV.service';\r\nimport { StorageService } from '@sre/IO/Storage.service';\r\nimport { VectorDBService } from '@sre/IO/VectorDB.service';\r\nimport { LLMService } from '@sre/LLMManager/LLM.service';\r\nimport { CacheService } from '@sre/MemoryManager/Cache.service';\r\nimport { AccountService } from '@sre/Security/Account.service';\r\nimport { VaultService } from '@sre/Security/Vault.service';\r\n\r\nexport type TServiceRegistry = {\r\n    Storage?: StorageService;\r\n    VectorDB?: VectorDBService;\r\n    Cache?: CacheService;\r\n    LLM?: LLMService;\r\n    Vault?: VaultService;\r\n    Account?: AccountService;\r\n    AgentData?: AgentDataService;\r\n    CLI?: CLIService;\r\n    NKV?: NKVService;\r\n};\r\n\r\nexport enum TConnectorService {\r\n    Storage = 'Storage',\r\n    VectorDB = 'VectorDB',\r\n    Cache = 'Cache',\r\n    LLM = 'LLM',\r\n    Vault = 'Vault',\r\n    Account = 'Account',\r\n    AgentData = 'AgentData',\r\n    CLI = 'CLI',\r\n    NKV = 'NKV',\r\n}\r\n\r\nexport type SREConnectorConfig = {\r\n    Connector: string;\r\n    Default?: boolean;\r\n    Settings?: {\r\n        [hashedOwnerKey: string]: any;\r\n    };\r\n};\r\n\r\nexport type SREConfig = {\r\n    [key in TConnectorService]?: SREConnectorConfig[] | SREConnectorConfig;\r\n};\r\n","import pLimit from 'p-limit';\r\nexport function uid() {\r\n    return (Date.now() + Math.random()).toString(36).replace('.', '').toUpperCase();\r\n}\r\n\r\n/**\r\n * this function is used to check if a class is a subclass of another class\r\n * @param subClass\r\n * @param superClass\r\n * @returns\r\n */\r\nexport function isSubclassOf(subClass: any, superClass: any): boolean {\r\n    if (typeof subClass !== 'function' || typeof superClass !== 'function') {\r\n        return false;\r\n    }\r\n\r\n    let prototype = Object.getPrototypeOf(subClass.prototype);\r\n    let depth = 10;\r\n\r\n    while (prototype && depth >= 0) {\r\n        if (prototype === superClass.prototype) {\r\n            return true;\r\n        }\r\n        prototype = Object.getPrototypeOf(prototype);\r\n        depth++;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Processes an array of tasks concurrently with a specified concurrency limit.\r\n *\r\n * @template T - The type of the result returned by each task.\r\n *\r\n * @param {(() => Promise<T>)[]} tasks - An array of functions that return promises.\r\n * Each function represents a task to be processed.\r\n * @param {number} [maxConcurrentTasks=10] - The maximum number of concurrent tasks.\r\n *\r\n * @returns {Promise<T[]>} - A promise that resolves to an array of results.\r\n * Only successfully fulfilled promises are included in the result array.\r\n *\r\n * @throws {TypeError} - Throws an error if the tasks parameter is not an array of functions.\r\n *\r\n * @example\r\n * const tasks = [\r\n *     () => await processFile('file1.txt'),\r\n *     () => await processFile('file2.txt'),\r\n *     () => await processFile('file3.txt'),\r\n * ];\r\n *\r\n * const maxConcurrentTasks = 2;\r\n *\r\n * processWithConcurrencyLimit(tasks, maxConcurrentTasks)\r\n *     .then(results => console.log(results)) // Array of results from the fulfilled promises\r\n *     .catch(error => console.error(error));\r\n *\r\n * @note Currently, this function ignores tasks that fail to process.\r\n *       Only successfully fulfilled promises are included in the result array.\r\n *       To improve this behavior, we could add an option to control whether to exit the function if a task fails.\r\n */\r\nexport async function processWithConcurrencyLimit<T>(tasks: (() => Promise<T>)[], maxConcurrentTasks: number = 10): Promise<T[]> {\r\n    const limit = pLimit(maxConcurrentTasks);\r\n\r\n    const limitedTasks = tasks.map((task) => limit(task));\r\n\r\n    const results = await Promise.allSettled(limitedTasks);\r\n\r\n    // Filter for successfully fulfilled promises and extract their values\r\n    const validResults = results.flatMap((result) => (result.status === 'fulfilled' ? [result.value] : []));\r\n\r\n    return validResults;\r\n}\r\n\r\nexport const detectURLSourceType = (url: string) => {\r\n    const urlObj = new URL(url);\r\n    const ext = urlObj.pathname.split('.').pop();\r\n\r\n    switch (ext) {\r\n        case 'pdf':\r\n            return 'PDF';\r\n        case 'xml':\r\n            return 'SITEMAP';\r\n        case 'html':\r\n        case 'htm':\r\n        case 'txt':\r\n            return 'WEBPAGE';\r\n        case 'doc':\r\n        case 'docx':\r\n            return 'WORD';\r\n        default:\r\n            return 'WEBPAGE';\r\n    }\r\n};\r\n","export function getCurrentFormattedDate() {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    const seconds = String(date.getSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day}-${hours}-${minutes}-${seconds}`;\r\n}\r\n\r\nexport function getDayFormattedDate() {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function delay(ms) {\r\n    return new Promise((r) => setTimeout(r, ms));\r\n}\r\n","/**\r\n * perform a replace operation on a string asynchronously\r\n * @param str\r\n * @param regex\r\n * @param asyncFn\r\n * @returns\r\n */\r\nexport async function asyncReplace(str, regex, asyncFn) {\r\n    const matches = [];\r\n    let match;\r\n\r\n    // Find all matches and store them in an array\r\n    while ((match = regex.exec(str)) !== null) {\r\n        matches.push(match);\r\n    }\r\n\r\n    // Process each match asynchronously\r\n    const replacements = await Promise.all(\r\n        matches.map(async (match) => {\r\n            // Call the async function with all match groups\r\n            return asyncFn(...match);\r\n        })\r\n    );\r\n\r\n    // Reassemble the string with replacements\r\n    let result = '';\r\n    let lastIndex = 0;\r\n\r\n    matches.forEach((match, index) => {\r\n        result += str.slice(lastIndex, match.index) + replacements[index];\r\n        lastIndex = match.index + match[0].length;\r\n    });\r\n\r\n    // Append the remaining part of the string\r\n    result += str.slice(lastIndex);\r\n\r\n    return result;\r\n}\r\n\r\nexport function isValidString(str: string): boolean {\r\n    return str && typeof str === 'string';\r\n}\r\n\r\nconst isValidNumber = (str: string): boolean => {\r\n    const num = parseFloat(str);\r\n    return !isNaN(num) && num <= Number.MAX_SAFE_INTEGER && num >= Number.MIN_SAFE_INTEGER && num.toString() === str.trim();\r\n};\r\n\r\n/**\r\n * The function parseJson() won't parse the data for property values.\r\n * For instance, if you have '{\"a\": \"1\",\"b\": \"true\"}', it will be parsed as {a: '1', b: 'true'}. That's why we parse the appropriate data type for property values\r\n * so that the data will be parsed as {a: 1, b: true}\r\n * @param data\r\n * @returns\r\n */\r\nexport function convertStringToRespectiveType(data: any): any {\r\n    if (data === null || data === undefined) return data;\r\n\r\n    if (typeof data !== 'object') {\r\n        // If it's a string, perform conversions\r\n        if (typeof data === 'string') {\r\n            if (data.toLowerCase() === 'true') {\r\n                return true;\r\n            } else if (data.toLowerCase() === 'false') {\r\n                return false;\r\n            } else if (isValidNumber(data)) {\r\n                return Number(data);\r\n            } else if (data.toLowerCase() === 'null') {\r\n                return null;\r\n            } else if (data.toLowerCase() === 'undefined') {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    // If it's an array, map over it and parse each item\r\n    if (Array.isArray(data)) {\r\n        return data.map((item) => convertStringToRespectiveType(item));\r\n    }\r\n\r\n    // If it's an object, map over its properties and parse each one\r\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [key, convertStringToRespectiveType(value)]));\r\n}\r\n\r\nexport const kebabToCamel = (input) => {\r\n    if (!input || typeof input !== 'string') return input;\r\n\r\n    return input.replace(/-([a-z])/g, function (match, group) {\r\n        return group.toUpperCase();\r\n    });\r\n};\r\n\r\nexport const kebabToCapitalize = (input) => {\r\n    if (!input || typeof input !== 'string') return input;\r\n\r\n    return input\r\n        .split('-')\r\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n};\r\n","// supported request methods\r\nexport const REQUEST_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'];\r\n\r\nexport const REQUEST_CONTENT_TYPES = {\r\n    none: 'none',\r\n    urlEncodedFormData: 'application/x-www-form-urlencoded',\r\n    multipartFormData: 'multipart/form-data',\r\n    json: 'application/json',\r\n    text: 'text/plain',\r\n    xml: 'application/xml',\r\n    binary: 'binary',\r\n};\r\n\r\nexport enum EMBODIMENT_TYPES {\r\n    ChatBot = 'chatBot',\r\n    ChatGPT = 'chatGPT',\r\n}\r\n\r\nexport const ERR_MSG_INVALID_IMAGE_SOURCE =\r\n    'Please provide a valid Image Source. Supported image sources are: HTTP(S) URL, Base64 string, Data URL, Output Image from other component(s).';\r\nexport const ERR_MSG_INVALID_BINARY =\r\n    'Please provide a valid data that is either a Blob, SmythFileObject (Binary Output from any Component), ArrayBuffer, Buffer, Base64 string, Data URL, or HTTP(s) URL';\r\nexport const ERR_MSG_MAX_DEPTH = 'The maximum depth has been exceeded for the provided array or object.';\r\nexport const ERR_MSG_MAX_ARRAY_SIZE = 'The maximum array size has been exceeded for the provided array.';\r\nexport const ERR_MSG_MAX_OBJECT_SIZE = 'The maximum object size has been exceeded for the provided object.';\r\n\r\nexport const MAX_DEPTH = 10;\r\nexport const MAX_OBJECT_SIZE = 1000;\r\nexport const MAX_ARRAY_SIZE = 1000;\r\n\r\nexport const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\r\n\r\nexport const MAX_FILE_COUNT = 10;\r\n\r\n// Default maximum number of tokens allowed for LLM\r\nexport const DEFAULT_MAX_TOKENS_FOR_LLM = 2048;\r\n\r\n// life cycle tag for daily purge of s3 objects\r\nexport const S3_DAILY_PURGE_LIFECYCLE_TAG = 'ExpirationPolicy=DeleteDaily';\r\nexport const S3_WEEKLY_PURGE_LIFECYCLE_TAG = 'ExpirationPolicy=DeleteWeekly';\r\nexport const S3_MONTHLY_PURGE_LIFECYCLE_TAG = 'ExpirationPolicy=DeleteMonthly';\r\n\r\nexport const TOOL_USE_DEFAULT_MODEL = 'gpt-4o-mini';\r\n\r\nexport const COMP_NAMES = {\r\n    apiCall: 'APICall',\r\n    code: 'Code',\r\n    llmPrompt: 'PromptGenerator',\r\n    visionLLM: 'VisionLLM',\r\n};\r\n\r\nexport const JSON_RESPONSE_INSTRUCTION =\r\n    '\\nAll responses should be in valid JSON format, compacted without newlines, indentations, or additional JSON syntax markers.';\r\n","import { fileTypeFromBuffer } from 'file-type';\r\nimport { isValidString } from './string.utils';\r\nimport { MAX_FILE_SIZE } from '@sre/constants';\r\n\r\n/**\r\n * This function converts a text string to a base64 URL.\r\n * @param text\r\n * @returns\r\n */\r\nexport function textToBase64Url(text) {\r\n    // Create a Buffer from the string\r\n    const buffer = Buffer.from(text, 'utf-8');\r\n\r\n    // Convert the Buffer to a base64 string\r\n    const base64String = buffer.toString('base64');\r\n\r\n    // Construct the data URL\r\n    const base64Url = `data:text/plain;base64,${base64String}`;\r\n\r\n    return base64Url;\r\n}\r\n\r\nexport const isBase64FileUrl = (url: string): boolean => {\r\n    if (typeof url !== 'string') return false;\r\n\r\n    const regex = /^data:([\\w+\\-\\.]+\\/[\\w+\\-\\.]+);base64,(.*)$/;\r\n    const match = url.match(regex);\r\n    if (!match) return false;\r\n    const [, , base64Data] = match;\r\n\r\n    return isBase64(base64Data);\r\n};\r\n\r\nexport const getMimetypeFromBase64Data = async (data: string) => {\r\n    try {\r\n        data = _cleanUpBase64Data(data);\r\n\r\n        // Convert the base64 string back to a Buffer\r\n        const imageBuffer = Buffer.from(data, 'base64');\r\n\r\n        const type = await fileTypeFromBuffer(imageBuffer);\r\n        return type?.mime || '';\r\n    } catch (error) {\r\n        console.error('Error getting mimetype from base64 data: ', error);\r\n        return '';\r\n    }\r\n};\r\n\r\nexport async function extractBase64DataAndMimeType(data: string): Promise<{ data: string; mimetype: string }> {\r\n    if (typeof data !== 'string' || data?.length > MAX_FILE_SIZE) {\r\n        return { data: '', mimetype: '' };\r\n    }\r\n\r\n    if (isBase64FileUrl(data)) {\r\n        const regex = /^data:([^;]+);base64,(.*)$/;\r\n        const match = data.match(regex);\r\n        if (!match) return { data: '', mimetype: '' };\r\n        const [, mimetype, base64Data] = match;\r\n\r\n        return { data: _cleanUpBase64Data(base64Data), mimetype };\r\n    } else if (isBase64(data)) {\r\n        return { data: _cleanUpBase64Data(data), mimetype: await getMimetypeFromBase64Data(data) };\r\n    }\r\n\r\n    return { data: '', mimetype: '' };\r\n}\r\n\r\n//=== Legacy code below ===\r\n//@Forhad the functions below need to be reviewed and refactored\r\n\r\n/**\r\n * Remove all whitespace characters and literal \\n and \\s sequences\r\n *\r\n * @note It's common practice to split base64 data into multiple lines for better readability and to avoid issues with systems that can't handle very long lines. So we need to clean up newline characters from the base64 data before processing it.\r\n * @param {string} str - The input string.\r\n * @returns {string} The input string with all newline characters and escaped newline strings removed.\r\n */\r\nfunction cleanBase64(str: string): string {\r\n    return str.replace(/\\s|\\\\n|\\\\s/g, '');\r\n}\r\n\r\n/**\r\n * Checks if the input is a data URL.\r\n *\r\n * @param {string} input - The input string.\r\n * @returns {boolean} True if the input is a data URL, false otherwise.\r\n */\r\nexport function isDataUrl(input: string): boolean {\r\n    // Data URL pattern: data:[<mediatype>][;base64],<data>\r\n    const dataUrlPattern = /^data:([\\w+\\-\\.]+\\/[\\w+\\-\\.]+);base64,(.*)$/;\r\n\r\n    return dataUrlPattern.test(input);\r\n}\r\n\r\n/**\r\n * Checks if the given string is a valid Base64-encoded string.\r\n *\r\n * @param {string} str - The string to check.\r\n * @returns {boolean} True if the string is a valid Base64-encoded string, false otherwise.\r\n */\r\nexport function isRawBase64(str: string): boolean {\r\n    if (!isValidString(str)) return false;\r\n\r\n    const cleanedBase64Data = cleanBase64(str);\r\n\r\n    // Sometimes words like 'male' and hashes like md5, sha1, sha256, sha512 are detected as base64\r\n    if (cleanedBase64Data.length < 128) return false;\r\n\r\n    try {\r\n        const buffer = Buffer.from(cleanedBase64Data, 'base64');\r\n\r\n        // ignoring trailing padding ensures that the comparison is based on the actual content, not the padding\r\n        return buffer.toString('base64').replace(/=+$/, '') === cleanedBase64Data.replace(/=+$/, '');\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Parses a Base64-encoded string or data URL and extracts the MIME type and cleaned data.\r\n *\r\n * @param {string} input - The Base64-encoded string or data URL.\r\n * @returns {Promise<{ mimetype: string; data: string }>} An object containing the MIME type and the cleaned Base64 data.\r\n * @throws {Error} If the input is invalid.\r\n */\r\nexport async function parseBase64(input: string): Promise<{ mimetype: string; data: string }> {\r\n    try {\r\n        if (isDataUrl(input)) {\r\n            return parseDataUrl(input);\r\n        }\r\n\r\n        if (!isRawBase64(input)) {\r\n            throw new Error('Invalid base64 data!');\r\n        }\r\n\r\n        return await parseRawBase64(input);\r\n    } catch (error) {\r\n        throw new Error(`Error parsing base64 data: ${error.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Parses a Base64-encoded data URL and extracts the MIME type and cleaned data.\r\n *\r\n * @param {string} input - The Base64-encoded data URL.\r\n * @returns {{ mimetype: string; data: string }} An object containing the MIME type and the cleaned Base64 data.\r\n * @throws {Error} If the input is invalid.\r\n */\r\nfunction parseDataUrl(input: string): { mimetype: string; data: string } {\r\n    const dataUrlPattern = /^data:([\\w+\\-\\.]+\\/[\\w+\\-\\.]+);base64,(.*)$/;\r\n    const matches = input.match(dataUrlPattern);\r\n\r\n    if (!matches) {\r\n        throw new Error('Invalid data URL!');\r\n    }\r\n\r\n    const [, mimetype, data] = matches;\r\n\r\n    if (!isRawBase64(data)) {\r\n        throw new Error('Invalid base64 data!');\r\n    }\r\n\r\n    return { mimetype, data: cleanBase64(data) };\r\n}\r\n\r\n/**\r\n * Parses a raw Base64-encoded string and extracts the MIME type and cleaned data.\r\n *\r\n * @param {string} input - The raw Base64-encoded string.\r\n * @returns {Promise<{ mimetype: string; data: string }>} An object containing the MIME type and the cleaned Base64 data.\r\n */\r\nasync function parseRawBase64(input: string): Promise<{ mimetype: string; data: string }> {\r\n    const cleanedData = cleanBase64(input);\r\n    const mimetype = await identifyMimetypeFromRawBase64(cleanedData);\r\n\r\n    return { mimetype, data: cleanedData };\r\n}\r\n\r\n/**\r\n * Identifies the MIME type from a raw Base64-encoded string.\r\n *\r\n * This function cleans the input Base64 string, converts it to a buffer, and then identifies the MIME type\r\n * using the `fileTypeFromBuffer` function.\r\n *\r\n * @param {string} data - The raw Base64-encoded string from which to identify the MIME type.\r\n * @returns {Promise<string>} A promise that resolves to the MIME type of the data, or an empty string if the MIME type cannot be determined.\r\n *\r\n * @throws {Error} If an error occurs during the process, it logs the error and returns an empty string.\r\n */\r\nexport async function identifyMimetypeFromRawBase64(data: string): Promise<string> {\r\n    try {\r\n        const cleanedData = cleanBase64(data);\r\n\r\n        // Convert the base64 string back to a Buffer\r\n        const buffer = Buffer.from(cleanedData, 'base64');\r\n\r\n        const type = await fileTypeFromBuffer(buffer);\r\n\r\n        return type?.mime || '';\r\n    } catch (error) {\r\n        throw new Error(`Error identifying MIME type from base64 data: ${error?.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Identifies the MIME type from a raw Base64-encoded string.\r\n *\r\n * This function cleans the input Base64 string, converts it to a buffer, and then identifies the MIME type\r\n * using the `fileTypeFromBuffer` function.\r\n *\r\n * @param {string} data - The raw Base64-encoded string from which to identify the MIME type.\r\n * @returns {Promise<string>} A promise that resolves to the MIME type of the data, or an empty string if the MIME type cannot be determined.\r\n *\r\n * @throws {Error} If an error occurs during the process, it logs the error and returns an empty string.\r\n */\r\nexport async function identifyMimeTypeFromBase64(input: string): Promise<string> {\r\n    try {\r\n        const { data } = await parseBase64(input);\r\n\r\n        const buffer = Buffer.from(data, 'base64');\r\n\r\n        const type = await fileTypeFromBuffer(buffer);\r\n\r\n        return type?.mime || '';\r\n    } catch (error) {\r\n        throw new Error(`Error identifying MIME type from base64 data: ${error?.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the size of a Base64-encoded string in bytes.\r\n *\r\n * This function validates the input string to ensure it is a valid Base64-encoded string,\r\n * converts it to a buffer, and then returns the byte length of the buffer.\r\n *\r\n * @param {string} str - The Base64-encoded string whose size is to be calculated.\r\n * @returns {number} The size of the Base64-encoded string in bytes.\r\n *\r\n * @throws {Error} If the input string is not a valid Base64-encoded string or if an error occurs during conversion.\r\n */\r\nexport function getSizeOfBase64(str: string): number {\r\n    if (!isValidString(str)) {\r\n        throw new Error('Invalid Base64 data!');\r\n    }\r\n\r\n    try {\r\n        const buffer = Buffer.from(str, 'base64');\r\n        return buffer.byteLength;\r\n    } catch (error) {\r\n        throw new Error(`Invalid Base64 data! ${error.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Generates a Base64 Data URL from a raw Base64-encoded string.\r\n *\r\n * This function validates the input Base64 string, removes any newline characters,\r\n * and constructs a Data URL with the specified MIME type.\r\n *\r\n * @param {string} data - The raw Base64-encoded string to be converted into a Data URL.\r\n * @param {string} [mimetype='application/octet-stream'] - The MIME type of the data. Defaults to 'application/octet-stream'.\r\n * @returns {string} The generated Base64 Data URL.\r\n *\r\n * @throws {Error} If the input string is not a valid Base64-encoded string.\r\n */\r\nexport function makeBase64Url(data: string, mimetype: string = 'application/octet-stream'): string {\r\n    if (!isValidString(data)) {\r\n        throw new Error('Invalid Base64 data!');\r\n    }\r\n\r\n    // Remove any newline characters from the Base64 string\r\n    const cleanedData = data.replace(/\\n/g, '');\r\n\r\n    // Construct and return the Data URL\r\n    return `data:${mimetype};base64,${cleanedData}`;\r\n}\r\n\r\n/**\r\n ** It's common practice to split base64 data into multiple lines for better readability and to avoid issues with systems that can't handle very long lines.\r\n ** So we need to clean up newline characters from the base64 data before processing it.\r\n * @param {string} str - The input string.\r\n * @returns {string} The input string with all newline characters and escaped newline strings removed.\r\n */\r\nconst _cleanUpBase64Data = (str: string): string => {\r\n    // Check if the input is a string and is not excessively large\r\n    if (typeof str !== 'string' || str.length > MAX_FILE_SIZE) {\r\n        throw new Error('Invalid input');\r\n    }\r\n\r\n    // Remove all whitespace characters and literal \\n and \\s sequences\r\n    return str.replace(/\\s|\\\\n|\\\\s/g, '');\r\n};\r\n\r\nexport const isBase64 = (str: string): boolean => {\r\n    if (!str || !(typeof str === 'string')) return false;\r\n\r\n    str = _cleanUpBase64Data(str);\r\n\r\n    try {\r\n        // * sometimes word like 'male' and hash like md5, sha1, sha256, sha512 are detected as base64\r\n        if (str?.length < 128) return false;\r\n\r\n        const buffer = Buffer.from(str, 'base64');\r\n\r\n        return buffer.toString('base64') === str;\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n","import { Readable } from 'stream';\r\nimport { isRawBase64 } from './base64.utils';\r\nimport { isBinaryFileSync } from 'isbinaryfile';\r\n\r\n// Helper function to convert stream to buffer\r\nexport async function streamToBuffer(stream: Readable): Promise<Buffer> {\r\n    const chunks: Buffer[] = [];\r\n    for await (const chunk of stream) {\r\n        chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk);\r\n    }\r\n    return Buffer.concat(chunks);\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n// == Helpers from Legacy Smyth implementation ==============================================\r\n// FIXME : below functions should probably be converted to a validator\r\n\r\n//export declare function isBinaryFile(file: string | Buffer, size?: number): Promise<boolean>;\r\n//export declare function isBinaryFileSync(file: string | Buffer, size?: number): boolean;\r\nconst binaryMimeTypes = ['image/', 'audio/', 'video/', 'application/pdf', 'application/zip', 'application/octet-stream'];\r\n\r\nexport function dataToBuffer(data: any): Buffer | null {\r\n    let bufferData;\r\n    switch (true) {\r\n        case data instanceof ArrayBuffer:\r\n            bufferData = Buffer.from(new Uint8Array(data));\r\n            break;\r\n        case ArrayBuffer.isView(data) && !(data instanceof DataView):\r\n            bufferData = Buffer.from(new Uint8Array(data.buffer));\r\n            break;\r\n        case data instanceof DataView:\r\n            bufferData = Buffer.from(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\r\n            break;\r\n        case Buffer.isBuffer(data):\r\n            bufferData = data;\r\n            break;\r\n        case typeof data === 'string':\r\n            bufferData = Buffer.from(data, 'utf-8');\r\n            break;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n    return bufferData;\r\n}\r\n\r\nexport const getSizeFromBinary = (data: any) => {\r\n    const buffer = dataToBuffer(data);\r\n    if (!buffer) return 0;\r\n    return buffer.byteLength;\r\n};\r\n\r\nexport const isPlainObject = (data: any): boolean => {\r\n    return (\r\n        typeof data === 'object' &&\r\n        data !== null &&\r\n        !Array.isArray(data) &&\r\n        Object.prototype.toString.call(data) === '[object Object]' &&\r\n        data.constructor === Object\r\n    );\r\n};\r\n\r\n// isBuffer checks if the provided data is a Buffer object in Node.js.\r\nexport const isBuffer = (data: any): boolean => {\r\n    try {\r\n        return Buffer.isBuffer(data);\r\n    } catch {\r\n        // Buffer.isBuffer throws error when non-array Object is passed\r\n        return false;\r\n    }\r\n};\r\n\r\n// isBinaryMimeType checks if the provided mimetype indicates binary data.\r\nexport const isBinaryMimeType = (mimetype): boolean => {\r\n    if (mimetype) {\r\n        return binaryMimeTypes.some((type) => mimetype.startsWith(type));\r\n    }\r\n    return false;\r\n};\r\n\r\n// isBinaryData checks if the provided data is binary.\r\n// If the data is a Buffer, ArrayBuffer, TypedArray, or DataView, it checks if it contains binary data.\r\nexport const isBinaryData = (data): boolean => {\r\n    // To prevent returning true when we have emojis in the string like \"Hello 😀\"\r\n    if (typeof data === 'string') return false;\r\n\r\n    try {\r\n        const buffer = dataToBuffer(data);\r\n        if (!buffer) return false;\r\n        return isBinaryFileSync(buffer, buffer.byteLength);\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexport function isUrl(str: string): boolean {\r\n    if (typeof str !== 'string') return false;\r\n    // This regex checks for protocol, hostname, domain, port (optional), path (optional), and query string (optional)\r\n    //const regex = /^(https?:\\/\\/)([^\\s.]+\\.[^\\s]{2,})(:[0-9]{1,5})?(\\/[^\\s]*)?(\\?[^\\s]*)?$/i;\r\n    const regex = /^([a-zA-Z0-9]+:\\/\\/)([^\\s.]+\\.[^\\s]{2,})(:[0-9]{1,5})?(\\/[^\\s]*)?(\\?[^\\s]*)?$/i;\r\n\r\n    return regex.test(str);\r\n}\r\n\r\nexport const isSmythFileObject = (data: any): boolean => {\r\n    return !!(typeof data === 'object' && data !== null && data?.url && isUrl(data?.url) && 'size' in data && 'mimetype' in data);\r\n};\r\n\r\nexport const isBufferObject = (data: Record<string, any>): boolean => {\r\n    if (!data) return false;\r\n\r\n    return typeof data === 'object' && data !== null && data?.buffer && isBuffer(data.buffer) && 'size' in data && 'mimetype' in data;\r\n};\r\n\r\nexport const isBase64Object = (data: Record<string, any>): boolean => {\r\n    if (!data) return false;\r\n\r\n    return typeof data === 'object' && data !== null && data?.base64 && isRawBase64(data.base64) && 'size' in data && 'mimetype' in data;\r\n};\r\n","/**\r\n * This function parses the command line arguments and returns an object with the parsed values.\r\n * The expected format is --file ./path/to/file.txt or --settings key1=value1 key2=value2\r\n * Examples:\r\n *  --file ./path/to/file.txt : calling parseCLIArgs('file', process.argv) will return {file: './path/to/file.txt'}\r\n *  --settings key1=value1 key2=value2 : calling parseCLIArgs('settings', process.argv) will return {settings: {key1: 'value1', key2: 'value2'}}\r\n *  it can also parse multiple arguments at once, for example:\r\n *      parseCLIArgs(['file', 'settings'], process.argv) will return {file: './path/to/file.txt', settings: {key1: 'value1', key2: 'value2'}}\r\n *\r\n * @param argList the argument to parse\r\n * @param argv the command line arguments, usually process.argv\r\n * @returns parsed arguments object\r\n */\r\n\r\nexport function parseCLIArgs(argList: string | Array<string>, argv?: Array<string>): Record<string, any> {\r\n    if (!argv) argv = process.argv;\r\n    const args = argv;\r\n    const result = {};\r\n    const mainArgs = Array.isArray(argList) ? argList : [argList];\r\n    mainArgs.forEach((mainArg) => {\r\n        const mainArgIndex = args.indexOf(`--${mainArg}`);\r\n        if (mainArgIndex !== -1) {\r\n            const values: any = [];\r\n            for (let i = mainArgIndex + 1; i < args.length; i++) {\r\n                if (args[i].startsWith('--')) break;\r\n                values.push(args[i]);\r\n            }\r\n\r\n            if (values.length === 1 && values[0].includes('=')) {\r\n                const keyValuePairs = {};\r\n                const [key, ...valParts] = values[0].split('=');\r\n                const val = valParts.join('=').replace(/^\"|\"$/g, '');\r\n                keyValuePairs[key] = val;\r\n                result[mainArg] = keyValuePairs;\r\n            } else if (values.length === 1) {\r\n                result[mainArg] = values[0];\r\n            } else if (values.length > 1) {\r\n                const keyValuePairs = {};\r\n                values.forEach((value) => {\r\n                    const [key, ...valParts] = value.split('=');\r\n                    const val = valParts.join('=').replace(/^\"|\"$/g, '');\r\n                    keyValuePairs[key] = val;\r\n                });\r\n                result[mainArg] = keyValuePairs;\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * List all cli main arguments\r\n * example : node index.js --file ./path/to/file.txt --settings key1=value1 key2=value2\r\n * calling getMainArgs(process.argv) will return ['file', 'settings']\r\n */\r\nexport function getMainArgs(argv?: Array<string>): Array<string> {\r\n    if (!argv) argv = process.argv;\r\n    const args = argv;\r\n    const result = [];\r\n    for (let i = 2; i < args.length; i++) {\r\n        if (args[i].startsWith('--')) {\r\n            result.push(args[i].replace(/^--/, ''));\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","export function isDigits(str: string): boolean {\r\n    if (typeof str === 'number') return true;\r\n\r\n    if (typeof str !== 'string') return false;\r\n\r\n    const numRegex = /^-?\\d+(\\.\\d+)?$/;\r\n    return numRegex.test(str.trim());\r\n}\r\n\r\nexport function isSafeNumber(str: string): boolean {\r\n    const num = parseFloat(str);\r\n    return !isNaN(num) && num <= Number.MAX_SAFE_INTEGER && num >= Number.MIN_SAFE_INTEGER && num.toString() === str.trim();\r\n}\r\n","interface RangeValidationArgs {\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\n/**\r\n * Custom validation function to check if a string contains only specified characters.\r\n * @param {string} value - The string to validate.\r\n * @returns {string} - The validated string.\r\n */\r\nexport function validateCharacterSet(value: string): boolean {\r\n    if (value === '') return true;\r\n    // Check for {{sometext}} structures and split the string\r\n    const parts = value.split(/(\\{\\{[^}]+\\}\\})/).filter(Boolean);\r\n\r\n    for (const part of parts) {\r\n        if (part.startsWith('{{') && part.endsWith('}}')) {\r\n            // Check if the content inside {{...}} is not empty\r\n            const innerContent = part.slice(2, -2).trim();\r\n            if (innerContent === '') {\r\n                return false; // Empty content inside {{...}}\r\n            }\r\n        } else {\r\n            // Check for valid characters outside of {{...}}\r\n            if (!/^[a-zA-Z0-9\\-_.]+$/.test(part)) {\r\n                return false; // Invalid characters found\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Validates whether a given string value can be converted to an integer that falls within a specified range.\r\n * This function is designed to be used as a custom validator in Joi schemas.\r\n *\r\n * @param {RangeValidationArgs} args - An object containing optional 'min' and 'max' properties to define the range.\r\n * @returns {Function} A function that takes a string value and a Joi helper object, and performs the validation.\r\n *\r\n * The validation function first converts the string value to a number. It then checks if the number is within the\r\n * specified range (if provided). If the value is not a number or falls outside the range, it throws an error with a\r\n * descriptive message.\r\n *\r\n * The error message includes the field name for clarity, using the label from the Joi schema if available.\r\n */\r\nexport const validateInteger = (args: RangeValidationArgs) => {\r\n    return (value: string, helpers: any) => {\r\n        const numValue = Number(value);\r\n        const fieldName = helpers.schema._flags.label || helpers.state.path[helpers.state.path.length - 1];\r\n\r\n        // Check if the value is a number\r\n        if (isNaN(numValue)) {\r\n            throw new Error(`The value for '${fieldName}' must be a number`);\r\n        }\r\n\r\n        // Range validations\r\n        if (args.min !== undefined && args.max !== undefined) {\r\n            if (numValue < args.min || numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be from ${args.min} to ${args.max}`);\r\n            }\r\n        } else if (args.min !== undefined) {\r\n            if (numValue < args.min) {\r\n                throw new Error(`The value for '${fieldName}' must be greater or equal to ${args.min}`);\r\n            }\r\n        } else if (args.max !== undefined) {\r\n            if (numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be less or equal to ${args.max}`);\r\n            }\r\n        }\r\n\r\n        return value; // Value is valid\r\n    };\r\n};\r\n","import dotenv from 'dotenv';\r\ndotenv.config();\r\n//FIXME : this is a legacy structure from Smyth SaaS we need to convert it to a Service/Connector structure\r\nconst config = {\r\n    env: {\r\n        LOG_LEVEL: process.env.LOG_LEVEL || 'none',\r\n        LOG_FILTER: process.env.LOG_FILTER || '',\r\n\r\n        OPENAI_API_KEY: process.env.OPENAI_API_KEY,\r\n        ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,\r\n\r\n        DATA_PATH: process.env.DATA_PATH,\r\n\r\n        NODE_ENV: process.env?.NODE_ENV,\r\n\r\n        AGENT_DOMAIN: process.env?.AGENT_DOMAIN,\r\n\r\n        AGENT_DOMAIN_PORT: process.env?.AGENT_DOMAIN_PORT,\r\n        CODE_SANDBOX_URL: process.env?.CODE_SANDBOX_URL,\r\n        TOGETHER_AI_API_URL: process.env?.TOGETHER_AI_API_URL,\r\n\r\n        REDIS_SENTINEL_HOSTS: process.env?.REDIS_SENTINEL_HOSTS || '',\r\n        REDIS_MASTER_NAME: process.env?.REDIS_MASTER_NAME,\r\n        REDIS_PASSWORD: process.env?.REDIS_PASSWORD,\r\n\r\n        AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,\r\n        AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,\r\n        AWS_S3_REGION: process.env.AWS_S3_REGION,\r\n        AWS_S3_BUCKET_NAME: process.env.AWS_S3_BUCKET_NAME,\r\n\r\n        PINECONE_API_KEY: process.env.PINECONE_API_KEY,\r\n        PINECONE_INDEX_NAME: process.env.PINECONE_INDEX_NAME,\r\n\r\n        LOGTO_SERVER: process.env.LOGTO_SERVER,\r\n        SMYTH_VAULT_API_BASE_URL: process.env.SMYTH_VAULT_API_BASE_URL,\r\n    },\r\n    agent: {\r\n        ENDPOINT_PREFIX: '/api',\r\n    },\r\n};\r\n\r\nexport default config;\r\n","import 'dotenv/config';\r\nimport winston from 'winston';\r\nimport Transport from 'winston-transport';\r\nimport { parseCLIArgs } from '../utils';\r\nimport config from '@sre/config';\r\n\r\nwinston.addColors({\r\n    error: 'red',\r\n    warn: 'yellow',\r\n    info: 'green',\r\n    debug: 'blue',\r\n});\r\n\r\nlet logLevel = parseCLIArgs('debug')?.debug || config.env.LOG_LEVEL || 'info';\r\nif (!['none', 'error', 'warn', 'info', 'debug'].includes(logLevel)) {\r\n    logLevel = 'none';\r\n}\r\n\r\n// Retrieve the DEBUG environment variable and split it into an array of namespaces\r\nconst namespaces = (config.env.LOG_FILTER || '').split(',');\r\n\r\n// Create a Winston format that filters messages based on namespaces\r\nconst namespaceFilter = winston.format((info) => {\r\n    // If DEBUG is not set, log everything\r\n    if (!config.env.LOG_FILTER || namespaces.some((ns) => info.module?.includes(ns))) {\r\n        return info;\r\n    }\r\n    return false; // Filter out messages that do not match the namespace\r\n})();\r\n\r\n// Custom stream for your transport\r\nclass ArrayTransport extends Transport {\r\n    private logs: any[];\r\n    constructor(opts) {\r\n        super(opts);\r\n        // Configure your storage array\r\n        this.logs = opts.logs;\r\n    }\r\n\r\n    log(info, callback) {\r\n        setImmediate(() => {\r\n            this.emit('logged', info);\r\n        });\r\n\r\n        // Perform the writing to the array storage\r\n        this.logs.push(`${info.level}: ${info.message}`);\r\n\r\n        // Perform the writing to the remote service\r\n        callback();\r\n    }\r\n}\r\n\r\nexport class LogHelper {\r\n    public startTime = Date.now();\r\n    public get output() {\r\n        return Array.isArray(this.data) ? this.data.join('\\n') : undefined;\r\n    }\r\n    public get elapsedTime() {\r\n        return Date.now() - this.startTime;\r\n    }\r\n    constructor(private _logger: winston.Logger, public data, private labels: { [key: string]: any }) {}\r\n\r\n    public log(...args) {\r\n        this._logger.log('info', formatLogMessage(...args), this.labels);\r\n    }\r\n    public warn(...args) {\r\n        this._logger.log('warn', formatLogMessage(...args), this.labels);\r\n    }\r\n    public debug(...args) {\r\n        this._logger.log('debug', formatLogMessage(...args), this.labels);\r\n    }\r\n    public info(...args) {\r\n        this._logger.log('info', formatLogMessage(...args), this.labels);\r\n    }\r\n    public verbose(...args) {\r\n        this._logger.log('verbose', formatLogMessage(...args), this.labels);\r\n    }\r\n\r\n    public error(...args) {\r\n        const stack = new Error().stack;\r\n\r\n        this._logger.log('error', formatLogMessage(...args), { ...this.labels, stack });\r\n    }\r\n\r\n    public close() {\r\n        this._logger.clear();\r\n        this._logger.close();\r\n    }\r\n}\r\n\r\nconst colorizedFormat = winston.format.printf((info) => {\r\n    return `${info.timestamp} ${winston.format.colorize().colorize(info.level, `${info.level}: ${info.message}`)}`;\r\n});\r\n\r\nconst MAX_LOG_MESSAGE_LENGTH = 500;\r\n\r\nfunction redactLogMessage(logMessage: string) {\r\n    if (logMessage.length > 500) {\r\n        return logMessage;\r\n    }\r\n\r\n    const sensitiveWords = ['password', 'eyJ', 'token', 'email', 'secret', 'key', 'apikey', 'api_key', 'auth', 'credential'];\r\n    const obfuscatedString = ' [!! SmythOS::REDACTED_DATA !!] ';\r\n\r\n    // Iterate through the sensitive words list and replace sensitive data in the log message\r\n\r\n    for (const sensitiveWord of sensitiveWords) {\r\n        // Create a regular expression to find the sensitive word followed by any character (non-greedy) until a space, newline, or separator is found.\r\n        const regex = new RegExp(`(${sensitiveWord})((?:[^\\\\n]{0,29}(?=\\\\n))|(?:[^\\\\n]{30}\\\\S*))`, 'gmi');\r\n\r\n        // Replace sensitive data with the obfuscated string\r\n        logMessage = logMessage.replace(regex, `$1${obfuscatedString}`);\r\n    }\r\n\r\n    return logMessage;\r\n}\r\n// function redactLogMessage(logMessage: string, beforeChars: number = 15, afterChars: number = 30): string {\r\n//     const sensitiveWords = ['password', 'eyJ', 'token', 'email', 'secret', 'key', 'apikey', 'api_key', 'auth', 'credential'];\r\n//     const obfuscatedString = ' [!!!REDACTED!!!] ';\r\n\r\n//     // Iterate through the sensitive words list and replace sensitive data in the log message\r\n//     for (const sensitiveWord of sensitiveWords) {\r\n//         // Escape special regex characters in the sensitive word\r\n//         const escapedWord = sensitiveWord.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n\r\n//         // Create a regular expression to match characters before and after the sensitive word\r\n//         const regex = new RegExp(`(.{0,${beforeChars}})(${escapedWord})(.{0,${afterChars}})`, 'gmi');\r\n\r\n//         // Replace the entire match with the obfuscated string\r\n//         logMessage = logMessage.replace(regex, obfuscatedString);\r\n//     }\r\n\r\n//     return logMessage;\r\n// }\r\n\r\nfunction createBaseLogger(memoryStore?: any[]) {\r\n    const logger = winston.createLogger({\r\n        //level: 'info', // log level\r\n\r\n        format: winston.format.combine(\r\n            winston.format((info) => {\r\n                if (config.env.LOG_LEVEL == 'none') return false; // skip logging if log level is none\r\n\r\n                // Apply redaction to the log message\r\n                //info.message = redactSecrets(info.message, sensitiveOptions);\r\n\r\n                info.message = redactLogMessage(info.message);\r\n                return info;\r\n            })(),\r\n            winston.format.timestamp(),\r\n            winston.format.errors({\r\n                stack: true,\r\n            }),\r\n            winston.format.splat(),\r\n            winston.format.json()\r\n        ),\r\n\r\n        transports: [\r\n            new winston.transports.Console({\r\n                level: 'error',\r\n                //handleExceptions: true,\r\n                format: winston.format.combine(\r\n                    winston.format.printf((info) => {\r\n                        let message = info.message;\r\n                        //message = message?.length > MAX_LOG_MESSAGE_LENGTH ? message.substring(0, MAX_LOG_MESSAGE_LENGTH) + '...' : message;\r\n                        return `${info.level}:${info.module || ''} ${message} ${info.stack || ''}`;\r\n                    })\r\n                ),\r\n                stderrLevels: ['error'], // Define levels that should be logged to stderr\r\n            }),\r\n            new winston.transports.Console({\r\n                level: logLevel,\r\n                format: winston.format.combine(\r\n                    namespaceFilter,\r\n                    winston.format.printf((info) => {\r\n                        const module = info.module ? winston.format.colorize().colorize(info.level, ` [${info.module}]`) : '';\r\n                        const ns = winston.format.colorize().colorize(info.level, `${info.level}${module}`);\r\n\r\n                        let message = info.message;\r\n                        //message = message?.length > MAX_LOG_MESSAGE_LENGTH ? message.substring(0, MAX_LOG_MESSAGE_LENGTH) + '...' : message;\r\n\r\n                        return `${ns} - ${message}`;\r\n                    })\r\n                ),\r\n\r\n                //handleExceptions: true,\r\n            }),\r\n        ],\r\n    });\r\n\r\n    if (Array.isArray(memoryStore)) {\r\n        logger.add(\r\n            new ArrayTransport({\r\n                level: 'debug',\r\n                logs: memoryStore,\r\n            })\r\n        );\r\n    }\r\n\r\n    return logger;\r\n}\r\n\r\nfunction formatLogMessage(...args) {\r\n    return args\r\n        .map((arg) => {\r\n            // If the argument is an object (and not null), serialize it to JSON\r\n            if (typeof arg === 'object' && arg !== null && !(arg instanceof Error)) {\r\n                return JSON.stringify(arg, null, 2); // set the space to 2 for better readability\r\n            }\r\n            // Otherwise, just convert it to a string in case it's not\r\n            return String(arg);\r\n        })\r\n        .join(' '); // Concatenate all arguments with a space\r\n}\r\n\r\nfunction createLabeledLogger(labels: { [key: string]: any }, memoryStore?: any[]) {\r\n    const _logger = createBaseLogger(memoryStore);\r\n\r\n    _logger.defaultMeta = labels;\r\n\r\n    const logger = new LogHelper(_logger, memoryStore, labels);\r\n\r\n    return logger;\r\n}\r\n\r\nexport function Logger(module: string, withMemoryStore = false) {\r\n    return createLabeledLogger({ module }, withMemoryStore ? [] : undefined);\r\n}\r\n","import { Logger } from '../helpers/Log.helper';\r\nconst logger = Logger('DummyConnector');\r\n/**\r\n * DummyConnector is a placeholder for unimplemented connectors, it logs a warning when a method is called in order to help developers identify missing connectors\r\n */\r\nexport const DummyConnector: any = new Proxy(\r\n    {},\r\n    {\r\n        get: function (target, prop, receiver) {\r\n            // Check if the property being accessed is a function\r\n            if (typeof target[prop] === 'function') {\r\n                return target[prop];\r\n            } else {\r\n                // Return a function that logs \"unavailable\"\r\n                return function (...args: any[]) {\r\n                    logger.warn(`[!!] Unimplemented Connector tried to call : ${prop.toString()} with arguments:`, args);\r\n                };\r\n            }\r\n        },\r\n    }\r\n);\r\n","import { Logger } from '../helpers/Log.helper';\r\n\r\nconst console = Logger('Connector');\r\n\r\nexport class Connector {\r\n    public name: string;\r\n    public started = false;\r\n    private _readyPromise: Promise<boolean>;\r\n\r\n    constructor(config: any = {}) {}\r\n\r\n    /**\r\n     * Creates a new instance of the current class using the provided settings.\r\n     * This method can be called on both Connector instances and its subclasses.\r\n     *\r\n     * @param config - Configuration settings for the new instance.\r\n     * @returns A new instance of the current class.\r\n     */\r\n    public instance(config: any): this {\r\n        // Using 'this.constructor' to refer to the class of the current instance.\r\n        // The 'as any' cast is necessary because TypeScript doesn't automatically\r\n        // recognize that 'this.constructor' can be invoked with 'new'.\r\n        const constructor = this.constructor as { new (config: any): any };\r\n        return new constructor(config);\r\n    }\r\n    public async start() {\r\n        console.info(`Starting ${this.name} connector ...`);\r\n        this.started = true;\r\n    }\r\n\r\n    public async stop() {\r\n        console.info(`Stopping ${this.name} connector ...`);\r\n    }\r\n\r\n    public ready() {\r\n        if (!this._readyPromise) {\r\n            this._readyPromise = new Promise((resolve) => {\r\n                let maxWait = 10000;\r\n                const tick = 100;\r\n                if (this.started) {\r\n                    resolve(true);\r\n                } else {\r\n                    const interval = setInterval(() => {\r\n                        if (this.started) {\r\n                            clearInterval(interval);\r\n                            resolve(true);\r\n                        }\r\n\r\n                        maxWait -= tick;\r\n                        if (maxWait <= 0) {\r\n                            clearInterval(interval);\r\n                            resolve(false);\r\n                        }\r\n                    }, tick);\r\n                }\r\n            });\r\n        }\r\n        return this._readyPromise;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nconst SystemEvents = new EventEmitter();\r\n\r\nexport default SystemEvents;\r\n","import { SREConnectorConfig, TConnectorService, TServiceRegistry } from '@sre/types/SRE.types';\r\nimport { DummyConnector } from './DummyConnector';\r\nimport { Logger } from '../helpers/Log.helper';\r\nimport { Connector } from './Connector.class';\r\nimport { isSubclassOf } from '@sre/utils';\r\nimport SystemEvents from './SystemEvents';\r\nimport { StorageConnector } from '@sre/IO/Storage.service/StorageConnector';\r\nimport { CacheConnector } from '@sre/MemoryManager/Cache.service';\r\nimport { LLMConnector } from '@sre/LLMManager/LLM.service/LLMConnector';\r\nimport { VaultConnector } from '@sre/Security/Vault.service/VaultConnector';\r\nimport { AccountConnector } from '@sre/Security/Account.service/AccountConnector';\r\nimport { AgentDataConnector } from '@sre/AgentManager/AgentData.service/AgentDataConnector';\r\nimport { VectorDBConnector } from '@sre/IO/VectorDB.service/VectorDBConnector';\r\nimport { CLIConnector } from '@sre/IO/CLI.service/CLIConnector';\r\nimport { NKVConnector } from '@sre/IO/NKV.service/NKVConnector';\r\nconst console = Logger('ConnectorService');\r\n\r\nconst Connectors = {};\r\n\r\nconst ConnectorInstances: any = {};\r\nlet ServiceRegistry: TServiceRegistry = {};\r\nlet _ready = false;\r\nSystemEvents.on('SRE:Booted', (services) => {\r\n    ServiceRegistry = services;\r\n    _ready = true;\r\n});\r\nexport class ConnectorService {\r\n    //Singleton\r\n    // private constructor() {\r\n    //     SystemEvents.on('SRE:Booted', (services) => {\r\n    //         ServiceRegistry = services;\r\n    //     });\r\n    // }\r\n    // private static instance: ConnectorService;\r\n    // public static get Instance(): ConnectorService {\r\n    //     if (!ConnectorService.instance) {\r\n    //         ConnectorService.instance = new ConnectorService();\r\n    //     }\r\n    //     return ConnectorService.instance;\r\n    // }\r\n    public static get ready() {\r\n        return _ready;\r\n    }\r\n\r\n    public static get service(): TServiceRegistry {\r\n        return ServiceRegistry;\r\n    }\r\n    /**\r\n     * Allows SRE services to register their connectors, a registered conector can then be initialized and used by SRE or its services\r\n     * @param connectorType\r\n     * @param connectorName\r\n     * @param connectorConstructor\r\n     * @returns\r\n     */\r\n    static register(connectorType: TConnectorService, connectorName: string, connectorConstructor: any) {\r\n        if (typeof connectorConstructor !== 'function' || !isSubclassOf(connectorConstructor, Connector)) {\r\n            console.error(`Invalid Connector ${connectorType}:${connectorName}`);\r\n            return;\r\n        }\r\n        if (!Connectors[connectorType]) {\r\n            Connectors[connectorType] = {};\r\n        }\r\n        Connectors[connectorType][connectorName] = connectorConstructor;\r\n    }\r\n\r\n    /**\r\n     * The init method instantiates a connector and starts it, a connector cannot be used before it is initialized\r\n     * Usually the initialization phase happens during the SRE startup, but some connectors can be initialized later if they are not mandatory for the SRE to start\r\n     *\r\n     *\r\n     * @param connectorType\r\n     * @param connectorName\r\n     * @param settings\r\n     * @param isDefault\r\n     * @returns\r\n     */\r\n    static init(connectorType: TConnectorService, connectorName: string, settings: any = {}, isDefault = false) {\r\n        if (ConnectorInstances[connectorType]?.[connectorName]) {\r\n            throw new Error(`Connector ${connectorType}:${connectorName} already initialized`);\r\n        }\r\n\r\n        const entry = Connectors[connectorType];\r\n        if (!entry) return;\r\n        const connectorConstructor = entry[connectorName];\r\n\r\n        if (connectorConstructor) {\r\n            const connector: Connector = new connectorConstructor(settings);\r\n\r\n            connector.start();\r\n            if (!ConnectorInstances[connectorType]) ConnectorInstances[connectorType] = {};\r\n            ConnectorInstances[connectorType][connectorName] = connector;\r\n\r\n            if (!ConnectorInstances[connectorType].default && isDefault) {\r\n                ConnectorInstances[connectorType].default = connector;\r\n            }\r\n        }\r\n    }\r\n    static async _stop() {\r\n        for (let connectorName in ConnectorInstances) {\r\n            let allConnectors: Connector[] = Object.values(ConnectorInstances[connectorName]);\r\n            //deduplicate\r\n            allConnectors = allConnectors.filter((value, index, self) => self.indexOf(value) === index);\r\n            for (let connector of allConnectors) {\r\n                connector.stop();\r\n            }\r\n        }\r\n    }\r\n    static getInstance<T>(connectorType: TConnectorService, connectorName: string = 'default'): T {\r\n        const instance = ConnectorInstances[connectorType]?.[connectorName] as T;\r\n        if (!instance) {\r\n            if (ConnectorInstances[connectorType] && Object.keys(ConnectorInstances[connectorType]).length > 0) {\r\n                //return the first instance\r\n                return ConnectorInstances[connectorType][Object.keys(ConnectorInstances[connectorType])[0]] as T;\r\n            }\r\n            console.warn(`Connector ${connectorType} not initialized returning DummyConnector`);\r\n            return DummyConnector as T;\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    // Storage?: StorageService;\r\n    // Cache?: CacheService;\r\n    // LLM?: LLMService;\r\n    // Vault?: VaultService;\r\n    // Account?: AccountService;\r\n\r\n    static getStorageConnector(name?: string): StorageConnector {\r\n        return ConnectorService.getInstance<StorageConnector>(TConnectorService.Storage, name);\r\n    }\r\n\r\n    static getCacheConnector(name?: string): CacheConnector {\r\n        return ConnectorService.getInstance<any>(TConnectorService.Cache, name);\r\n    }\r\n\r\n    static getVectorDBConnector(name?: string): VectorDBConnector {\r\n        return ConnectorService.getInstance<VectorDBConnector>(TConnectorService.VectorDB, name);\r\n    }\r\n\r\n    static getNKVConnector(name?: string): NKVConnector {\r\n        return ConnectorService.getInstance<NKVConnector>(TConnectorService.NKV, name);\r\n    }\r\n\r\n    static getLLMConnector(name?: string): LLMConnector {\r\n        return ConnectorService.getInstance<LLMConnector>(TConnectorService.LLM, name);\r\n    }\r\n\r\n    static getVaultConnector(name?: string): VaultConnector {\r\n        return ConnectorService.getInstance<VaultConnector>(TConnectorService.Vault, name);\r\n    }\r\n\r\n    static getAccountConnector(name?: string): AccountConnector {\r\n        return ConnectorService.getInstance<AccountConnector>(TConnectorService.Account, name);\r\n    }\r\n\r\n    static getAgentDataConnector(name?: string): AgentDataConnector {\r\n        return ConnectorService.getInstance<AgentDataConnector>(TConnectorService.AgentData, name);\r\n    }\r\n\r\n    static getCLIConnector(name?: string): CLIConnector {\r\n        return ConnectorService.getInstance<CLIConnector>(TConnectorService.CLI, name);\r\n    }\r\n\r\n    //TODO: add missing get<Connector> functions : e.g getAgentData(), getCache() etc ...\r\n\r\n    static hasInstance(connectorType: TConnectorService, connectorName: string = 'default') {\r\n        const instance = ConnectorInstances[connectorType]?.[connectorName];\r\n        return instance && instance !== DummyConnector;\r\n    }\r\n}\r\n\r\nexport abstract class ConnectorServiceProvider {\r\n    public abstract register();\r\n    public init() {}\r\n    public constructor() {\r\n        this.register();\r\n    }\r\n}\r\n","import { Logger } from '@sre/helpers/Log.helper';\r\nconst console = Logger('EmbodimentSettings');\r\n\r\nexport default class EmbodimentSettings {\r\n    private _embodiments: any;\r\n    private _ready = false;\r\n\r\n    constructor(agentId) {\r\n        this.init(agentId);\r\n    }\r\n\r\n    async init(data) {\r\n        this._embodiments = data;\r\n        this._ready = true;\r\n    }\r\n    public ready(maxWait = 10000) {\r\n        return new Promise((resolve, reject) => {\r\n            const interval = setInterval(() => {\r\n                if (this._ready) {\r\n                    clearInterval(interval);\r\n                    resolve(true);\r\n                }\r\n                maxWait -= 100;\r\n            }, 100);\r\n\r\n            setTimeout(() => {\r\n                clearInterval(interval);\r\n                reject(false);\r\n            }, maxWait);\r\n        });\r\n    }\r\n\r\n    public get(embodimentType: string, key?: string) {\r\n        if (!this._embodiments) return undefined;\r\n        const _embodiment = this._embodiments.find((embodiment: any) => embodiment.type?.toLowerCase() === embodimentType.toLowerCase());\r\n\r\n        if (!_embodiment) {\r\n            //console.error(`Error: No ${embodimentType} embodiment found for agent`);\r\n        }\r\n        if (key) {\r\n            return _embodiment?.properties?.[key];\r\n        }\r\n        return _embodiment?.properties;\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport EmbodimentSettings from './EmbodimentSettings.class';\r\n\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nconst console = Logger('AgentSettings');\r\n\r\nexport default class AgentSettings {\r\n    private _settings: any;\r\n    public embodiments?: EmbodimentSettings;\r\n    private _ready = false;\r\n\r\n    constructor(agentId?) {\r\n        if (agentId) {\r\n            this.init(agentId);\r\n        }\r\n    }\r\n\r\n    async init(agentId) {\r\n        const agentDataConnector = ConnectorService.getAgentDataConnector();\r\n        this._settings = (await agentDataConnector.getAgentSettings(agentId).catch((e) => {})) || {};\r\n        this.embodiments = new EmbodimentSettings(this._settings.embodiments);\r\n        this._ready = true;\r\n    }\r\n\r\n    public ready(maxWait = 10000) {\r\n        return new Promise((resolve, reject) => {\r\n            const interval = setInterval(() => {\r\n                if (this._ready) {\r\n                    clearInterval(interval);\r\n                    resolve(true);\r\n                }\r\n                maxWait -= 100;\r\n            }, 100);\r\n\r\n            setTimeout(() => {\r\n                clearInterval(interval);\r\n                reject(false);\r\n            }, maxWait);\r\n        });\r\n    }\r\n    public get(key: string) {\r\n        return this._settings?.find((s) => s.key === key)?.value;\r\n    }\r\n    public set(key: string, value: any) {\r\n        this._settings[key] = value;\r\n    }\r\n    public has(key: string) {\r\n        return this._settings[key];\r\n    }\r\n}\r\n","//==[ SRE: ACL Types ]======================\r\n\r\nexport enum TAccessLevel {\r\n    None = 'none',\r\n    Owner = 'owner',\r\n    Read = 'read',\r\n    Write = 'write',\r\n}\r\n\r\nexport enum TAccessRole {\r\n    Agent = 'agent',\r\n    User = 'user',\r\n    Team = 'team',\r\n    Public = 'public',\r\n}\r\n\r\n// role and level mappings are used for ACL serialization / deserialization\r\nexport const RoleMap = {\r\n    user: 'u',\r\n    agent: 'a',\r\n    team: 't',\r\n    public: 'p',\r\n};\r\n\r\nexport const LevelMap = {\r\n    none: 'n',\r\n    owner: 'o',\r\n    read: 'r',\r\n    write: 'w',\r\n};\r\n\r\n// Reverse mappings\r\nexport const ReverseRoleMap = Object.fromEntries(Object.entries(RoleMap).map(([k, v]) => [v, k]));\r\nexport const ReverseLevelMap = Object.fromEntries(Object.entries(LevelMap).map(([k, v]) => [v, k]));\r\n\r\n/**\r\n * an ACLEntry is a list of access levels for a given owner.\r\n * an owner can be an agent, a user, a team or the public.\r\n */\r\nexport type TACLEntry = {\r\n    [hashedOwnerKey: string]: TAccessLevel[] | undefined;\r\n};\r\n/**\r\n * The Access Control List (ACL) is a list of access rights for a given resource.\r\n * Each entry in this ACL represents a role\r\n * Role entries define a list of owners of the resource and the access levels they have.\r\n * e.g.\r\n *  The following ACL defines that agentA and teamA has read and write access, while agentB and teamC has read access.\r\n *   {\r\n *      agent: {\r\n *         'agentA': ['read', 'write'],\r\n *         'agentB': ['read'],\r\n *     },\r\n *    team: {\r\n *       'teamA': ['read', 'write'],\r\n *       'teamC': ['read'],\r\n *     }\r\n * }\r\n */\r\n// prettier-ignore\r\nexport interface IACL {    \r\n    hashAlgorithm?: string | undefined;\r\n    entries?: {\r\n        [key in TAccessRole]?: TACLEntry | undefined;\r\n    };\r\n    migrated?: boolean | undefined;\r\n}\r\n\r\n// export type TACLMetadata = {\r\n//     acl?: TACL | undefined;\r\n// };\r\n\r\nexport interface IAccessCandidate {\r\n    role: TAccessRole;\r\n    id: string;\r\n}\r\n\r\nexport interface IAccessRequest {\r\n    id: string;\r\n    resourceId: string;\r\n    candidate: IAccessCandidate;\r\n    level: TAccessLevel | TAccessLevel[];\r\n}\r\n\r\nexport enum TAccessResult {\r\n    Granted = 'granted',\r\n    Denied = 'denied',\r\n}\r\n\r\nexport type TAccessTicket = {\r\n    request: IAccessRequest;\r\n    access: TAccessResult;\r\n};\r\n\r\n//custom errors\r\n\r\n//access denied error\r\nexport class ACLAccessDeniedError extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n        this.name = 'ACLAccessDeniedError';\r\n    }\r\n}\r\n","import { IAccessCandidate, IAccessRequest, TAccessLevel } from '@sre/types/ACL.types';\r\nimport { uid } from '@sre/utils/index';\r\n\r\nexport class AccessRequest implements IAccessRequest {\r\n    public id: string;\r\n    public resourceId: string;\r\n\r\n    public level: TAccessLevel[] = [];\r\n    public candidate: IAccessCandidate;\r\n\r\n    constructor(object?: IAccessRequest | IAccessCandidate) {\r\n        if (!object) {\r\n            this.id = 'aclR:' + uid();\r\n        }\r\n        if (['role', 'id'].every((k) => k in object)) {\r\n            //this is a candidate\r\n            this.id = 'aclR:' + uid();\r\n            this.candidate = object as IAccessCandidate;\r\n        } else {\r\n            const acReq: AccessRequest = object as AccessRequest;\r\n            this.id = acReq.id;\r\n            //this.resourceId = acReq.resourceId;\r\n            this.level = acReq.level;\r\n            this.candidate = acReq.candidate;\r\n        }\r\n\r\n        this.resourceId = undefined;\r\n    }\r\n\r\n    public static clone(request: IAccessRequest): AccessRequest {\r\n        return new AccessRequest(request);\r\n    }\r\n\r\n    public setLevel(level: TAccessLevel | TAccessLevel[]): AccessRequest {\r\n        this.level = Array.isArray(level) ? level : [level];\r\n        return this;\r\n    }\r\n    public addLevel(level: TAccessLevel | TAccessLevel[]): AccessRequest {\r\n        this.level = [...this.level, ...(Array.isArray(level) ? level : [level])];\r\n        return this;\r\n    }\r\n    public resource(resourceId: string): AccessRequest {\r\n        this.resourceId = resourceId;\r\n\r\n        return this;\r\n    }\r\n    public setCandidate(candidate: IAccessCandidate): AccessRequest {\r\n        this.candidate = candidate;\r\n\r\n        return this;\r\n    }\r\n}\r\n","import { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { AccessRequest } from './AccessRequest.class';\r\n\r\nexport class AccessCandidate implements IAccessCandidate {\r\n    public role: TAccessRole;\r\n    public id: string;\r\n    //public _candidate: TAccessCandidate;\r\n    constructor(candidate?: IAccessCandidate) {\r\n        //this._candidate = candidate || { role: TAccessRole.Public, id: '' };\r\n\r\n        this.role = candidate ? candidate.role : TAccessRole.Public;\r\n        this.id = candidate ? candidate.id : '';\r\n    }\r\n\r\n    public get request(): AccessRequest {\r\n        return new AccessRequest(this);\r\n    }\r\n\r\n    public get readRequest(): AccessRequest {\r\n        return new AccessRequest(this).setLevel(TAccessLevel.Read);\r\n    }\r\n    public get writeRequest(): AccessRequest {\r\n        return new AccessRequest(this).setLevel(TAccessLevel.Write);\r\n    }\r\n    public get ownerRequest(): AccessRequest {\r\n        return new AccessRequest(this).setLevel(TAccessLevel.Owner);\r\n    }\r\n\r\n    public static clone(candidate: IAccessCandidate): AccessCandidate {\r\n        return new AccessCandidate(candidate);\r\n    }\r\n\r\n    public team(teamId: string): AccessCandidate {\r\n        this.role = TAccessRole.Team;\r\n        this.id = teamId;\r\n\r\n        return this;\r\n    }\r\n    static team(teamId: string): AccessCandidate {\r\n        return new AccessCandidate({ role: TAccessRole.Team, id: teamId });\r\n    }\r\n\r\n    public agent(agentId: string): AccessCandidate {\r\n        this.role = TAccessRole.Agent;\r\n        this.id = agentId;\r\n        return this;\r\n    }\r\n    static agent(agentId: string): AccessCandidate {\r\n        return new AccessCandidate({ role: TAccessRole.Agent, id: agentId });\r\n    }\r\n\r\n    public user(userId: string): AccessCandidate {\r\n        this.role = TAccessRole.User;\r\n        this.id = userId;\r\n        return this;\r\n    }\r\n    static user(userId: string): AccessCandidate {\r\n        return new AccessCandidate({ role: TAccessRole.User, id: userId });\r\n    }\r\n\r\n    public public(): AccessCandidate {\r\n        this.role = TAccessRole.Public;\r\n\r\n        //public is a special case we use the role as the owner id because public access does not have specific candidate IDs\r\n        this.id = TAccessRole.Public;\r\n\r\n        return this;\r\n    }\r\n    static public(): AccessCandidate {\r\n        return new AccessCandidate({ role: TAccessRole.Public, id: '' });\r\n    }\r\n}\r\n","import { xxh3 } from '@node-rs/xxhash';\r\nimport { IACL, IAccessRequest, LevelMap, ReverseLevelMap, ReverseRoleMap, RoleMap, TACLEntry, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\n\r\nconst ACLHashAlgo = {\r\n    none: (source) => source,\r\n    xxh3: (source) => xxh3.xxh64(source.toString()).toString(16),\r\n};\r\n\r\nexport class ACL implements IACL {\r\n    public hashAlgorithm?: string | undefined;\r\n    public entries?: {\r\n        [key in TAccessRole]?: TACLEntry | undefined;\r\n    };\r\n    public migrated?: boolean | undefined;\r\n    //private acl: TACL;\r\n    public get ACL(): IACL {\r\n        return {\r\n            hashAlgorithm: this.hashAlgorithm,\r\n            entries: JSON.parse(JSON.stringify(this.entries)),\r\n            migrated: this.migrated,\r\n        };\r\n    }\r\n    public get serializedACL(): string {\r\n        return this.serializeACL(this);\r\n    }\r\n\r\n    constructor(acl?: IACL | string) {\r\n        if (typeof acl === 'string') {\r\n            this.deserializeACL(acl);\r\n        } else {\r\n            this.hashAlgorithm = acl?.hashAlgorithm;\r\n            this.entries = acl?.entries ? JSON.parse(JSON.stringify(acl?.entries)) : {};\r\n            this.migrated = acl?.migrated;\r\n        }\r\n        if (!this.hashAlgorithm) this.hashAlgorithm = 'xxh3';\r\n        if (!this.entries) this.entries = {};\r\n    }\r\n\r\n    static from(acl?: IACL | string): ACL {\r\n        return new ACL(acl);\r\n    }\r\n\r\n    /**\r\n     * This function checks if the candidate has access to the requested level\r\n     * it only checks the exact access level, not the higher levels\r\n     * Examples :\r\n     * - if the candidate has read access, it will return true only if the requested level is read\r\n     * - if the current ACL has team access but the candidate is an agent, it will not match the team access\r\n     * @param acRequest\r\n     * @returns\r\n     */\r\n    public checkExactAccess(acRequest: IAccessRequest): boolean {\r\n        if (!this?.entries) return false; // cannot determine the access rights, prefer to deny access\r\n\r\n        const role = this?.entries[acRequest.candidate.role];\r\n        if (!role) return false;\r\n        let entryId = acRequest.candidate.id;\r\n\r\n        if (!ACLHashAlgo[this.hashAlgorithm]) {\r\n            throw new Error(`Hash algorithm ${this.hashAlgorithm} not supported`);\r\n        }\r\n\r\n        entryId = ACLHashAlgo[this.hashAlgorithm](entryId);\r\n\r\n        const access = role[entryId];\r\n        if (!access) return false;\r\n\r\n        const levels = Array.isArray(acRequest.level) ? acRequest.level : [acRequest.level];\r\n\r\n        return levels.every((level) => access.includes(level));\r\n        //return access.includes(req.level);\r\n    }\r\n\r\n    public addPublicAccess(level: TAccessLevel | TAccessLevel[]): ACL {\r\n        if (!this?.entries[TAccessRole.Public]) this.entries[TAccessRole.Public] = {};\r\n        if (!ACLHashAlgo[this.hashAlgorithm]) {\r\n            throw new Error(`Hash algorithm ${this.hashAlgorithm} not supported`);\r\n        }\r\n        const ownerId = TAccessRole.Public; //public is a special case we use the role as the owner id because public access does not have specific candidate IDs\r\n        const hashedOwner = ACLHashAlgo[this.hashAlgorithm](ownerId);\r\n\r\n        if (!this?.entries[TAccessRole.Public]![hashedOwner]) this.entries[TAccessRole.Public]![hashedOwner] = [];\r\n        //acl[TAccessRole.Public]![hashedOwner]!.push(level);\r\n        //concatenate the levels\r\n        const curLevel: any = this.entries[TAccessRole.Public]![hashedOwner]!;\r\n        this.entries[TAccessRole.Public]![hashedOwner] = [...curLevel, ...level];\r\n\r\n        return this;\r\n    }\r\n    public removePublicAccess(level: TAccessLevel | TAccessLevel[]): ACL {\r\n        if (!this?.entries[TAccessRole.Public]) return this;\r\n        const ownerId = TAccessRole.Public; //public is a special case we use the role as the owner id because public access does not have specific candidate IDs\r\n        const hashedOwner = ACLHashAlgo[this.hashAlgorithm](ownerId);\r\n\r\n        //remove the levels\r\n        const curLevel = this[TAccessRole.Public]![hashedOwner]!;\r\n        this[TAccessRole.Public]![hashedOwner] = curLevel.filter((l) => !level.includes(l));\r\n\r\n        return this;\r\n    }\r\n    public addAccess(role: TAccessRole, ownerId: string, level: TAccessLevel | TAccessLevel[]): ACL {\r\n        if (role === TAccessRole.Public) {\r\n            throw new Error('Adding public access using addAccess method is not allowed. Use addPublicAccess method instead.');\r\n        }\r\n        const _level = Array.isArray(level) ? level : [level];\r\n        if (!this?.entries[role]) this.entries[role] = {};\r\n        if (!ACLHashAlgo[this.hashAlgorithm]) {\r\n            throw new Error(`Hash algorithm ${this.hashAlgorithm} not supported`);\r\n        }\r\n        const hashedOwner = ACLHashAlgo[this.hashAlgorithm](ownerId);\r\n\r\n        if (!this?.entries[role]![hashedOwner]) this.entries[role]![hashedOwner] = [];\r\n        //acl[role]![ownerId]!.push(level);\r\n        //concatenate the levels\r\n        const curLevel = this.entries[role]![hashedOwner]!;\r\n        this.entries[role]![hashedOwner] = [...curLevel, ..._level];\r\n\r\n        return this;\r\n    }\r\n    public static addAccess(role: TAccessRole, ownerId: string, level: TAccessLevel | TAccessLevel[]): ACL {\r\n        return ACL.from().addAccess(role, ownerId, level);\r\n    }\r\n\r\n    public removeAccess(role: TAccessRole, ownerId: string, level: TAccessLevel | TAccessLevel[]): ACL {\r\n        const _level = Array.isArray(level) ? level : [level];\r\n        if (!this[role]) return this;\r\n        if (!this[role]![ownerId]) return this;\r\n        //acl[role]![ownerId] = acl[role]![ownerId]!.filter((l) => l !== level);\r\n        //remove the levels\r\n        const curLevel = this[role]![ownerId]!;\r\n        this[role]![ownerId] = curLevel.filter((l) => !_level.includes(l));\r\n\r\n        return this;\r\n    }\r\n\r\n    private serializeACL(tacl: IACL): string {\r\n        let compressed = '';\r\n\r\n        if (tacl.hashAlgorithm) {\r\n            compressed += `h:${tacl.hashAlgorithm}|`;\r\n        }\r\n\r\n        if (tacl.entries) {\r\n            for (const [role, entries] of Object.entries(tacl.entries)) {\r\n                const roleShort = RoleMap[role]; // Use the mapping for role\r\n                const entriesArray: any[] = [];\r\n\r\n                for (const [hashedOwnerKey, accessLevels] of Object.entries(entries || {})) {\r\n                    if (accessLevels) {\r\n                        const accessLevelsShort = accessLevels.map((level) => LevelMap[level]).join('');\r\n                        entriesArray.push(`${hashedOwnerKey}/${accessLevelsShort}`);\r\n                    }\r\n                }\r\n\r\n                if (entriesArray.length > 0) {\r\n                    compressed += `${roleShort}:${entriesArray.join(',')}|`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove the trailing '|'\r\n        if (compressed.endsWith('|')) {\r\n            compressed = compressed.slice(0, -1);\r\n        }\r\n\r\n        return compressed;\r\n    }\r\n\r\n    private deserializeACL(compressed: string) {\r\n        const parts = compressed.split('|');\r\n        this.hashAlgorithm = '';\r\n        this.entries = {};\r\n\r\n        for (const part of parts) {\r\n            if (part.startsWith('h:')) {\r\n                this.hashAlgorithm = part.substring(2);\r\n            } else {\r\n                const [roleShort, entries] = part.split(':');\r\n                const role = ReverseRoleMap[roleShort]; // Use the reverse mapping for role\r\n\r\n                if (role) {\r\n                    const entriesObj = {};\r\n                    const entriesArray = entries.split(',');\r\n\r\n                    for (const entry of entriesArray) {\r\n                        const [hashedOwnerKey, accessLevelsShort] = entry.split('/');\r\n                        const accessLevels = accessLevelsShort.split('').map((short) => ReverseLevelMap[short]);\r\n\r\n                        entriesObj[hashedOwnerKey] = accessLevels;\r\n                    }\r\n\r\n                    this.entries[role] = entriesObj;\r\n                }\r\n            }\r\n        }\r\n\r\n        //return tacl;\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { StorageData, StorageMetadata } from '@sre/types/Storage.types';\r\nimport { isBuffer } from '@sre/utils';\r\nimport * as FileType from 'file-type';\r\nimport mime from 'mime';\r\nimport { Readable } from 'stream';\r\nimport { StorageConnector } from './StorageConnector';\r\n\r\nexport type TSmythFSURI = {\r\n    hash: string;\r\n    team: string;\r\n    path: string;\r\n};\r\n\r\nexport class SmythFS {\r\n    private storage: StorageConnector;\r\n\r\n    //singleton\r\n    private static instance: SmythFS;\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new SmythFS();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private constructor() {\r\n        //SmythFS cannot be used without SRE\r\n        if (!ConnectorService.ready) {\r\n            throw new Error('SRE not available');\r\n        }\r\n        this.storage = ConnectorService.getStorageConnector();\r\n    }\r\n\r\n    private URIParser(uri: string) {\r\n        const parts = uri.split('://');\r\n        if (parts.length !== 2) return undefined;\r\n        if (parts[0].toLowerCase() !== 'smythfs') return undefined;\r\n        const parsed = new URL(`http://${parts[1]}`);\r\n        const tld = parsed.hostname.split('.').pop();\r\n        if (tld !== 'team') throw new Error('Invalid Resource URI');\r\n        const team = parsed.hostname.replace(`.${tld}`, '');\r\n        //TODO: check if team exists\r\n\r\n        return {\r\n            hash: parsed.hash,\r\n            team,\r\n            path: parsed.pathname,\r\n        };\r\n    }\r\n    public getStoragePath(uri: string) {\r\n        const smythURI = this.URIParser(uri);\r\n        if (!smythURI) throw new Error('Invalid Resource URI');\r\n        return `teams/${smythURI.team}${smythURI.path}`;\r\n    }\r\n    public async read(uri: string, candidate: IAccessCandidate): Promise<Buffer> {\r\n        const smythURI = this.URIParser(uri);\r\n        if (!smythURI) throw new Error('Invalid Resource URI');\r\n\r\n        const resourceId = `teams/${smythURI.team}${smythURI.path}`;\r\n\r\n        const _candidate = candidate instanceof AccessCandidate ? candidate : new AccessCandidate(candidate);\r\n\r\n        const data = await this.storage.user(_candidate).read(resourceId);\r\n\r\n        return this.toBuffer(data);\r\n    }\r\n\r\n    private async toBuffer(data: StorageData): Promise<Buffer> {\r\n        if (Buffer.isBuffer(data)) {\r\n            return data;\r\n        } else if (typeof data === 'string') {\r\n            return Buffer.from(data, 'utf-8');\r\n        } else if (data instanceof Uint8Array) {\r\n            return Buffer.from(data);\r\n        } else if (data instanceof Readable) {\r\n            return new Promise<Buffer>((resolve, reject) => {\r\n                const chunks: Buffer[] = [];\r\n                data.on('data', (chunk) => {\r\n                    chunks.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));\r\n                });\r\n                data.on('end', () => {\r\n                    resolve(Buffer.concat(chunks));\r\n                });\r\n                data.on('error', (err) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        } else {\r\n            throw new Error('Unsupported data type');\r\n        }\r\n    }\r\n\r\n    public async write(uri: string, data: any, candidate: IAccessCandidate, metadata?: StorageMetadata) {\r\n        const smythURI = this.URIParser(uri);\r\n        if (!smythURI) throw new Error('Invalid Resource URI');\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const isMember = await accountConnector.isTeamMember(smythURI.team, candidate);\r\n        if (!isMember) throw new Error('Access Denied');\r\n\r\n        const resourceId = `teams/${smythURI.team}${smythURI.path}`;\r\n        //when we write a file, it does not exist we need to explicitly provide a resource team in order to have access rights set properly\r\n\r\n        const _candidate = candidate instanceof AccessCandidate ? candidate : new AccessCandidate(candidate);\r\n\r\n        const acl = new ACL()\r\n            //.addAccess(candidate.role, candidate.id, TAccessLevel.Owner) // creator is owner\r\n            .addAccess(TAccessRole.Team, smythURI.team, TAccessLevel.Read).ACL; // team has read access\r\n\r\n        if (!metadata) metadata = {};\r\n        if (!metadata?.ContentType) {\r\n            metadata.ContentType = await this.getMimeType(data);\r\n            if (!metadata.ContentType) {\r\n                const ext: any = uri.split('.').pop();\r\n                if (ext) {\r\n                    metadata.ContentType = mime.getType(ext) || 'application/octet-stream';\r\n                }\r\n            }\r\n        }\r\n        await this.storage.user(_candidate).write(resourceId, data, acl, metadata);\r\n    }\r\n    private async getMimeType(data: any) {\r\n        let size = 0;\r\n        if (data instanceof Blob) return data.type;\r\n        if (isBuffer(data)) {\r\n            try {\r\n                const fileType = await FileType.fileTypeFromBuffer(data);\r\n                return fileType.mime;\r\n            } catch {\r\n                return '';\r\n            }\r\n        }\r\n\r\n        if (typeof data === 'string') {\r\n            return 'text/plain';\r\n        }\r\n    }\r\n\r\n    public async delete(uri: string, candidate: IAccessCandidate) {\r\n        const smythURI = this.URIParser(uri);\r\n        if (!smythURI) throw new Error('Invalid Resource URI');\r\n\r\n        const resourceId = `teams/${smythURI.team}${smythURI.path}`;\r\n\r\n        const _candidate = candidate instanceof AccessCandidate ? candidate : new AccessCandidate(candidate);\r\n\r\n        await this.storage.user(_candidate).delete(resourceId);\r\n    }\r\n\r\n    //TODO: should we require access token here ?\r\n    public async exists(uri: string, candidate: IAccessCandidate) {\r\n        const smythURI = this.URIParser(uri);\r\n        if (!smythURI) throw new Error('Invalid Resource URI');\r\n\r\n        const resourceId = `teams/${smythURI.team}${smythURI.path}`;\r\n\r\n        //in order to get a consistent access check in case of inexisting resource, we need to explicitly set a default resource team\r\n        const _candidate = candidate instanceof AccessCandidate ? candidate : new AccessCandidate(candidate);\r\n\r\n        return await this.storage.user(_candidate).exists(resourceId);\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { SmythFS } from '@sre/IO/Storage.service/SmythFS.class';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\nimport axios from 'axios';\r\nimport * as FileType from 'file-type';\r\nimport mime from 'mime';\r\nimport { getSizeFromBinary, isUrl, uid } from '../utils';\r\nexport class BinaryInput {\r\n    private size: number;\r\n    private url: string;\r\n    private _ready;\r\n    private _readyPromise;\r\n    private _source: Buffer;\r\n    private _uploading: boolean = false;\r\n\r\n    constructor(\r\n        data: BinaryInput | Buffer | ArrayBuffer | Blob | string | Record<string, any>,\r\n        private _name?: string,\r\n        public mimetype?: string,\r\n        private candidate?: IAccessCandidate\r\n    ) {\r\n        if (!_name) _name = uid();\r\n        this._name = _name;\r\n        //this._source = data;\r\n\r\n        this.load(data, _name, mimetype, candidate);\r\n    }\r\n\r\n    public async ready() {\r\n        if (this._ready) return true;\r\n\r\n        if (!this._readyPromise) {\r\n            this._readyPromise = new Promise((resolve) => {\r\n                const maxWait = 10000;\r\n                const interval = setInterval(() => {\r\n                    if (this._ready) {\r\n                        clearInterval(interval);\r\n                        resolve(true);\r\n                    }\r\n                    if (maxWait <= 0) {\r\n                        clearInterval(interval);\r\n                        resolve(false);\r\n                    }\r\n                }, 100);\r\n            });\r\n        }\r\n\r\n        return this._readyPromise;\r\n    }\r\n\r\n    private async load(data, name: string, mimetype?: string, candidate?: IAccessCandidate) {\r\n        //assume the mimetype from the provided name\r\n        const ext: any = name.split('.').pop();\r\n        this.mimetype = mimetype || mime.getType(ext) || 'application/octet-stream';\r\n        this.url = ``;\r\n\r\n        if (typeof data === 'object' && data.url && data.mimetype && data.size) {\r\n            this.mimetype = data.mimetype;\r\n            this.size = data.size;\r\n            this.url = data.url;\r\n            this._ready = true;\r\n            if (candidate) {\r\n                this._source = await SmythFS.Instance.read(this.url, candidate);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (isUrl(data)) {\r\n            const info: any = await this.getUrlInfo(data);\r\n            this.mimetype = info.contentType;\r\n            this.size = info.contentLength;\r\n            //this.url = data;\r\n\r\n            try {\r\n                const response = await axios({\r\n                    method: 'get',\r\n                    url: data,\r\n                    responseType: 'arraybuffer', // Important for handling binary data\r\n                });\r\n\r\n                this._source = Buffer.from(response.data, 'binary');\r\n                this.size = response.data.byteLength;\r\n\r\n                const ext = mime.getExtension(this.mimetype);\r\n                if (!this._name.endsWith(`.${ext}`)) this._name += `.${ext}`;\r\n            } catch (error) {\r\n                console.error('Error loading binary data from url:', data.url);\r\n            }\r\n\r\n            //this._source = data.url;\r\n\r\n            this._ready = true;\r\n            return;\r\n        }\r\n\r\n        // console.log('>>>>>>>>>>>>>>>>>>> is base64 file ?', isDataUrl(data));\r\n        const base64FileInfo = await this.getBase64FileInfo(data);\r\n        if (base64FileInfo) {\r\n            this.mimetype = base64FileInfo.mimetype;\r\n            this.size = base64FileInfo.size;\r\n            this._source = base64FileInfo.data;\r\n            const ext = mime.getExtension(this.mimetype);\r\n            if (!this._name.endsWith(`.${ext}`)) this._name += `.${ext}`;\r\n\r\n            this._ready = true;\r\n            return;\r\n        }\r\n\r\n        if (typeof data === 'string') {\r\n            this._source = Buffer.from(data);\r\n            this.size = data.length;\r\n            this.mimetype = 'text/plain';\r\n            if (!this._name.endsWith(`.txt`)) this._name += `.txt`;\r\n\r\n            this._ready = true;\r\n            return;\r\n        }\r\n\r\n        //this.size = getSizeFromBinary(data);\r\n        // //try to enforce the mimetype from the provided data\r\n        // if (Buffer.isBuffer(data)) {\r\n        //     const fileType = await FileType.fileTypeFromBuffer(data);\r\n        //     this.mimetype = fileType.mime;\r\n        //     const ext = mime.getExtension(this.mimetype);\r\n        //     if (!this._name.endsWith(`.${ext}`)) this._name += `.${ext}`;\r\n\r\n        //     this._ready = true;\r\n        //     return;\r\n        // }\r\n        //try to enforce the mimetype from the provided data\r\n        if (Buffer.isBuffer(data)) {\r\n            this._source = data;\r\n            this.size = getSizeFromBinary(data);\r\n            const fileType = await FileType.fileTypeFromBuffer(data);\r\n            this.mimetype = fileType.mime;\r\n            const ext = mime.getExtension(this.mimetype);\r\n            if (!this._name.endsWith(`.${ext}`)) this._name += `.${ext}`;\r\n        }\r\n\r\n        this._ready = true;\r\n    }\r\n\r\n    private async getUrlInfo(url) {\r\n        try {\r\n            const response = await axios.head(url);\r\n            const contentType = response.headers['content-type'];\r\n            const contentLength = response.headers['content-length'];\r\n            return { contentType, contentLength };\r\n        } catch (error) {\r\n            return { contentType: '', contentLength: 0 };\r\n        }\r\n    }\r\n    private async getBase64FileInfo(data: string) {\r\n        //first check if it's a base64 url format\r\n        const validUrlFormatRegex = /data:[^;]+;base64,[A-Za-z0-9+\\/]*(={0,2})?$/gm;\r\n        if (!validUrlFormatRegex.test(data)) {\r\n            return null;\r\n        }\r\n\r\n        const base64Data = data.split(',')[1];\r\n        const buffer = Buffer.from(base64Data, 'base64');\r\n        const size = buffer.byteLength;\r\n        const filetype = await FileType.fileTypeFromBuffer(buffer);\r\n\r\n        return { size, data: buffer, mimetype: filetype?.mime || '' };\r\n    }\r\n    public static from(data, name?: string, mimetype?: string, candidate?: IAccessCandidate) {\r\n        if (data instanceof BinaryInput) return data;\r\n        return new BinaryInput(data, name, mimetype, candidate);\r\n    }\r\n\r\n    public async upload(candidate: IAccessCandidate) {\r\n        await this.ready();\r\n        if (this._uploading) return;\r\n\r\n        try {\r\n            this._uploading = true;\r\n            if (!this.url) {\r\n                const accountConnector = ConnectorService.getAccountConnector();\r\n                const teamId = await accountConnector.getCandidateTeam(candidate);\r\n\r\n                this.url = `smythfs://${teamId}.team/${candidate.id}/_temp/${this._name}`;\r\n                //TODO : set a TTL for temporary files\r\n                //we probably need a write with TTL method in SmythFS\r\n                await SmythFS.Instance.write(this.url, this._source, candidate);\r\n                this._uploading = false;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error uploading binary data:', error);\r\n            this._uploading = false;\r\n        }\r\n    }\r\n\r\n    public async getJsonData(candidate: IAccessCandidate) {\r\n        await this.upload(candidate);\r\n        return {\r\n            mimetype: this.mimetype,\r\n            size: this.size,\r\n            url: this.url,\r\n            name: this._name,\r\n        };\r\n    }\r\n\r\n    public async readData(candidate: IAccessCandidate) {\r\n        await this.ready();\r\n        if (!this.url) {\r\n            throw new Error('Binary data not ready');\r\n        }\r\n        const data = await SmythFS.Instance.read(this.url, candidate);\r\n        return data;\r\n    }\r\n\r\n    public async getBuffer() {\r\n        await this.ready();\r\n\r\n        return this._source;\r\n    }\r\n}\r\n","import { jsonrepair } from 'jsonrepair';\r\nimport { isDigits, isSafeNumber, isValidString } from '@sre/utils';\r\n\r\nexport class JSONContentHelper {\r\n    private _current: string;\r\n\r\n    public get result() {\r\n        return this._current;\r\n    }\r\n    private constructor(private dataString: string) {\r\n        this._current = dataString;\r\n    }\r\n\r\n    public static create(dataString: string) {\r\n        return new JSONContentHelper(dataString);\r\n    }\r\n\r\n    /**\r\n     * This a permissive json parsing function : It tries to extract and parse a JSON object from a string. If it fails, it returns the original string.\r\n     * if the string is not a JSON representation, but contains a JSON object, it will extract and parse it.\r\n     * @returns\r\n     */\r\n    public tryParse() {\r\n        const strInput = this._current;\r\n        if (!isValidString(strInput)) return strInput;\r\n        let str = (this.extractJsonFromString(strInput) || strInput).trim();\r\n\r\n        if ((isDigits(str) && !isSafeNumber(str)) || (!str.startsWith('{') && !str.startsWith('['))) return str;\r\n\r\n        try {\r\n            return JSON.parse(str);\r\n        } catch (e) {\r\n            try {\r\n                return JSON.parse(jsonrepair(str));\r\n            } catch (e: any) {\r\n                //console.warn('Error on parseJson: ', e.toString());\r\n                //console.warn('   Tried to parse: ', str);\r\n                return strInput;\r\n            }\r\n        }\r\n    }\r\n\r\n    private extractJsonFromString(str) {\r\n        try {\r\n            const regex = /(\\{.*\\})/s;\r\n\r\n            const match = str.match(regex);\r\n\r\n            return match?.[1];\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport function JSONContent(dataString: string) {\r\n    return JSONContentHelper.create(dataString);\r\n}\r\n","import { isRawBase64, isDataUrl } from '@sre/utils/base64.utils';\r\nimport dayjs from 'dayjs';\r\nimport { isBinaryData, isBuffer, isPlainObject, isSmythFileObject, isUrl, uid } from '../utils';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TAccessRole } from '@sre/types/ACL.types';\r\nimport { BinaryInput } from './BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { JSONContent } from './JsonContent.helper';\r\n\r\nexport const inputErrMsg = (type, name) => `Invalid ${type} value for Input: ${name}`;\r\n\r\nconst InferenceStrategies = {\r\n    any: inferAnyType,\r\n    string: inferStringType,\r\n    number: inferNumberType,\r\n    integer: inferIntegerType,\r\n    boolean: inferBooleanType,\r\n    array: inferArrayType,\r\n    object: inferObjectType,\r\n    binary: inferBinaryType,\r\n    date: inferDateType,\r\n};\r\n\r\n/**\r\n * Performs type inference on the inputs based on the input config\r\n * @param inputs - The inputs to perform type inference on\r\n * @param inputConfig - The input config to perform type inference on\r\n * @param agent - The agent to perform type inference on\r\n * @returns The inputs with the inferred types\r\n */\r\nexport async function performTypeInference(\r\n    inputs: Record<string, any>,\r\n    inputConfig: Record<string, any>[],\r\n    agent: Agent\r\n): Promise<Record<string, any>> {\r\n    try {\r\n        if (!inputConfig || Object.keys(inputConfig)?.length === 0) return inputs;\r\n\r\n        // Clone the input object to avoid modifying the original object\r\n        const _inputs = { ...inputs };\r\n        const _inputConfig = {};\r\n\r\n        for (const input of inputConfig) {\r\n            if (input?.name) {\r\n                _inputConfig[input.name] = { ...input };\r\n            }\r\n        }\r\n\r\n        for (const [key, config] of Object.entries(_inputConfig)) {\r\n            let value = inputs?.[key] || '';\r\n\r\n            if (!value) continue;\r\n\r\n            const type = (config as any)?.type?.toLowerCase() || 'any';\r\n\r\n            if (!InferenceStrategies[type]) {\r\n                throw new Error(`Invalid type: ${type} for Input: ${key}`);\r\n            }\r\n\r\n            _inputs[key] = await InferenceStrategies[type](value, key, agent);\r\n        }\r\n\r\n        return _inputs;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function inferStringType(value: any, key?: string, agent?: Agent) {\r\n    if (value === null || value === undefined || value === 'null' || value === 'undefined') {\r\n        return '';\r\n    } else if (isRawBase64(value) || isDataUrl(value)) {\r\n        // If the value is a base64 string then return the value as it is\r\n        return value;\r\n    } /*else if (isSmythFileObject(value) || isBuffer(value) || isBinaryData(value)) {\r\n        const file = new SmythFile(value);\r\n        const base64Obj = await file.toBase64Object();\r\n        return `data:${base64Obj.mimetype};base64,${base64Obj.base64}`;\r\n    }*/ else if (typeof value === 'object' || Array.isArray(value)) {\r\n        return JSON.stringify(value);\r\n    } else {\r\n        return String(value);\r\n    }\r\n}\r\n\r\nasync function inferNumberType(value: any, key?: string, agent?: Agent) {\r\n    const floatVal = parseFloat(value);\r\n\r\n    if (isNaN(floatVal)) {\r\n        throw new Error('Invalid Number value');\r\n    }\r\n\r\n    return floatVal;\r\n}\r\n\r\nasync function inferIntegerType(value: any, key?: string, agent?: Agent) {\r\n    const intVal = parseInt(value);\r\n\r\n    if (isNaN(intVal)) throw new Error('Invalid Integer value');\r\n\r\n    return intVal;\r\n}\r\n\r\nasync function inferBooleanType(value: any, key?: string, agent?: Agent) {\r\n    if (typeof value === 'boolean') {\r\n        return value;\r\n    } else if (typeof value === 'string' || typeof value === 'number') {\r\n        const lowerCaseValue = String(value).toLowerCase();\r\n        if (['true', '1'].includes(lowerCaseValue)) {\r\n            return true;\r\n        } else if (['false', '0'].includes(lowerCaseValue)) {\r\n            return false;\r\n        } else {\r\n            throw new Error('Invalid Boolean value');\r\n        }\r\n    } else {\r\n        throw new Error('Invalid Boolean value');\r\n    }\r\n}\r\n\r\nasync function inferArrayType(value: any, key?: string, agent?: Agent) {\r\n    try {\r\n        if (Array.isArray(value)) return value;\r\n\r\n        if (typeof value !== 'string') throw new Error('Invalid Array value');\r\n\r\n        try {\r\n            // We need to consider array with comma separated values like \"item1, item2, item3\", as it's provided by Swagger UI\r\n            return value.trim().startsWith('[') ? JSONContent(value).tryParse() : value.split(',');\r\n        } catch {\r\n            throw new Error('Invalid Array value');\r\n        }\r\n    } catch (error) {\r\n        throw new Error('Invalid Array value');\r\n    }\r\n}\r\n\r\nasync function inferObjectType(value: any, key?: string, agent?: Agent) {\r\n    try {\r\n        // use parseJson instead of JSON.parse because the data may come from LLM responses\r\n        const obj = isPlainObject(value) ? value : JSONContent(value).tryParse();\r\n        if (!isPlainObject(obj)) throw new Error('Invalid Object value');\r\n        return obj;\r\n    } catch (error) {\r\n        throw new Error('Invalid Object value');\r\n    }\r\n}\r\n\r\nasync function inferBinaryType(value: any, key?: string, agent?: Agent) {\r\n    const binaryInput = BinaryInput.from(value, uid() + '-' + key);\r\n    await binaryInput.ready();\r\n    //const data = value;\r\n    //const file = data instanceof SmythFile ? data : new SmythFile(data);\r\n    //return file;\r\n    //return await binaryInput.getJsonData(AccessCandidate.agent(agent.id));\r\n    return binaryInput;\r\n}\r\n\r\nasync function inferDateType(value: any, key?: string, agent?: Agent) {\r\n    const errMsg = `Invalid Date value\\nThe date string is expected to be in a format commonly used in English-speaking countries.`;\r\n\r\n    // Make sure we only accept string or number to parse as date\r\n    if (typeof value !== 'string' && typeof value !== 'number') throw new Error(errMsg);\r\n\r\n    let date;\r\n    if (typeof value === 'string' && isNaN(Number(value))) {\r\n        date = dayjs(value).locale('en'); // parse as date string\r\n    } else {\r\n        // parse as Unix timestamp\r\n        const timestamp = typeof value === 'number' ? value : Number(value);\r\n        date = dayjs.unix(timestamp / 1000);\r\n    }\r\n\r\n    if (!date.isValid()) throw new Error(errMsg);\r\n\r\n    return date.toISOString();\r\n}\r\n\r\nasync function inferAnyType(value: any) {\r\n    return value;\r\n}\r\n","import Joi from 'joi';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { performTypeInference } from '@sre/helpers/TypeChecker.helper';\r\n\r\nexport default class Component {\r\n    public hasReadOutput = false;\r\n    public hasPostProcess = true;\r\n    public alwaysActive = false; //for components like readable memories\r\n    public exclusive = false; //for components like writable memories : when exclusive components are active, they are processed in a run cycle bofore other components\r\n    protected configSchema;\r\n    constructor() {}\r\n    init() {}\r\n\r\n    createComponentLogger(agent: Agent, name: string) {\r\n        const logger = Logger(name || this.constructor.name, agent?.agentRuntime?.debug);\r\n\r\n        return logger;\r\n    }\r\n\r\n    async validateConfig(config) {\r\n        if (!this.configSchema) return {};\r\n        if (config.data._templateVars) {\r\n            //Accept dynamically added template data\r\n            for (let tplVar in config.data._templateVars) {\r\n                this.configSchema = this.configSchema.append({ [tplVar]: Joi.any() });\r\n            }\r\n        }\r\n        const valid = await this.configSchema.validate(config.data);\r\n        if (valid.error) {\r\n            return {\r\n                id: config.id,\r\n                name: config.name,\r\n                _error: `Schema Validation error: ${valid?.error?.message} on component ${config.displayName}:${config.title}`,\r\n                _debug: `Schema Validation error: ${valid?.error?.message} on component ${config.displayName}:${config.title}`,\r\n            };\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    async process(input, config, agent: Agent): Promise<any> {\r\n        // console.log(\r\n        //     `Called component ${this.constructor.name}\\n ID=${config.id} \\ninput ${JSON.stringify(input, null, 2)} \\nand config ${JSON.stringify(\r\n        //         config,\r\n        //         null,\r\n        //         2,\r\n        //     )}`,\r\n        // );\r\n        const _input = await performTypeInference(input, config?.inputs, agent);\r\n\r\n        // modify the input object for component's process method\r\n        for (const [key, value] of Object.entries(_input)) {\r\n            input[key] = value;\r\n        }\r\n    }\r\n    async postProcess(output, config, agent: Agent): Promise<any> {\r\n        if (output?.result) {\r\n            delete output?.result?._debug;\r\n            if (!output?.result?._error) delete output?.result?._error;\r\n        }\r\n        return output;\r\n    }\r\n    async enable(config, agent: Agent): Promise<any> {}\r\n    async disable(config, agent: Agent): Promise<any> {}\r\n    readOutput(id, config, agent: Agent): any {\r\n        return null;\r\n    }\r\n    hasOutput(id, config, agent: Agent): any {\r\n        return false;\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { AccessCandidate } from '../AccessControl/AccessCandidate.class';\r\nimport axios from 'axios';\r\nimport config from '@sre/config';\r\nimport qs from 'qs';\r\n\r\nexport class VaultHelper {\r\n    static async getTeamKey(key: string, teamId: string): Promise<string> {\r\n        const vaultConnector = ConnectorService.getVaultConnector();\r\n        return await vaultConnector.user(AccessCandidate.team(teamId)).get(key);\r\n    }\r\n\r\n    static async getUserKey(key: string, userId: string): Promise<string> {\r\n        const vaultConnector = ConnectorService.getVaultConnector();\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n\r\n        const teamId = await accountConnector.getCandidateTeam(AccessCandidate.user(userId));\r\n\r\n        return await vaultConnector.user(AccessCandidate.team(teamId)).get(key);\r\n    }\r\n\r\n    static async getAgentKey(key: string, agentId: string): Promise<string> {\r\n        const vaultConnector = ConnectorService.getVaultConnector();\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n\r\n        const teamId = await accountConnector.getCandidateTeam(AccessCandidate.agent(agentId));\r\n\r\n        return await vaultConnector.user(AccessCandidate.team(teamId)).get(key);\r\n    }\r\n\r\n}\r\n","import { VaultHelper } from '@sre/Security/Vault.service/Vault.helper';\r\n\r\nexport type TemplateStringMatch = RegExp;\r\n\r\nexport const Match = {\r\n    default: /{{(.*?)}}/g,\r\n    //matches all placeholders\r\n    doubleCurly: /{{(.*?)}}/g,\r\n    singleCurly: /{(.*?)}/g,\r\n\r\n    //matches component template variables\r\n    //example of matching strings\r\n    // {{VAULTINPUT:Input label:[APIKEY]}}\r\n    // {{VARINPUT:Variable label:{ \"key\":\"value\" }}}\r\n    templateVariables: /{{([A-Z]+):([\\w\\s]+):[\\[{](.*?)[\\]}]}}/gm,\r\n\r\n    //matches only the placeholders that have a specific prefix\r\n    prefix(prefix: string) {\r\n        return new RegExp(`{{${prefix}(.*?)}}`, 'g');\r\n    },\r\n\r\n    //matches only the placeholders that have a specific suffix\r\n    suffix(suffix: string) {\r\n        return new RegExp(`{{(.*?)${suffix}}}`, 'g');\r\n    },\r\n    //matches only the placeholders that have a specific prefix and suffix\r\n    prefSuf(prefix: string, suffix: string) {\r\n        return new RegExp(`{{${prefix}(.*?)${suffix}}}`, 'g');\r\n    },\r\n\r\n    //matches a function annotation with a given name, just like prefix but with wrapping parenthesis\r\n    fn(name: string) {\r\n        return new RegExp(`{{${name}\\\\((.*?)\\\\)}}`, 'g');\r\n    },\r\n};\r\n\r\nexport const TPLProcessor = {\r\n    vaultTeam(teamId: string): (token) => Promise<string> {\r\n        //the token here represents the vault key name\r\n        return async (token) => await VaultHelper.getTeamKey(token, teamId);\r\n    },\r\n    componentTemplateVar(templateSettings: Record<string, any>): (token, matches) => Promise<string> {\r\n        return async (token, matches) => {\r\n            const label = matches[2]; //template variables are identified by their label inside the component config\r\n            if (!label) return token;\r\n\r\n            const entry: any = Object.values(templateSettings).find((o: any) => o.label == label);\r\n            if (!entry) return token;\r\n            return `{{${entry.id}}}`;\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Provides a chainable to manipulate template strings\r\n *\r\n * Template strings are strings that can contain placeholders, which are expressions that get evaluated to produce a resulting string.\r\n * The placeholders are defined by double curly braces `{{` and `}}`.\r\n */\r\nexport class TemplateStringHelper {\r\n    private _current: string;\r\n\r\n    //this queue is used to wait for asyncronous results when async processors are used\r\n    //if all processors are synchronous, this queue will be empty and .result getter can be used\r\n    //if any processor is async, the .result getter will throw an error and you should use .asyncResult instead\r\n    private _promiseQueue: Promise<any>[] = [];\r\n\r\n    public get result(): string {\r\n        if (this._promiseQueue.length <= 0) return this._current;\r\n        throw new Error('This template object has async results, you should use .asyncResult with await instead of .result');\r\n    }\r\n\r\n    public get asyncResult(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            await Promise.all(this._promiseQueue);\r\n            resolve(this._current);\r\n        });\r\n    }\r\n\r\n    private constructor(private templateString: string) {\r\n        this._current = templateString;\r\n    }\r\n\r\n    public static create(templateString: string) {\r\n        return new TemplateStringHelper(templateString);\r\n    }\r\n\r\n    /**\r\n     * Parses a template string by replacing the placeholders with the values from the provided data object\r\n     * unmatched placeholders will be left as is\r\n     */\r\n    public parse(data: Record<string, string>, regex: TemplateStringMatch = Match.default) {\r\n        if (typeof this._current !== 'string') return this;\r\n        this._current = this._current.replace(regex, (match, token) => {\r\n            return data[token] || match;\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This is a shortcut function that parses vault key values and replace them with corresponding values from team vault\r\n     * @param teamId\r\n     * @returns\r\n     */\r\n    public parseTeamKeysAsync(teamId: string) {\r\n        return this.process(TPLProcessor.vaultTeam(teamId), Match.fn('KEY'));\r\n    }\r\n\r\n    /**\r\n     * This is a shortcut function that parses component template variables and replace them with their corresponding values\r\n     * @param templateSettings the component template settings to be used for parsing\r\n     * @returns\r\n     */\r\n    public parseComponentTemplateVarsAsync(templateSettings: Record<string, any>) {\r\n        return this.process(TPLProcessor.componentTemplateVar(templateSettings), Match.templateVariables);\r\n    }\r\n\r\n    /**\r\n     * Processes a template string by replacing the placeholders with the result of the provided processor function\r\n     * The processor function receives the token as an argument and should return the value to replace the token with\r\n     * If the processor function returns undefined, the token will be left as is\r\n     */\r\n    public process(processor: (token, matches?) => Promise<string> | string, regex: TemplateStringMatch = Match.default) {\r\n        if (typeof this._current !== 'string') return this;\r\n        //first build a json object with all matching tokens\r\n        let tokens = {};\r\n        let match;\r\n\r\n        const prosessorPromises = [];\r\n        while ((match = regex.exec(this._current)) !== null) {\r\n            const token = match[1];\r\n            tokens[token] = match[0];\r\n\r\n            const _processor = processor(token, match);\r\n\r\n            //if an async processor is used, the TemplateStringHelper switches to async mode\r\n            if (_processor instanceof Promise) {\r\n                _processor.then((result) => {\r\n                    if (result === undefined) {\r\n                        return match[0];\r\n                    }\r\n                    tokens[token] = result;\r\n                });\r\n                prosessorPromises.push(_processor);\r\n            } else {\r\n                tokens[token] = _processor;\r\n            }\r\n        }\r\n\r\n        if (prosessorPromises.length > 0) {\r\n            const promise = new Promise(async (resolve, reject) => {\r\n                await Promise.all(prosessorPromises);\r\n                this.parse(tokens, regex);\r\n                resolve(true);\r\n            });\r\n            this._promiseQueue.push(Promise.all(prosessorPromises));\r\n        } else {\r\n            this.parse(tokens, regex);\r\n        }\r\n\r\n        // this._current = await asyncReplace(this._current, regex, async (match, token) => {\r\n        //     let result = await processor(token);\r\n        //     if (result === undefined) {\r\n        //         return match;\r\n        //     }\r\n        //     return result;\r\n        // });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all placeholders from the template string, leaving only the plain text\r\n     * This is useful when you want to clean up a template string that has placeholders that were not parsed\r\n     */\r\n    public clean(regex: TemplateStringMatch = Match.default) {\r\n        if (typeof this._current !== 'string') return this;\r\n        this._current = this._current.replace(regex, '');\r\n        return this;\r\n    }\r\n\r\n    // public toString() {\r\n    //     if (this._promiseQueue.length <= 0) return this._current;\r\n    //     return new Promise(async (resolve, reject) => {\r\n    //         await Promise.all(this._promiseQueue);\r\n    //         resolve(this._current);\r\n    //     });\r\n    // }\r\n}\r\n\r\n/**\r\n * a helper function that takes a string and escape it\r\n * This is useful when you have a stringified json and want to replace one of its values while making sure it won't break the json structure (e.g new lines, double quotes ...etc)\r\n */\r\nexport function escapeString(str?: string) {\r\n    if (!str) return str;\r\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t');\r\n}\r\n\r\nexport function TemplateString(templateString: string) {\r\n    return TemplateStringHelper.create(templateString);\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nimport { jsonrepair } from 'jsonrepair';\r\nimport AgentRequest from '@sre/AgentManager/AgentRequest.class';\r\nimport { performTypeInference } from '@sre/helpers/TypeChecker.helper';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { uid } from '../utils';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\n// Utility function to check for empty values\r\nfunction isEmpty(value: any): boolean {\r\n    return (\r\n        value === undefined ||\r\n        value === null ||\r\n        (typeof value === 'string' && value.trim() === '') ||\r\n        (Array.isArray(value) && value.length === 0) ||\r\n        (typeof value === 'object' && value !== null && Object.keys(value).length === 0)\r\n    );\r\n}\r\nfunction isTemplateVar(str: string = ''): boolean {\r\n    if (!str || typeof str !== 'string') return false;\r\n    return (str?.match(/{{(.*?)}}/g) ?? []).length > 0;\r\n}\r\nfunction isKeyTemplateVar(str: string = ''): boolean {\r\n    if (!str || typeof str !== 'string') return false;\r\n    return (str?.match(/{{KEY\\((.*?)\\)}}/g) ?? []).length > 0;\r\n}\r\n\r\nfunction parseKey(str: string = '', teamId: string): string {\r\n    return str.replace(/{{KEY\\((.*?)\\)}}/g, (match, key) => {\r\n        return key === 'teamid' ? teamId : '';\r\n    });\r\n}\r\n\r\nexport default class APIEndpoint extends Component {\r\n    protected configSchema = Joi.object({\r\n        endpoint: Joi.string()\r\n            .pattern(/^[a-zA-Z0-9]+([-_][a-zA-Z0-9]+)*$/)\r\n            .max(50)\r\n            .required(),\r\n        method: Joi.string().valid('POST', 'GET').allow(''), //we're accepting empty value because we consider it POST by default.\r\n        description: Joi.string().max(5000).allow(''),\r\n        summary: Joi.string().max(1000).allow(''),\r\n        doc: Joi.string().max(1000).allow(''),\r\n        ai_exposed: Joi.boolean().default(true),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const req: AgentRequest = agent.agentRequest;\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        const headers = req ? req.headers : {};\r\n        let body = req ? req.body : input; //handle debugger injection\r\n        const params = req ? req.params : {};\r\n        let query = req ? req.query : {};\r\n        const _authInfo = req ? req._agent_authinfo : undefined;\r\n\r\n        // parse template variables\r\n        for (const [key, value] of Object.entries(body)) {\r\n            if (isKeyTemplateVar(value as string)) {\r\n                body[key] = await parseKey(value as string, agent?.teamId);\r\n            } else if (isTemplateVar(value as string)) {\r\n                //body[key] = parseTemplate(value as string, input, { escapeString: false });\r\n                body[key] = TemplateString(value as string).parse(input).result;\r\n            }\r\n        }\r\n\r\n        for (const [key, value] of Object.entries(query)) {\r\n            if (isKeyTemplateVar(value as string)) {\r\n                query[key] = await parseKey(value as string, agent?.teamId);\r\n            } else if (isTemplateVar(value as string)) {\r\n                //query[key] = parseTemplate(value as string, input, { escapeString: false });\r\n                query[key] = TemplateString(value as string).parse(input).result;\r\n            }\r\n        }\r\n\r\n        // set default value and agent variables\r\n        const inputsWithDefaultValue = config.inputs.filter(\r\n            (input) => input.defaultVal !== undefined && input.defaultVal !== '' && input.defaultVal !== null\r\n        );\r\n\r\n        const bodyInputNames: string[] = [];\r\n        const queryInputNames: string[] = [];\r\n\r\n        for (const output of config.outputs) {\r\n            const outputName = output?.expression || output?.name;\r\n            const inputName = outputName?.split('.')[1];\r\n\r\n            if (inputName) {\r\n                if (outputName?.includes('body')) {\r\n                    bodyInputNames.push(inputName);\r\n                }\r\n\r\n                if (outputName?.includes('query')) {\r\n                    queryInputNames.push(inputName);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const _inputWithDefaultValue of inputsWithDefaultValue) {\r\n            const inputName = _inputWithDefaultValue?.name;\r\n\r\n            let inputValue = input[inputName];\r\n\r\n            // We provide a default value for the OpenAPI Schema, which can detected by AnthropicAI. So we need to check if the default value is an Agent Variable. This is necessary for interactions with the Chatbot.\r\n\r\n            if (bodyInputNames.includes(inputName) && isEmpty(body[inputName])) {\r\n                body[inputName] = inputValue;\r\n            }\r\n\r\n            if (queryInputNames.includes(inputName) && isEmpty(query[inputName])) {\r\n                query[inputName] = inputValue;\r\n            }\r\n        }\r\n\r\n        //override debugger injection\r\n        // if (agent.agentRuntime.debug && body?.[0]?.dbg) { // ! 'dbg' is DEPRECATED\r\n        const isDbgInjection = req.header('X-Debug-Inj') !== undefined;\r\n        if (isDbgInjection && agent.agentRuntime.debug && Object.values(input).length > 0) {\r\n            switch (config.data.method) {\r\n                case 'GET':\r\n                    for (const [key, value] of Object.entries(input)) {\r\n                        if (value instanceof BinaryInput) {\r\n                            logger.debug('[WARNING] Binary files are not supported for GET requests. Key:', key);\r\n                        } else {\r\n                            query[key] = value as string;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'POST':\r\n                default:\r\n                    body = input;\r\n                    break;\r\n            }\r\n            //body = input;\r\n        }\r\n\r\n        // ensure strong data type\r\n        body = await performTypeInference(body, config.inputs, agent);\r\n        query = await performTypeInference(query, config.inputs, agent);\r\n\r\n        logger.debug('Parsing inputs');\r\n        logger.debug(' Headers', headers);\r\n        logger.debug(' Body', body);\r\n        logger.debug(' Params', params);\r\n        logger.debug(' Query', query);\r\n\r\n        //Handle JSON Data\r\n        //FIXME : this is a workaround that parses any json string in the body, we should only parse the json string in the body if the data type is explicitely set to JSON\r\n        //TODO : Add data types to APIEndpoint inputs\r\n        logger.debug('Parsing body json input');\r\n        for (let key in body) {\r\n            const value = body[key];\r\n            if (typeof value === 'string' && value.trim().startsWith('{') && value.trim().endsWith('}')) {\r\n                try {\r\n                    const obj = JSON.parse(jsonrepair(body[key]));\r\n                    body[key] = obj;\r\n                } catch {\r\n                    //skip it if it's not a valid json\r\n                }\r\n            }\r\n        }\r\n        logger.debug('Parsed body json input', body);\r\n\r\n        logger.debug('Parsing query json input');\r\n        for (let key in query) {\r\n            const value = query[key];\r\n            if (typeof value === 'string' && value.trim().startsWith('{') && value.trim().endsWith('}')) {\r\n                try {\r\n                    const obj = JSON.parse(jsonrepair(query[key] as string));\r\n                    query[key] = obj;\r\n                } catch {\r\n                    //skip it if it's not a valid json\r\n                }\r\n            }\r\n        }\r\n        logger.debug('Parsed query json input', query);\r\n\r\n        //Handle binary data\r\n        for (let input of config.inputs) {\r\n            if (!input.isFile && input?.type?.toLowerCase() !== 'binary') continue;\r\n\r\n            const fieldname = input.name;\r\n\r\n            logger.debug('Parsing file input ', fieldname);\r\n\r\n            let binaryInput = body[fieldname];\r\n\r\n            if (!(binaryInput instanceof BinaryInput)) {\r\n                // * when data sent with 'multipart/form-data' content type, we expect the files to be in req.files\r\n                if (req.files?.length > 0) {\r\n                    const file = req.files.find((file) => file.fieldname === fieldname);\r\n                    if (!file) continue;\r\n                    binaryInput = new BinaryInput(file.buffer, uid() + '-' + file.originalname, file.mimetype);\r\n                }\r\n            }\r\n\r\n            if (binaryInput instanceof BinaryInput) {\r\n                body[fieldname] = await binaryInput.getJsonData(AccessCandidate.agent(agent.id));\r\n            }\r\n            //console.log('file', fieldname, body[fieldname]);\r\n        }\r\n\r\n        return { headers, body, query, params, _authInfo, _debug: logger.output };\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Joi from 'joi';\r\n\r\nexport default class APIOutput extends Component {\r\n    protected configSchema = Joi.object({\r\n        format: Joi.string().valid('full', 'minimal').required().label('Output Format'),\r\n    });\r\n    public hasPostProcess = true;\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        const _error = undefined;\r\n        let Output = {};\r\n        logger.debug(` Processing outputs `);\r\n        for (let key in input) {\r\n            if (!config.inputs.find((i) => i.name == key)) continue; //exclude global variables\r\n            Output[key] = input[key];\r\n        }\r\n\r\n        if (config.data.format === 'raw') {\r\n            let rawOutput = '';\r\n            for (let key in input) {\r\n                if (!config.inputs.find((i) => i.name == key)) continue; //exclude global variables\r\n                rawOutput += input[key];\r\n            }\r\n            Output = rawOutput;\r\n        }\r\n        return { Output, _error, _debug: logger.output };\r\n    }\r\n    async postProcess(output, config, agent: Agent): Promise<any> {\r\n        for (let agentVar in agent.agentVariables) {\r\n            delete output?.result?.Output?.[agentVar]; //clean up agent variables from output\r\n        }\r\n        if (config?.data?.format == 'minimal') {\r\n            if (output?.result?.Output) {\r\n                return output?.result?.Output;\r\n            }\r\n\r\n            if (output?.result?._error) {\r\n                return output?.result?._error;\r\n            }\r\n\r\n            delete output.id;\r\n            delete output.name;\r\n        }\r\n        return output;\r\n    }\r\n}\r\n","export default {\r\n    echo: {\r\n        llm: 'Echo',\r\n        alias: 'Echo',\r\n    },\r\n    Echo: {\r\n        llm: 'Echo',\r\n        tokens: 128000,\r\n        completionTokens: 128000,\r\n        enabled: true,\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot'],\r\n    },\r\n\r\n    // GPT-4o\r\n    'gpt-4o-mini': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-4o-mini-2024-07-18',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n    },\r\n    'gpt-4o-mini-2024-07-18': {\r\n        llm: 'OpenAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: true,\r\n        keyOptions: { tokens: 128000, completionTokens: 16383 },\r\n    },\r\n    'gpt-4o': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-4o-2024-05-13',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n    },\r\n    'gpt-4o-2024-05-13': {\r\n        llm: 'OpenAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: true,\r\n        keyOptions: { tokens: 128000, completionTokens: 4096 },\r\n    },\r\n\r\n    // GPT-4-turbo\r\n    'gpt-4-turbo-latest': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-4-turbo-2024-04-09',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-4-turbo': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-4-turbo-2024-04-09',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-4-turbo-2024-04-09': {\r\n        llm: 'OpenAI',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: true,\r\n        keyOptions: { tokens: 128000, completionTokens: 4096 },\r\n    },\r\n\r\n    // GPT-4\r\n    'gpt-4-latest': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-4-0613',\r\n        enabled: true,\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-4': {\r\n        llm: 'OpenAI',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: true,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192 },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-4-0613': {\r\n        llm: 'OpenAI',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: true,\r\n        hidden: true,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192 },\r\n    },\r\n    // GPT-3.5\r\n    'gpt-3.5-turbo-latest': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-3.5-turbo-0125',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-3.5-turbo': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-3.5-turbo-0125',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'AgentPlugin', 'Chatbot', 'GPTPlugin'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gpt-3.5-turbo-0125': {\r\n        llm: 'OpenAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: true,\r\n        keyOptions: { tokens: 16385, completionTokens: 4096 },\r\n    },\r\n    'gpt-3.5-turbo-1106': {\r\n        llm: 'OpenAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: true,\r\n        keyOptions: { tokens: 16384, completionTokens: 4096 },\r\n        //components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n\r\n    'gpt-3.5-turbo-16k': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-3.5-turbo-0125',\r\n        //components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n    // legacy model to continue support for Agent Plugins\r\n    'gpt-3.5-turbo-0613': {\r\n        llm: 'OpenAI',\r\n        alias: 'gpt-3.5-turbo-0125',\r\n        //components: ['GPTPlugin', 'AgentPlugin'],\r\n        tags: ['deprecated'],\r\n    },\r\n\r\n    // AnthropicAI\r\n    'claude-3-opus': {\r\n        llm: 'AnthropicAI',\r\n        alias: 'claude-3-opus-20240229',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot'],\r\n    },\r\n    'claude-3.5-sonnet': {\r\n        llm: 'AnthropicAI',\r\n        alias: 'claude-3-5-sonnet-20240620',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot'],\r\n    },\r\n    'claude-3-sonnet': {\r\n        llm: 'AnthropicAI',\r\n        alias: 'claude-3-sonnet-20240229',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot'],\r\n        tags: ['legacy'],\r\n    },\r\n    'claude-3-haiku': {\r\n        llm: 'AnthropicAI',\r\n        alias: 'claude-3-haiku-20240307',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier', 'VisionLLM', 'AgentPlugin', 'Chatbot'],\r\n    },\r\n    'claude-3-opus-20240229': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 200000, completionTokens: 4096, enabled: true },\r\n    },\r\n    'claude-3-5-sonnet-20240620': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 200000, completionTokens: 4096, enabled: true },\r\n    },\r\n    'claude-3-sonnet-20240229': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 200000, completionTokens: 4096, enabled: true },\r\n    },\r\n    'claude-3-haiku-20240307': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 200000, completionTokens: 4096, enabled: true },\r\n    },\r\n    'claude-2.1': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 200000, completionTokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier'],\r\n        tags: ['legacy'],\r\n    },\r\n    'claude-instant-1.2': {\r\n        llm: 'AnthropicAI',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 100000, completionTokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier'],\r\n        tags: ['legacy'],\r\n    },\r\n\r\n    /*** Models from Google AI ***/\r\n\r\n    // Gemini 1.5 pro\r\n    'gemini-1.5-pro-latest': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2097152, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.5-pro-exp-0801': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2097152, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n    },\r\n    'gemini-1.5-pro-latest-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.5-pro',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n    },\r\n    'gemini-1.5-pro-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.5-pro-001',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n    },\r\n    'gemini-1.5-pro': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2097152, completionTokens: 8192, enabled: true },\r\n    },\r\n    'gemini-1.5-pro-001': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2097152, completionTokens: 8192, enabled: true },\r\n    },\r\n\r\n    // Gemini 1.5 flash\r\n    'gemini-1.5-flash-latest': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 1048576, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.5-flash-latest-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.5-flash',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.5-flash-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.5-flash-001',\r\n        components: ['PromptGenerator', 'LLMAssistant', 'VisionLLM', 'MultimodalLLM'],\r\n    },\r\n    'gemini-1.5-flash': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 1048576, completionTokens: 8192, enabled: true },\r\n    },\r\n    'gemini-1.5-flash-001': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 1048576, completionTokens: 8192, enabled: true },\r\n    },\r\n\r\n    // Gemini 1.0 pro\r\n    'gemini-1.0-pro-latest': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 30720, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.0-pro-latest-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.0-pro',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.0-pro-stable': {\r\n        llm: 'GoogleAI',\r\n        alias: 'gemini-1.0-pro-001',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['legacy'],\r\n    },\r\n    'gemini-1.0-pro': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 30720, completionTokens: 8192, enabled: true },\r\n    },\r\n    'gemini-1.0-pro-001': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 30720, completionTokens: 8192, enabled: true },\r\n    },\r\n    'gemini-pro-vision': {\r\n        llm: 'GoogleAI',\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        enabled: false,\r\n        keyOptions: { tokens: 12288, completionTokens: 4096, enabled: true },\r\n        components: ['VisionLLM'],\r\n        tags: ['legacy'],\r\n    },\r\n\r\n    /* Groq */\r\n    'groq-llama-3.1-405b-reasoning': {\r\n        llm: 'Groq',\r\n        alias: 'llama-3.1-405b-reasoning',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama-3.1-405b-reasoning': {\r\n        llm: 'Groq',\r\n        tokens: 16000,\r\n        completionTokens: 16000,\r\n        enabled: false,\r\n        keyOptions: { tokens: 131072, completionTokens: 131072, enabled: true },\r\n    },\r\n    'groq-llama-3.1-70b-versatile': {\r\n        llm: 'Groq',\r\n        alias: 'llama-3.1-70b-versatile',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama-3.1-70b-versatile': {\r\n        llm: 'Groq',\r\n        tokens: 8000,\r\n        completionTokens: 8000,\r\n        enabled: false,\r\n        keyOptions: { tokens: 131072, completionTokens: 131072, enabled: true },\r\n    },\r\n    'groq-llama-3.1-8b-instant': {\r\n        llm: 'Groq',\r\n        alias: 'llama-3.1-8b-instant',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama-3.1-8b-instant': {\r\n        llm: 'Groq',\r\n        tokens: 8000,\r\n        completionTokens: 8000,\r\n        enabled: false,\r\n        keyOptions: { tokens: 131072, completionTokens: 131072, enabled: true },\r\n    },\r\n    'llama3-groq-70b-8192-tool-use-preview': {\r\n        llm: 'Groq',\r\n        tokens: 8192,\r\n        completionTokens: 8192,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama3-groq-8b-8192-tool-use-preview': {\r\n        llm: 'Groq',\r\n        tokens: 8192,\r\n        completionTokens: 8192,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'groq-llama3-8b': {\r\n        llm: 'Groq',\r\n        alias: 'llama3-8b-8192',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama3-8b-8192': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n    },\r\n    'groq-llama3-70b': {\r\n        llm: 'Groq',\r\n        alias: 'llama3-70b-8192',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama3-70b-8192': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n    },\r\n    'groq-llama2-70b': {\r\n        llm: 'Groq',\r\n        alias: 'llama2-70b-4096',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'llama2-70b-4096': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, completionTokens: 4096, enabled: true },\r\n    },\r\n    'groq-mixtral-8x7b': {\r\n        llm: 'Groq',\r\n        alias: 'mixtral-8x7b-32768',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'mixtral-8x7b-32768': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, completionTokens: 32768, enabled: true },\r\n    },\r\n    'groq-gemma-7b': {\r\n        llm: 'Groq',\r\n        alias: 'gemma-7b-it',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'gemma-7b-it': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n    },\r\n    'groq-gemma2-9b': {\r\n        llm: 'Groq',\r\n        alias: 'gemma2-9b-it',\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'gemma2-9b-it': {\r\n        llm: 'Groq',\r\n        tokens: 1024,\r\n        completionTokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, completionTokens: 8192, enabled: true },\r\n    },\r\n\r\n    /* Together AI */\r\n    'zero-one-ai/Yi-34B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['LLMAssistant'], // * Excluded from 'PromptGenerator' (has \"```json...```\" with JSON response)\r\n    },\r\n    'Austism/chronos-hermes-13b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    // Meta\r\n    'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 128000, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 128000, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3-8B-Instruct-Turbo': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3-70B-Instruct-Turbo': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3-8B-Instruct-Lite': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Meta-Llama-3-70B-Instruct-Lite': {\r\n        llm: 'TogetherAI',\r\n        tokens: 4096,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['LLMAssistant', 'PromptGenerator'],\r\n        tags: ['new'],\r\n    },\r\n    'togethercomputer/CodeLlama-13b-Instruct': {\r\n        // ! DEPRECATED: will be removed (replace with codellama/CodeLlama-13b-Instruct-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n    },\r\n    'codellama/CodeLlama-13b-Instruct-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/CodeLlama-34b-Instruct': {\r\n        // ! DEPRECATED: will be removed (replaced with codellama/CodeLlama-34b-Instruct-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n    },\r\n    'codellama/CodeLlama-34b-Instruct-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'codellama/CodeLlama-70b-Instruct-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'togethercomputer/CodeLlama-7b-Instruct': {\r\n        // ! DEPRECATED: will be removed (replaced with codellama/CodeLlama-7b-Instruct-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n    },\r\n    'codellama/CodeLlama-7b-Instruct-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 16384, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/llama-2-70b-chat': {\r\n        // ! DEPRECATED: will be removed (replaced with meta-llama/Llama-2-70b-chat-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'meta-llama/Llama-2-70b-chat-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/llama-2-13b-chat': {\r\n        // ! DEPRECATED: will be removed (replaced with meta-llama/Llama-2-13b-chat-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'meta-llama/Llama-2-13b-chat-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['LLMAssistant'], // * Excluded from 'PromptGenerator' (has introductory text with JSON response)\r\n    },\r\n    'togethercomputer/llama-2-7b-chat': {\r\n        // ! DEPRECATED: will be removed (replaced with meta-llama/Llama-2-7b-chat-hf)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'meta-llama/Llama-2-7b-chat-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['LLMAssistant'], // * Excluded from 'PromptGenerator' (has introductory text with JSON response)\r\n    },\r\n    'meta-llama/Llama-3-8b-chat-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'meta-llama/Llama-3-70b-chat-hf': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    'DiscoResearch/DiscoLM-mixtral-8x7b-v2': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n    },\r\n    'togethercomputer/falcon-40b-instruct': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n    },\r\n    'togethercomputer/falcon-7b-instruct': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/GPT-NeoXT-Chat-Base-20B': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n    },\r\n    'togethercomputer/Llama-2-7B-32K-Instruct': {\r\n        // ! DEPRECATED: will be removed\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n    },\r\n\r\n    // mistralai\r\n    'mistralai/Mistral-7B-Instruct-v0.1': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'mistralai/Mistral-7B-Instruct-v0.2': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'mistralai/Mistral-7B-Instruct-v0.3': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier'],\r\n        tags: ['new'],\r\n    },\r\n    'mistralai/Mixtral-8x7B-Instruct-v0.1': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant', 'Classifier'],\r\n    },\r\n    'mistralai/Mixtral-8x22B-Instruct-v0.1': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 65536, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    'Gryphe/MythoMax-L2-13b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    // NousResearch\r\n    'NousResearch/Nous-Hermes-Llama2-70b': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'NousResearch/Nous-Capybara-7B-V1p9': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'NousResearch/Nous-Hermes-2-Mistral-7B-DPO': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'NousResearch/Nous-Hermes-2-Yi-34B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'NousResearch/Nous-Hermes-llama-2-7b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'NousResearch/Nous-Hermes-Llama2-13b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    // OpenChat\r\n    'openchat/openchat-3.5-1210': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    // Teknium\r\n    'teknium/OpenHermes-2-Mistral-7B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'teknium/OpenHermes-2p5-Mistral-7B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    'garage-bAInd/Platypus2-70B-instruct': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/Pythia-Chat-Base-7B-v0.16': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n    },\r\n    'togethercomputer/Qwen-7B-Chat': {\r\n        // ! DEPRECATED: will be removed (404 - not found)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n    },\r\n    'togethercomputer/RedPajama-INCITE-Chat-3B-v1': {\r\n        // ! DEPRECATED: will be removed (Weird response)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n    },\r\n    'togethercomputer/RedPajama-INCITE-7B-Chat': {\r\n        // ! DEPRECATED: will be removed (Weird response)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n    },\r\n    'upstage/SOLAR-0-70b-16bit': {\r\n        // ! DEPRECATED: will be removed (404 - not found) (replaced with upstage/SOLAR-10.7B-Instruct-v1.0)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'upstage/SOLAR-10.7B-Instruct-v1.0': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'togethercomputer/StripedHyena-Nous-7B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'lmsys/vicuna-7b-v1.5': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'lmsys/vicuna-13b-v1.5': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'lmsys/vicuna-13b-v1.5-16k': {\r\n        // ! DEPRECATED: will be removed (not exists in models page)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 16384, enabled: true },\r\n    },\r\n\r\n    // Allen AI\r\n    // ! Response it is not JSON and have unnecessary information\r\n    /* 'allenai/OLMo-7B-Instruct': {\r\n          llm: 'TogetherAI',\r\n          tokens: 1024,\r\n          enabled: false,\r\n          keyOptions: { tokens: 2048, enabled: true },\r\n      }, */\r\n    'allenai/OLMo-7B-Twin-2T': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'allenai/OLMo-7B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    // Qwen\r\n    'Qwen/Qwen1.5-0.5B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['LLMAssistant'], // * Excluded from 'PromptGenerator' (has introductory text with JSON response)\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-1.8B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-4B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-7B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-14B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-32B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-72B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Qwen/Qwen1.5-110B-Chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    // DeepSeek\r\n    'deepseek-ai/deepseek-coder-33b-instruct': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 16384, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'deepseek-ai/deepseek-llm-67b-chat': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    // Google\r\n    'google/gemma-2b-it': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'google/gemma-7b-it': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'google/gemma-2-9b-it': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'google/gemma-2-27b-it': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    // Undi95\r\n    'Undi95/ReMM-SLERP-L2-13B': {\r\n        // ! DEPRECATED: will be removed (always have empty response)\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n    },\r\n    'Undi95/Toppy-M-7B': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n\r\n    // Others\r\n    'cognitivecomputations/dolphin-2.5-mixtral-8x7b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'databricks/dbrx-instruct': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'Open-Orca/Mistral-7B-OpenOrca': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 8192, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'snorkelai/Snorkel-Mistral-PairRM-DPO': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 32768, enabled: true },\r\n        components: ['LLMAssistant'], // * Excluded from 'PromptGenerator' (has some other text)\r\n        tags: ['new'],\r\n    },\r\n    'Snowflake/snowflake-arctic-instruct': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n        tags: ['new'],\r\n    },\r\n    'togethercomputer/alpaca-7b': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 2048, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n    'WizardLM/WizardLM-13B-V1.2': {\r\n        llm: 'TogetherAI',\r\n        tokens: 1024,\r\n        enabled: false,\r\n        keyOptions: { tokens: 4096, enabled: true },\r\n        components: ['PromptGenerator', 'LLMAssistant'],\r\n    },\r\n\r\n    // We do not get the exact token information for Dalle models, so use the maximum possible values\r\n    'dall-e-3': {\r\n        llm: 'OpenAI',\r\n        alias: 'dall-e-3',\r\n        enabled: true,\r\n        components: ['ImageGenerator'],\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        keyOptions: { tokens: 128000, completionTokens: 16383 },\r\n    },\r\n    'dall-e-2': {\r\n        llm: 'OpenAI',\r\n        alias: 'dall-e-2',\r\n        enabled: true,\r\n        components: ['ImageGenerator'],\r\n        tokens: 2048,\r\n        completionTokens: 2048,\r\n        keyOptions: { tokens: 128000, completionTokens: 16383 },\r\n    },\r\n};\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { LLMChatResponse, LLMConnector } from './LLM.service/LLMConnector';\r\nimport models from './models';\r\nimport { EventEmitter } from 'events';\r\nimport { GenerateImageConfig } from '@sre/types/LLM.types';\r\n\r\nexport class LLMHelper {\r\n    private _llmConnector: LLMConnector;\r\n    private _modelId: string;\r\n    private _modelInfo: any;\r\n\r\n    constructor(private model: string) {\r\n        const llmName = models[model]?.llm;\r\n        this._modelId = models[model]?.alias || model;\r\n        this._modelInfo = models[this._modelId];\r\n        this._llmConnector = ConnectorService.getLLMConnector(llmName);\r\n    }\r\n\r\n    static load(model: string) {\r\n        //TODO: cache instances\r\n        return new LLMHelper(model);\r\n    }\r\n\r\n    public get modelInfo(): any {\r\n        return this._modelInfo;\r\n    }\r\n    public get connector(): LLMConnector {\r\n        return this._llmConnector;\r\n    }\r\n\r\n    public async promptRequest(prompt, config: any = {}, agent: string | Agent, customParams: any = {}) {\r\n        if (!prompt && !customParams.messages?.length) {\r\n            throw new Error('Prompt or messages are required');\r\n        }\r\n\r\n        if (!this._llmConnector) {\r\n            throw new Error(`Model ${this.model} not supported`);\r\n        }\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        const params: any = await this._llmConnector.extractLLMComponentParams(config);\r\n        params.model = this._modelId;\r\n\r\n        //override params with customParams\r\n        Object.assign(params, customParams);\r\n\r\n        try {\r\n            prompt = this._llmConnector.enhancePrompt(prompt, config);\r\n\r\n            let response: LLMChatResponse = await this._llmConnector.user(AccessCandidate.agent(agentId)).chatRequest(prompt, params);\r\n\r\n            const result = this._llmConnector.postProcess(response?.content);\r\n            if (result.error) {\r\n                // If the model stopped before completing the response, this is usually due to output token limit reached.\r\n                if (response.finishReason !== 'stop') {\r\n                    throw new Error('The model stopped before completing the response, this is usually due to output token limit reached.');\r\n                }\r\n\r\n                // If the model stopped due to other reasons, throw the error\r\n                throw new Error(result.error);\r\n            }\r\n            return result;\r\n        } catch (error: any) {\r\n            console.error('Error in chatRequest: ', error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async visionRequest(prompt, fileSources: string[], config: any = {}, agent: string | Agent) {\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        const params: any = await this._llmConnector.extractVisionLLMParams(config);\r\n        params.model = this._modelId;\r\n\r\n        const promises = [];\r\n        const _fileSources = [];\r\n\r\n        for (let image of fileSources) {\r\n            const binaryInput = BinaryInput.from(image);\r\n            _fileSources.push(binaryInput);\r\n            promises.push(binaryInput.upload(AccessCandidate.agent(agentId)));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n\r\n        params.fileSources = _fileSources;\r\n\r\n        try {\r\n            prompt = this._llmConnector.enhancePrompt(prompt, config);\r\n            let response: LLMChatResponse = await this._llmConnector.user(AccessCandidate.agent(agentId)).visionRequest(prompt, params);\r\n\r\n            const result = this._llmConnector.postProcess(response?.content);\r\n\r\n            if (result.error) {\r\n                if (response.finishReason !== 'stop') {\r\n                    throw new Error('The model stopped before completing the response, this is usually due to output token limit reached.');\r\n                }\r\n\r\n                // If the model stopped due to other reasons, throw the error\r\n                throw new Error(result.error);\r\n            }\r\n\r\n            return result;\r\n        } catch (error: any) {\r\n            console.error('Error in visionRequest: ', error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // multimodalRequest is the same as visionRequest. visionRequest will be deprecated in the future.\r\n    public async multimodalRequest(prompt, fileSources: string[], config: any = {}, agent: string | Agent) {\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        const params: any = await this._llmConnector.extractVisionLLMParams(config);\r\n        params.model = this._modelId;\r\n\r\n        const promises = [];\r\n        const _fileSources = [];\r\n\r\n        for (let image of fileSources) {\r\n            const binaryInput = BinaryInput.from(image);\r\n            _fileSources.push(binaryInput);\r\n            promises.push(binaryInput.upload(AccessCandidate.agent(agentId)));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n\r\n        params.fileSources = _fileSources;\r\n\r\n        try {\r\n            prompt = this._llmConnector.enhancePrompt(prompt, config);\r\n            let response: LLMChatResponse = await this._llmConnector.user(AccessCandidate.agent(agentId)).multimodalRequest(prompt, params);\r\n\r\n            const result = this._llmConnector.postProcess(response?.content);\r\n\r\n            if (result.error) {\r\n                if (response.finishReason !== 'stop') {\r\n                    throw new Error('The model stopped before completing the response, this is usually due to output token limit reached.');\r\n                }\r\n\r\n                // If the model stopped due to other reasons, throw the error\r\n                throw new Error(result.error);\r\n            }\r\n\r\n            return result;\r\n        } catch (error: any) {\r\n            console.error('Error in multimodalRequest: ', error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async imageGenRequest(prompt: string, params: GenerateImageConfig, agent: string | Agent) {\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        params.model = this._modelId;\r\n        return this._llmConnector.user(AccessCandidate.agent(agentId)).imageGenRequest(prompt, params);\r\n    }\r\n\r\n    public async toolRequest(params: any, agent: string | Agent) {\r\n        if (!params.messages || !params.messages?.length) {\r\n            throw new Error('Input messages are required.');\r\n        }\r\n\r\n        try {\r\n            const agentId = agent instanceof Agent ? agent.id : agent;\r\n            params.model = this._modelId;\r\n            return this._llmConnector.user(AccessCandidate.agent(agentId)).toolRequest(params);\r\n        } catch (error: any) {\r\n            console.error('Error in toolRequest: ', error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async streamToolRequest(params: any, agent: string | Agent) {\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        return this._llmConnector.user(AccessCandidate.agent(agentId)).streamToolRequest(params);\r\n    }\r\n\r\n    public async streamRequest(params: any, agent: string | Agent) {\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n        try {\r\n            if (!params.messages || !params.messages?.length) {\r\n                throw new Error('Input messages are required.');\r\n            }\r\n\r\n            params.model = this._modelId;\r\n            return await this._llmConnector.user(AccessCandidate.agent(agentId)).streamRequest(params);\r\n        } catch (error) {\r\n            console.error('Error in streamRequest:', error);\r\n\r\n            const dummyEmitter = new EventEmitter();\r\n            process.nextTick(() => {\r\n                dummyEmitter.emit('error', error);\r\n                dummyEmitter.emit('end');\r\n            });\r\n            return dummyEmitter;\r\n        }\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport Joi from 'joi';\r\nimport Component from './Component.class';\r\n\r\n//TODO : better handling of context window exceeding max length\r\n\r\nexport default class PromptGenerator extends Component {\r\n    protected configSchema = Joi.object({\r\n        model: Joi.string().max(200).required(),\r\n        prompt: Joi.string().required().label('Prompt'),\r\n        temperature: Joi.number().min(0).max(5).label('Temperature'), // max temperature is 2 for OpenAI and togetherAI but 5 for cohere\r\n        maxTokens: Joi.number().min(1).label('Maximum Tokens'),\r\n        stopSequences: Joi.string().allow('').max(400).label('Stop Sequences'),\r\n        topP: Joi.number().min(0).max(1).label('Top P'),\r\n        topK: Joi.number().min(0).max(500).label('Top K'), // max top_k is 100 for togetherAI but 500 for cohere\r\n        frequencyPenalty: Joi.number().min(0).max(2).label('Frequency Penalty'),\r\n        presencePenalty: Joi.number().min(0).max(2).label('Presence Penalty'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        //let debugLog = agent.agentRuntime?.debug ? [] : undefined;\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        try {\r\n            logger.debug(`=== LLM Prompt Log ===`);\r\n\r\n            const model: string = config.data.model || 'echo';\r\n            const llmHelper: LLMHelper = LLMHelper.load(model);\r\n\r\n            // if the llm is undefined, then it means we removed the model from our system\r\n            if (!llmHelper.connector) {\r\n                return {\r\n                    _error: `The model '${model}' is not available. Please try a different one.`,\r\n                    _debug: logger.output,\r\n                };\r\n            }\r\n\r\n            logger.debug(` Model : ${model}`);\r\n\r\n            let prompt: any = TemplateString(config.data.prompt).parse(input).result;\r\n\r\n            logger.debug(` Parsed prompt\\n`, prompt, '\\n');\r\n\r\n            // request to LLM\r\n            //const response: any = await componentLLMRequest(prompt, model, config).catch((error) => ({ error: error }));\r\n            const response: any = await llmHelper.promptRequest(prompt, config, agent).catch((error) => ({ error: error }));\r\n\r\n            logger.debug(` Enhanced prompt \\n`, prompt, '\\n');\r\n            // in case we have the response but it's empty string, undefined or null\r\n            if (!response) {\r\n                return { _error: ' LLM Error = Empty Response!', _debug: logger.output };\r\n            }\r\n\r\n            if (response?.error) {\r\n                logger.error(` LLM Error=${JSON.stringify(response.error)}`);\r\n\r\n                return { Reply: response?.data, _error: response?.error + ' ' + response?.details, _debug: logger.output };\r\n            }\r\n\r\n            const result = { Reply: response };\r\n\r\n            result['_debug'] = logger.output;\r\n\r\n            return result;\r\n        } catch (error) {\r\n            return { _error: error.message, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { REQUEST_CONTENT_TYPES } from '@sre/constants';\r\nimport { JSONContent } from '@sre/helpers/JsonContent.helper';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nexport async function parseHeaders(input, config, agent: Agent) {\r\n    const teamId = agent ? agent.teamId : null;\r\n    const templateSettings = config?.template?.settings || {};\r\n    const contentType = config?.data?.contentType || REQUEST_CONTENT_TYPES.none;\r\n    let headers = config?.data?.headers || '{}';\r\n\r\n    //parse component template vars\r\n    if (config.data._templateVars && templateSettings) {\r\n        headers = await TemplateString(headers)\r\n            .parseComponentTemplateVarsAsync(templateSettings) // replaces component template vars with their IDs (this turns the string parses into an async parser)\r\n            .parse(config.data._templateVars).asyncResult; // replaces IDs with actual values then returns parser promise\r\n    }\r\n\r\n    //parse vault keys\r\n    headers = await TemplateString(headers).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n    //parse input variables and clean up the remaining unparsed values\r\n    headers = TemplateString(headers).parse(input).clean().result;\r\n\r\n    //parse headers as json\r\n    let jsonHeaders: any = JSONContent(headers).tryParse();\r\n    if (typeof jsonHeaders !== 'object') {\r\n        jsonHeaders = { 'x-smyth-error': 'Error parsing headers' };\r\n    }\r\n\r\n    //normalize headers key names to lowercase\r\n    jsonHeaders = Object.fromEntries(Object.entries(jsonHeaders).map(([key, value]) => [key.toLowerCase(), value]));\r\n\r\n    //if headers does not contain content-type, add it\r\n    if (!jsonHeaders['content-type'] && contentType !== 'none') {\r\n        jsonHeaders['content-type'] = contentType;\r\n    }\r\n\r\n    return jsonHeaders;\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nexport async function parseUrl(input, config, agent: Agent) {\r\n    const teamId = agent ? agent.teamId : null;\r\n    const templateSettings = config?.template?.settings || {};\r\n\r\n    let url = config?.data?.url;\r\n\r\n    url = decodeURIComponent(url); //decode the url in order to parse the template vars\r\n\r\n    //parse component template vars\r\n    if (config.data._templateVars && templateSettings) {\r\n        url = await TemplateString(url)\r\n            .parseComponentTemplateVarsAsync(templateSettings) // replaces component template vars with their IDs (this turns the string parses into an async parser)\r\n            .parse(config.data._templateVars).asyncResult; // replaces IDs with actual values then returns parser promise\r\n    }\r\n\r\n    //parse vault keys\r\n    url = await TemplateString(url).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n    //parse input variables and clean up the remaining unparsed values\r\n    url = TemplateString(url).parse(input).clean().result;\r\n\r\n    //URL will take care of encoding the url properly\r\n    const urlObj = new URL(url);\r\n\r\n    //urlObj.href will return the encoded url\r\n    return urlObj.href;\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { REQUEST_CONTENT_TYPES } from '@sre/constants';\r\nimport { JSONContent } from '@sre/helpers/JsonContent.helper';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { SmythFS } from '@sre/IO/Storage.service/SmythFS.class';\r\n\r\nexport async function parseData(input: any, config, agent: Agent) {\r\n    const teamId = agent ? agent.teamId : null;\r\n    const templateSettings = config?.template?.settings || {};\r\n    const contentType = config?.data?.contentType || REQUEST_CONTENT_TYPES.none;\r\n\r\n    let body = config?.data?.body?.trim();\r\n    if (!body) {\r\n        return undefined;\r\n    }\r\n\r\n    // Parse component template variables\r\n    if (config.data._templateVars && templateSettings) {\r\n        //prettier-ignore\r\n        body = await TemplateString(body) \r\n            .parseComponentTemplateVarsAsync(templateSettings) // replace component template vars with their IDs (this turns the string parses into an async parser)            \r\n            .asyncResult; //returns parser promise\r\n    }\r\n\r\n    // Parse vault keys\r\n    body = await TemplateString(body).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n    // Handle different content types\r\n    const handlers: Record<string, (parsedBody: any, input: any, config, agent: Agent) => any> = {\r\n        [REQUEST_CONTENT_TYPES.json]: handleJson,\r\n        [REQUEST_CONTENT_TYPES.urlEncodedFormData]: handleUrlEncoded,\r\n        [REQUEST_CONTENT_TYPES.multipartFormData]: handleMultipartFormData,\r\n        [REQUEST_CONTENT_TYPES.binary]: handleBinary,\r\n        [REQUEST_CONTENT_TYPES.text]: handleText,\r\n        [REQUEST_CONTENT_TYPES.none]: handleNone,\r\n    };\r\n\r\n    const handler = handlers[contentType] || handleNone;\r\n    const data = await handler(body, input, config, agent);\r\n\r\n    //const jsonBody: any = JSONContent(data).tryParse();\r\n    return data;\r\n}\r\n\r\nasync function handleJson(body: any, input: any, config, agent: Agent) {\r\n    // Parse template and input variables\r\n    //prettier-ignore\r\n    const data = TemplateString(body)\r\n        .parse(config.data._templateVars) //parse Template variables first (if any)\r\n        .parse(input) //parse inputs\r\n        .clean().result; //clean up the remaining unparsed values\r\n\r\n    const jsonBody: any = JSONContent(data).tryParse();\r\n    return jsonBody;\r\n}\r\n\r\nasync function handleUrlEncoded(body: any, input: any, config, agent: Agent) {\r\n    if (typeof body === 'object') {\r\n        const params = new URLSearchParams();\r\n        for (const key in body) {\r\n            params.append(key, String(body[key]));\r\n        }\r\n        return params.toString();\r\n    }\r\n    return body;\r\n}\r\n\r\nasync function handleMultipartFormData(body: any, input: any, config, agent: Agent) {\r\n    const formData = new FormData();\r\n    for (const key in body) {\r\n        const value = body[key];\r\n\r\n        if (value && typeof value === 'object' && value.url) {\r\n            const binaryInput = await BinaryInput.from(value, value.name, value.mimetype);\r\n            const buffer = await binaryInput.getBuffer();\r\n            const blob = new Blob([buffer], { type: value.mimetype });\r\n            formData.append(key, blob, value.filename);\r\n        } else {\r\n            formData.append(key, typeof value === 'boolean' ? String(value) : value);\r\n        }\r\n    }\r\n    return formData;\r\n}\r\n\r\nasync function handleBinary(body: any, input: any, config, agent: Agent) {\r\n    const regex = /{{(.*?)}}/;\r\n    const match = typeof body === 'string' ? body.match(regex) : null;\r\n    const key = match ? match[1] : '';\r\n    const data = input?.[key];\r\n    if (data && data instanceof BinaryInput) {\r\n        //const binaryInput = BinaryInput.from(data, data.name, data.mimetype, AccessCandidate.agent(agent.id));\r\n        const buffer = await data.getBuffer();\r\n        return buffer;\r\n    }\r\n    return Buffer.from([]);\r\n}\r\n\r\nasync function handleNone(body: any, input: any, config, agent: Agent) {\r\n    //FIXME: try to guess the content type from headers content-type and data\r\n\r\n    return typeof body === 'string' ? body : JSON.stringify(body);\r\n}\r\nfunction handleText(body: any, input: any, config: any, agent: Agent) {\r\n    // Parse template and input variables\r\n    //prettier-ignore\r\n    const data = TemplateString(body)\r\n        .parse(config.data._templateVars) //parse Template variables first (if any)\r\n        .parse(input) //parse inputs\r\n        .clean().result; //clean up the remaining unparsed values\r\n\r\n    return data;\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { AxiosProxyConfig } from 'axios';\r\n\r\nexport async function parseProxy(input, config, agent: Agent): Promise<AxiosProxyConfig | false> {\r\n    const teamId = agent ? agent.teamId : null;\r\n    const templateSettings = config?.template?.settings || {};\r\n\r\n    let proxy = config?.data?.proxy;\r\n\r\n    if (!proxy) {\r\n        return false;\r\n    }\r\n\r\n    proxy = decodeURIComponent(proxy); //decode the url in order to parse the template vars\r\n\r\n    //parse component template vars\r\n    if (config.data._templateVars && templateSettings) {\r\n        proxy = await TemplateString(proxy)\r\n            .parseComponentTemplateVarsAsync(templateSettings) // replaces component template vars with their IDs (this turns the string parses into an async parser)\r\n            .parse(config.data._templateVars).asyncResult; // replaces IDs with actual values then returns parser promise\r\n    }\r\n\r\n    //parse vault keys\r\n    proxy = await TemplateString(proxy).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n    //parse input variables and clean up the remaining unparsed values\r\n    proxy = TemplateString(proxy).parse(input).clean().result;\r\n\r\n    //URL will take care of encoding the url properly\r\n    const urlObj = new URL(proxy);\r\n\r\n    const proxyConfig: AxiosProxyConfig = {\r\n        host: urlObj.hostname,\r\n        port: parseInt(urlObj.port),\r\n        auth: urlObj.username\r\n            ? {\r\n                  username: urlObj.username,\r\n                  password: urlObj.password,\r\n              }\r\n            : undefined,\r\n    };\r\n\r\n    return proxyConfig;\r\n}\r\n","const mimeTypeCategories = {\r\n    binary: [\r\n        'image/',\r\n        'multipart/form-data',\r\n        'video/',\r\n        'application/msword',\r\n        'application/octet-stream',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/vnd.ms-powerpoint',\r\n        'application/vnd.oasis.opendocument.text',\r\n        'application/vnd.openxmlformats-officedocument',\r\n        'application/zip',\r\n        'application/x-7z-compressed',\r\n        'application/x-rar-compressed',\r\n        'application/x-tar',\r\n        'application/x-bzip',\r\n        'application/x-bzip2',\r\n        'application/x-gzip',\r\n        'application/vnd.android.package-archive',\r\n        'application/vnd.visio',\r\n        'application/x-deb',\r\n        'application/x-rpm',\r\n        'application/x-executable',\r\n        'font/ttf',\r\n        'font/otf',\r\n        'font/woff',\r\n        'font/woff2',\r\n        'model/',\r\n    ],\r\n    json: ['application/graphql', 'application/json', 'application/ld+json', 'application/vnd.api+json'],\r\n    text: [\r\n        'text/', //all starting with text/\r\n        'application/xml',\r\n        'application/xhtml+xml',\r\n        'application/csv',\r\n        'application/x-www-form-urlencoded',\r\n        'application/x-yaml',\r\n        'application/yaml',\r\n        'application/javascript',\r\n        'application/sql',\r\n        'application/rtf',\r\n    ],\r\n};\r\n\r\nexport default mimeTypeCategories;\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { isBinaryData, isBinaryMimeType } from '@sre/utils/data.utils';\r\nimport { AxiosResponse } from 'axios';\r\nimport mimeTypeCategories from './mimeTypeCategories';\r\n\r\nconst contentHandlers = {\r\n    json: parseJson,\r\n    text: parseText,\r\n    binary: parseBinary,\r\n};\r\n\r\nfunction parseJson(data) {\r\n    return JSON.parse(Buffer.from(data).toString('utf8'));\r\n}\r\n\r\nfunction parseText(data) {\r\n    return Buffer.from(data).toString('utf8');\r\n}\r\n\r\nasync function parseBinary(data, contentType, agentId) {\r\n    const binaryInput = BinaryInput.from(data, null, contentType);\r\n    const smythFile = await binaryInput.getJsonData(AccessCandidate.agent(agentId));\r\n\r\n    return smythFile;\r\n}\r\n\r\nexport async function parseArrayBufferResponse(response: AxiosResponse, agent: Agent): Promise<any> {\r\n    if (!response.data) {\r\n        return null;\r\n    }\r\n    const data = response.data;\r\n    const contentType = response.headers['content-type'];\r\n    const cleanContentType = contentType.split(';')[0];\r\n\r\n    // Try to find an exact match first,\r\n    let handlerType = Object.keys(mimeTypeCategories).find((type) => mimeTypeCategories[type].includes(cleanContentType));\r\n\r\n    // If no exact match, try to find a match for the first part of the handlerTypes, some handlers are generic like text/ in that case we check if the handler is a substring of the contentType\r\n    if (!handlerType) {\r\n        handlerType = Object.keys(mimeTypeCategories).find((type) => mimeTypeCategories[type].some((prefix) => cleanContentType.startsWith(prefix)));\r\n    }\r\n\r\n    const handler = contentHandlers[handlerType];\r\n\r\n    if (handler) {\r\n        return handler(data, contentType, agent.id);\r\n    }\r\n\r\n    // Fallback: if no content type matches then check if the data is binary\r\n    // If so then parse it as binary, otherwise parse it as text\r\n    if (isBinaryMimeType(contentType) || isBinaryData(data)) {\r\n        return parseBinary(data, contentType, agent.id);\r\n    } else {\r\n        return parseText(data);\r\n    }\r\n}\r\n","import axios, { AxiosRequestConfig } from 'axios';\r\nimport Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from '../Component.class';\r\nimport { REQUEST_CONTENT_TYPES } from '@sre/constants';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { parseHeaders } from './parseHeaders';\r\nimport { parseUrl } from './parseUrl';\r\nimport { parseData } from './parseData';\r\nimport { parseProxy } from './parseProxy';\r\nimport { parseArrayBufferResponse } from './ArrayBufferResponse.helper';\r\n\r\nexport default class APICall extends Component {\r\n    protected configSchema = Joi.object({\r\n        method: Joi.string().valid('GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD').required().label('Method'),\r\n        url: Joi.string()\r\n            .max(8192) /*.custom(isUrlValid, 'URL validation')*/\r\n            .required()\r\n            .label('URL'),\r\n        headers: Joi.string().allow('').label('Headers'),\r\n        contentType: Joi.string()\r\n            .valid('none', 'application/json', 'multipart/form-data', 'binary', 'application/x-www-form-urlencoded', 'text/plain', 'application/xml')\r\n            .label('Content-Type'),\r\n        body: Joi.string().allow('').label('Body'),\r\n        _templateSettings: Joi.object().allow(null).label('Template Settings'),\r\n        _templateVars: Joi.object().allow(null).label('Template Variables'),\r\n        proxy: Joi.string().allow('').label('Proxy'),\r\n        oauthService: Joi.string().allow('').label('OAuth Service'),\r\n        scope: Joi.string().allow('').label('Scope'),\r\n        authorizationURL: Joi.string().allow('').label('Authorization URL'),\r\n        tokenURL: Joi.string().allow('').label('Token URL'),\r\n        clientID: Joi.string().allow('').label('Client ID'),\r\n        clientSecret: Joi.string().allow('').label('Client Secret'),\r\n        oauth2CallbackURL: Joi.string().allow('').label('OAuth2 Callback URL'),\r\n        callbackURL: Joi.string().allow('').label('Callback URL'), // !TEMP: prevent validation error\r\n        requestTokenURL: Joi.string().allow('').label('Request Token URL'),\r\n        accessTokenURL: Joi.string().allow('').label('Access Token URL'),\r\n        userAuthorizationURL: Joi.string().allow('').label('User Authorization URL'),\r\n        consumerKey: Joi.string().allow('').label('Consumer Key'),\r\n        consumerSecret: Joi.string().allow('').label('Consumer Secret'),\r\n        oauth1CallbackURL: Joi.string().allow('').label('OAuth1 Callback URL'),\r\n        authenticate: Joi.string().allow('').label('Authenticate'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        const _error: any = undefined;\r\n        try {\r\n            logger.debug(`=== API Call Log ===`);\r\n\r\n            const method = config?.data?.method || 'get';\r\n\r\n            const reqConfig: AxiosRequestConfig = {};\r\n            reqConfig.method = method;\r\n\r\n            reqConfig.url = await parseUrl(input, config, agent);\r\n\r\n            reqConfig.data = await parseData(input, config, agent);\r\n\r\n            reqConfig.headers = await parseHeaders(input, config, agent);\r\n\r\n            reqConfig.proxy = await parseProxy(input, config, agent);\r\n\r\n            let Response: any = {};\r\n            let Headers: any = {};\r\n            let _error: any = undefined;\r\n            try {\r\n                logger.debug('Making API call', reqConfig);\r\n                // in order to handle binary data automatically, we need to set responseType to 'arraybuffer' for all requests, then parse the response data based on content-type\r\n                reqConfig.responseType = 'arraybuffer';\r\n\r\n                const response = await axios.request(reqConfig);\r\n\r\n                Response = await parseArrayBufferResponse(response, agent);\r\n                Headers = response.headers;\r\n            } catch (error) {\r\n                logger.debug(`Error making API call: ${error.message}`);\r\n                Headers = error?.response?.headers || {};\r\n                Response = await parseArrayBufferResponse(error.response, agent);\r\n                _error = error.message;\r\n            }\r\n\r\n            return { Response, Headers, _error, _debug: logger.output };\r\n        } catch (error) {\r\n            return { _error: error.message, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class VisionLLM extends Component {\r\n    protected configSchema = Joi.object({\r\n        prompt: Joi.string().required().label('Prompt'),\r\n        maxTokens: Joi.number().min(1).label('Maximum Tokens'),\r\n        model: Joi.string().max(200).required(),\r\n    });\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            logger.debug(`=== Vision LLM Log ===`);\r\n            const model: string = config.data.model || 'gpt-4-vision-preview';\r\n            const llmHelper: LLMHelper = LLMHelper.load(model);\r\n            // if the llm is undefined, then it means we removed the model from our system\r\n            if (!llmHelper.connector) {\r\n                return {\r\n                    _error: `The model '${model}' is not available. Please try a different one.`,\r\n                    _debug: logger.output,\r\n                };\r\n            }\r\n            let prompt: any = TemplateString(config.data.prompt).parse(input).result;\r\n\r\n            logger.debug(` Parsed prompt\\n`, prompt, '\\n');\r\n\r\n            //prompt = llmConnector.enhancePrompt(prompt, config);\r\n\r\n            //logger.debug(` Enhanced prompt \\n`, prompt, '\\n');\r\n\r\n            const fileSources = Array.isArray(input.Images) ? input.Images : [input.Images];\r\n\r\n            const response = await llmHelper.visionRequest(prompt, fileSources, config, agent);\r\n            logger.debug(` Enhanced prompt \\n`, prompt, '\\n');\r\n            // in case we have the response but it's empty string, undefined or null\r\n            if (!response) {\r\n                return { _error: ' LLM Error = Empty Response!', _debug: logger.output };\r\n            }\r\n\r\n            if (response?.error) {\r\n                logger.error(` LLM Error=${JSON.stringify(response.error)}`);\r\n\r\n                return { Reply: response?.data, _error: response?.error + ' ' + response?.details, _debug: logger.output };\r\n            }\r\n\r\n            const result = { Reply: response };\r\n\r\n            result['_debug'] = logger.output;\r\n\r\n            return result;\r\n        } catch (error: any) {\r\n            return { _error: error.message, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\n\r\nexport default class FSleep extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const _error = undefined;\r\n            const delay = parseInt(config.data.delay || 1);\r\n            const Output = input.Input;\r\n            logger.debug(`Sleeping for ${delay} seconds`);\r\n            await new Promise((resolve) => setTimeout(resolve, delay * 1000));\r\n            return { Output, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error processing data \\n${_error}\\n`);\r\n            return { hash: undefined, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        }\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport crypto from 'crypto';\r\n\r\nexport default class FHash extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const _error = undefined;\r\n\r\n            const data = input.Data;\r\n            const algorithm = config.data.algorithm;\r\n            const encoding = config.data.encoding;\r\n            logger.debug(` Generating hash using ${algorithm} algorithm and ${encoding} encoding`);\r\n\r\n            const hashAlgo = crypto.createHash(algorithm);\r\n            hashAlgo.update(data);\r\n\r\n            const Hash = hashAlgo.digest(encoding);\r\n            logger.debug(` Generated hash: ${Hash}`);\r\n            return { Hash, _error, _debug: logger.output };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error generating hash \\n${_error}\\n`);\r\n            return { hash: undefined, _error, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\n\r\nexport default class FEncDec extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const _error = undefined;\r\n\r\n            const data = input.Data;\r\n            const action = config.data.action || 'Encode';\r\n            const encoding = config.data.encoding;\r\n            logger.debug(`${encoding} ${action} data`);\r\n\r\n            const Output = action == 'Encode' ? Buffer.from(data).toString(encoding) : Buffer.from(data, encoding).toString('utf8');\r\n\r\n            return { Output, _error, _debug: logger.output };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error processing data \\n${_error}\\n`);\r\n            return { hash: undefined, _error, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\n\r\nexport default class FTimestamp extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const _error = undefined;\r\n            const format = config.data.format; //TODO set timestamp format\r\n            const Timestamp = Date.now();\r\n            logger.debug(`Timestamp : ${Timestamp}`);\r\n\r\n            return { Timestamp, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error processing data \\n${_error}\\n`);\r\n            return { hash: undefined, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        }\r\n    }\r\n}\r\n","// import Component from './Component.class';\r\nimport Joi from 'joi';\r\n// import { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { validateInteger } from '../utils';\r\nimport { jsonrepair } from 'jsonrepair';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { JSONContent } from '@sre/helpers/JsonContent.helper';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n// import { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\n\r\nclass LLMHelper {\r\n    static load(model: string) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}\r\n\r\nexport default class DataSourceLookup extends Component {\r\n    protected configSchema = Joi.object({\r\n        topK: Joi.string()\r\n            .custom(validateInteger({ min: 0 }), 'custom range validation')\r\n            .label('Result Count'),\r\n        model: Joi.string().valid('gpt-4o-mini', 'gpt-4', 'gpt-3.5-turbo', 'gpt-4', 'gpt-3.5-turbo-16k').required(),\r\n        prompt: Joi.string().max(30000).allow('').label('Prompt'),\r\n        postprocess: Joi.boolean().strict().required(),\r\n        includeMetadata: Joi.boolean().strict().optional(),\r\n        namespace: Joi.string().allow('').max(80).messages({\r\n            // Need to reserve 30 characters for the prefixed unique id\r\n            'string.max': `The length of the 'namespace' name must be 50 characters or fewer.`,\r\n        }),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const componentId = config.id;\r\n        const component = agent.components[componentId];\r\n        const teamId = agent.teamId;\r\n\r\n        const outputs = {};\r\n        for (let con of config.outputs) {\r\n            if (con.default) continue;\r\n            outputs[con.name] = '';\r\n        }\r\n\r\n        const namespace = config.data.namespace;\r\n        const model = config.data.model;\r\n        const prompt = config.data.prompt?.trim?.() || '';\r\n        const postprocess = config.data.postprocess;\r\n        const includeMetadata = config.data.includeMetadata || false;\r\n\r\n        const _input = typeof input.Query === 'string' ? input.Query : JSON.stringify(input.Query);\r\n\r\n        const topK = Math.max(config.data.topK, 50);\r\n\r\n        const vectorDB = ConnectorService.getVectorDBConnector();\r\n\r\n        let results: string[] | { content: string; metadata: any }[];\r\n        let _error;\r\n        try {\r\n            const response = await vectorDB.user(AccessCandidate.team(teamId)).search(namespace, _input, { topK, includeMetadata: true });\r\n            results = response.slice(0, config.data.topK).map((result) => ({\r\n                content: result.metadata?.text,\r\n                metadata: result.metadata,\r\n            }));\r\n\r\n            if (includeMetadata) {\r\n                // only show user-level metadata\r\n                results = results.map((result) => ({\r\n                    content: result.content,\r\n                    metadata: this.parseMetadata(\r\n                        result.metadata?.user || result.metadata?.metadata //* legacy user-specific metadata key [result.metadata?.metadata]\r\n                    ),\r\n                }));\r\n            } else {\r\n                results = results.map((result) => result.content);\r\n            }\r\n        } catch (error) {\r\n            _error = error.toString();\r\n        }\r\n\r\n        //is there a post processing LLM?\r\n\r\n        //TODO : better handling of context window exceeding max length\r\n        if (postprocess && prompt) {\r\n            const promises: any = [];\r\n            for (let result of results) {\r\n                const _prompt = TemplateString(prompt.replace(/{{result}}/g, JSON.stringify(result))).parse(input).result;\r\n                // promises.push(LLMHelper.componentLLMRequest(_prompt, model, {}, agent).catch((error) => result));\r\n                const llmHelper = LLMHelper.load(model);\r\n                // const req = llmHelper.promptRequest(_prompt, config, agent).catch((error) => ({ error: error }));\r\n                // promises.push(req);\r\n            }\r\n            results = await Promise.all(promises);\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (typeof results[i] === 'string') {\r\n                    // results[i] = parseJson(results[i]);\r\n                    results[i] = JSONContent(results[i] as string).tryParse();\r\n                }\r\n            }\r\n        }\r\n\r\n        const totalLength = JSON.stringify(results).length;\r\n        return {\r\n            Results: results,\r\n            _error,\r\n            _debug: `totalLength = ${totalLength}`,\r\n            //_debug: `Query: ${_input}. \\nTotal Length = ${totalLength} \\nResults: ${JSON.stringify(results)}`,\r\n        };\r\n    }\r\n\r\n    // private async checkIfTeamOwnsNamespace(teamId: string, namespaceId: string, token: string) {\r\n    //     try {\r\n    //         const res = await SmythAPIHelper.fromAuth({ token }).mwSysAPI.get(`/vectors/namespaces/${namespaceId}`);\r\n    //         if (res.data?.namespace?.teamId !== teamId) {\r\n    //             throw new Error(`Namespace does not exist`);\r\n    //         }\r\n    //         return true;\r\n    //     } catch (err) {\r\n    //         throw new Error(`Namespace does not exist`);\r\n    //     }\r\n    // }\r\n\r\n    private parseMetadata(metadata: any) {\r\n        try {\r\n            return JSON.parse(jsonrepair(metadata));\r\n        } catch (err) {\r\n            return metadata;\r\n        }\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { ACLAccessDeniedError, IAccessCandidate, TAccessLevel, TAccessResult, TAccessTicket } from '@sre/types/ACL.types';\r\nimport { ACL } from './AccessControl/ACL.class';\r\nimport { AccessCandidate } from './AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from './AccessControl/AccessRequest.class';\r\n\r\nconst console = Logger('SecureConnector');\r\n\r\nexport abstract class SecureConnector extends Connector {\r\n    public abstract name: string;\r\n\r\n    //this determines the access rights for the requested resource\r\n    //the connector should check if the resource exists or not\r\n    //if the resource exists we read its ACL and return it\r\n    //if the resource does not exist we return an write access ACL for the candidate\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n\r\n    public async start() {\r\n        console.info(`Starting ${this.name} connector ...`);\r\n    }\r\n\r\n    public async stop() {\r\n        console.info(`Stopping ${this.name} connector ...`);\r\n    }\r\n\r\n    protected async hasAccess(acRequest: AccessRequest) {\r\n        const aclHelper = await this.getResourceACL(acRequest.resourceId, acRequest.candidate);\r\n\r\n        //const aclHelper = ACLHelper.from(acl);\r\n\r\n        const exactAccess = aclHelper.checkExactAccess(acRequest);\r\n        if (exactAccess) return true;\r\n\r\n        // if the exact access is denied, we check if the candidate has a higher access\r\n        const ownerRequest = AccessRequest.clone(acRequest).setLevel(TAccessLevel.Owner);\r\n        const ownerAccess = aclHelper.checkExactAccess(ownerRequest);\r\n        if (ownerAccess) return true;\r\n\r\n        // if the exact access is denied, we check if the requested resource has a public access\r\n        const publicRequest = AccessRequest.clone(acRequest).setCandidate(AccessCandidate.public());\r\n        const publicAccess = aclHelper.checkExactAccess(publicRequest);\r\n        if (publicAccess) return true;\r\n\r\n        // if the public access is denied, we check if the candidate's team has access\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const teamId = await accountConnector.getCandidateTeam(acRequest.candidate);\r\n        const teamRequest = AccessRequest.clone(acRequest).setCandidate(AccessCandidate.team(teamId));\r\n        const teamAccess = aclHelper.checkExactAccess(teamRequest);\r\n        if (teamAccess) return true;\r\n\r\n        // if the team access is denied, we check if the team has a higher access\r\n        const teamOwnerRequest = AccessRequest.clone(teamRequest).setLevel(TAccessLevel.Owner);\r\n        const teamOwnerAccess = aclHelper.checkExactAccess(teamOwnerRequest);\r\n        if (teamOwnerAccess) return true;\r\n\r\n        return false;\r\n    }\r\n    public async getAccessTicket(resourceId: string, request: AccessRequest): Promise<TAccessTicket> {\r\n        const sysAcRequest = AccessRequest.clone(request).resource(resourceId);\r\n        const accessTicket = {\r\n            request,\r\n            access: (await this.hasAccess(sysAcRequest)) ? TAccessResult.Granted : TAccessResult.Denied,\r\n        };\r\n\r\n        return accessTicket as TAccessTicket;\r\n    }\r\n\r\n    //#region [ Decorators ]==========================\r\n\r\n    //AccessControl decorator\r\n    //This decorator will inject the access control logic into storage connector methods\r\n    // in order to work properly, the connector expects the resourceId to be the first argument and the access request to be the second argument\r\n\r\n    static AccessControl(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n        // Store the original method in a variable\r\n        const originalMethod = descriptor.value;\r\n\r\n        // Modify the descriptor's value to wrap the original method\r\n        descriptor.value = async function (...args: any[]) {\r\n            // Extract the method arguments\r\n            const [acRequest, resourceId] = args;\r\n\r\n            // Inject the access control logic\r\n            const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n            if (accessTicket.access !== TAccessResult.Granted) throw new ACLAccessDeniedError('Access Denied');\r\n\r\n            // Call the original method with the original arguments\r\n            return originalMethod.apply(this, args);\r\n        };\r\n\r\n        // Return the modified descriptor\r\n        return descriptor;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, IACL } from '@sre/types/ACL.types';\r\nimport { IVectorDataSourceDto, QueryOptions, Source, VectorDBMetadata, VectorsResultData } from '@sre/types/VectorDB.types';\r\nimport { Document } from '@langchain/core/documents';\r\n\r\nexport interface IVectorDBRequest {\r\n    search(namespace: string, query: string | number[], options?: QueryOptions): Promise<VectorsResultData>;\r\n    insert(namespace: string, source: IVectorDataSourceDto | IVectorDataSourceDto[]): Promise<string[]>;\r\n    delete(namespace: string, id: string | string[]): Promise<void>;\r\n    createNamespace(namespace: string): Promise<void>;\r\n    deleteNamespace(namespace: string): Promise<void>;\r\n    namespaceExists(namespace: string): Promise<boolean>;\r\n    listNamespaces(): Promise<string[]>;\r\n}\r\n\r\nexport abstract class VectorDBConnector extends SecureConnector {\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n    public abstract user(candidate: IAccessCandidate): IVectorDBRequest;\r\n\r\n    protected abstract search(\r\n        acRequest: AccessRequest,\r\n        namespace: string,\r\n        query: string | number[],\r\n        indexName: string,\r\n        options: QueryOptions\r\n    ): Promise<VectorsResultData>;\r\n\r\n    protected abstract insert(\r\n        acRequest: AccessRequest,\r\n        namespace: string,\r\n        source: IVectorDataSourceDto | IVectorDataSourceDto[],\r\n        indexName: string\r\n    ): Promise<string[]>;\r\n\r\n    protected abstract delete(acRequest: AccessRequest, namespace: string, id: string | string[], indexName: string): Promise<void>;\r\n\r\n    protected abstract createNamespace(acRequest: AccessRequest, namespace: string, indexName: string): Promise<void>;\r\n\r\n    protected abstract deleteNamespace(acRequest: AccessRequest, namespace: string, indexName: string): Promise<void>;\r\n\r\n    protected abstract listNamespaces(acRequest: AccessRequest): Promise<string[]>;\r\n\r\n    protected abstract namespaceExists(acRequest: AccessRequest, namespace: string): Promise<boolean>;\r\n\r\n    // protected abstract updateVectors(acRequest: AccessRequest, resourceId: string): Promise<void>;\r\n\r\n    // protected abstract getMetadata(acRequest: AccessRequest, resourceId: string): Promise<StorageMetadata | undefined>;\r\n    // protected abstract setMetadata(acRequest: AccessRequest, resourceId: string, metadata: StorageMetadata): Promise<void>;\r\n\r\n    // protected abstract getACL(acRequest: AccessRequest, resourceId: string): Promise<ACL | undefined>;\r\n    // protected abstract setACL(acRequest: AccessRequest, resourceId: string, acl: IACL): Promise<void>;\r\n\r\n    public static constructNsName(name: string, teamId: string) {\r\n        return `${teamId}::${name}`;\r\n    }\r\n\r\n    public static parseNsName(nsName: string) {\r\n        const parts = nsName.split('::');\r\n        if (parts.length != 2) return null;\r\n        return {\r\n            teamId: parts[0],\r\n            name: parts[1],\r\n        };\r\n    }\r\n}\r\n","import { OpenAIEmbeddings } from '@langchain/openai';\r\nimport { RecursiveCharacterTextSplitter } from '@langchain/textsplitters';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { VectorDBConnector } from './VectorDBConnector';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport crypto from 'crypto';\r\nimport { IStorageVectorDataSource, IVectorDataSourceDto, Source } from '@sre/types/VectorDB.types';\r\nimport { jsonrepair } from 'jsonrepair';\r\nimport { NKVConnector } from '../NKV.service/NKVConnector';\r\nimport { JSONContentHelper } from '@sre/helpers/JsonContent.helper';\r\n\r\nexport class VectorsHelper {\r\n    private _vectorDBconnector: VectorDBConnector;\r\n    private embeddingsProvider: OpenAIEmbeddings;\r\n    private _vectorDimention: number;\r\n    private _nkvConnector: NKVConnector;\r\n\r\n    constructor() {\r\n        this._vectorDBconnector = ConnectorService.getVectorDBConnector();\r\n        this.embeddingsProvider = new OpenAIEmbeddings();\r\n        if (this._vectorDimention && !isNaN(this._vectorDimention)) {\r\n            this.embeddingsProvider.dimensions = this._vectorDimention;\r\n        }\r\n        this._nkvConnector = ConnectorService.getNKVConnector();\r\n    }\r\n\r\n    public static load(options: { vectorDimention?: number } = {}) {\r\n        const instance = new VectorsHelper();\r\n        options.vectorDimention && instance.setVectorDimention(options.vectorDimention);\r\n\r\n        return instance;\r\n    }\r\n\r\n    public setVectorDimention(vectorDimention: number) {\r\n        this._vectorDimention = vectorDimention;\r\n    }\r\n\r\n    public static async chunkText(\r\n        text: string,\r\n        {\r\n            chunkSize = 4000,\r\n            chunkOverlap = 500,\r\n        }: {\r\n            chunkSize?: number;\r\n            chunkOverlap?: number;\r\n        } = {}\r\n    ): Promise<string[]> {\r\n        const textSplitter = new RecursiveCharacterTextSplitter({\r\n            chunkSize,\r\n            chunkOverlap,\r\n        });\r\n        let output = await textSplitter.splitText(text);\r\n\r\n        return output;\r\n    }\r\n\r\n    public async createDatasource(\r\n        text: string,\r\n        namespace: string,\r\n        {\r\n            teamId,\r\n            metadata,\r\n            chunkSize = 4000,\r\n            chunkOverlap = 500,\r\n            label,\r\n            id,\r\n        }: {\r\n            teamId?: string;\r\n            metadata?: Record<string, string>;\r\n            chunkSize?: number;\r\n            chunkOverlap?: number;\r\n            label?: string;\r\n            id?: string;\r\n        } = {}\r\n    ) {\r\n        const formattedNs = VectorDBConnector.constructNsName(namespace, teamId);\r\n        const chunkedText = await VectorsHelper.chunkText(text, { chunkSize, chunkOverlap });\r\n        const ids = Array.from({ length: chunkedText.length }, (_, i) => crypto.randomUUID());\r\n        const source: IVectorDataSourceDto[] = chunkedText.map((doc, i) => {\r\n            return {\r\n                id: ids[i],\r\n                source: doc,\r\n                metadata: {\r\n                    user: VectorsHelper.stringifyMetadata(metadata), // user-speficied metadata\r\n                },\r\n            };\r\n        });\r\n        const _vIds = await this._vectorDBconnector.user(AccessCandidate.team(teamId)).insert(namespace, source);\r\n        const dsId = id || crypto.randomUUID();\r\n\r\n        const dsData: IStorageVectorDataSource = {\r\n            namespaceId: formattedNs,\r\n            teamId,\r\n            name: label || 'Untitled',\r\n            metadata: VectorsHelper.stringifyMetadata(metadata),\r\n            text,\r\n            embeddingIds: _vIds,\r\n        };\r\n        // const url = `smythfs://${teamId}.team/_datasources/${dsId}.json`;\r\n        // await SmythFS.Instance.write(url, JSON.stringify(dsData), AccessCandidate.team(teamId));\r\n        await this._nkvConnector\r\n            .user(AccessCandidate.team(teamId))\r\n            .set(`vectorDB:pinecone:namespaces:${formattedNs}:datasources`, dsId, JSON.stringify(dsData));\r\n        return dsId;\r\n    }\r\n\r\n    public async listDatasources(teamId: string, namespace: string) {\r\n        const formattedNs = VectorDBConnector.constructNsName(namespace, teamId);\r\n        return (await this._nkvConnector.user(AccessCandidate.team(teamId)).list(`vectorDB:pinecone:namespaces:${formattedNs}:datasources`)).map(\r\n            (ds) => {\r\n                return {\r\n                    id: ds.key,\r\n                    data: JSONContentHelper.create(ds.data?.toString()).tryParse() as IStorageVectorDataSource,\r\n                };\r\n            }\r\n        );\r\n    }\r\n\r\n    public async getDatasource(teamId: string, namespace: string, dsId: string) {\r\n        const formattedNs = VectorDBConnector.constructNsName(namespace, teamId);\r\n        return JSONContentHelper.create(\r\n            (\r\n                await this._nkvConnector.user(AccessCandidate.team(teamId)).get(`vectorDB:pinecone:namespaces:${formattedNs}:datasources`, dsId)\r\n            )?.toString()\r\n        ).tryParse() as IStorageVectorDataSource;\r\n    }\r\n\r\n    public async deleteDatasource(teamId: string, namespace: string, dsId: string) {\r\n        const formattedNs = VectorDBConnector.constructNsName(namespace, teamId);\r\n        // const url = `smythfs://${teamId}.team/_datasources/${dsId}.json`;\r\n        // await SmythFS.Instance.delete(url, AccessCandidate.team(teamId));\r\n        let ds: IStorageVectorDataSource = JSONContentHelper.create(\r\n            (\r\n                await this._nkvConnector.user(AccessCandidate.team(teamId)).get(`vectorDB:pinecone:namespaces:${formattedNs}:datasources`, dsId)\r\n            )?.toString()\r\n        ).tryParse();\r\n\r\n        if (!ds || typeof ds !== 'object') {\r\n            throw new Error(`Data source not found with id: ${dsId}`);\r\n        }\r\n\r\n        await this._vectorDBconnector.user(AccessCandidate.team(teamId)).delete(namespace, ds.embeddingIds || []);\r\n\r\n        this._nkvConnector.user(AccessCandidate.team(teamId)).delete(`vectorDB:pinecone:namespaces:${formattedNs}:datasources`, dsId);\r\n    }\r\n\r\n    public async embedText(text: string) {\r\n        return this.embeddingsProvider.embedQuery(text);\r\n    }\r\n\r\n    public async embedTexts(texts: string[]) {\r\n        return this.embeddingsProvider.embedDocuments(texts);\r\n    }\r\n\r\n    public static stringifyMetadata(metadata: any) {\r\n        try {\r\n            return jsonrepair(JSON.stringify(metadata));\r\n        } catch (err) {\r\n            return metadata;\r\n        }\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport Joi from 'joi';\r\nimport { validateCharacterSet } from '@sre/utils/validation.utils';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { isUrl, detectURLSourceType } from '../utils';\r\nimport { SmythFS } from '@sre/IO/Storage.service/SmythFS.class';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { VectorsHelper } from '@sre/IO/VectorDB.service/Vectors.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { IStorageVectorDataSource } from '@sre/types/VectorDB.types';\r\n\r\nexport default class DataSourceIndexer extends Component {\r\n    private MAX_ALLOWED_URLS_PER_INPUT = 20;\r\n    protected configSchema = Joi.object({\r\n        namespace: Joi.string().max(50).allow(''),\r\n        id: Joi.string().custom(validateCharacterSet, 'id custom validation').allow('').label('source identifier'),\r\n        name: Joi.string().max(50).allow('').label('label'),\r\n        metadata: Joi.string().allow(null).allow('').max(10000).label('metadata'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const teamId = agent.teamId;\r\n        const agentId = agent.id;\r\n        let debugOutput = agent.agentRuntime?.debug ? '== Source Indexer Log ==\\n' : null;\r\n\r\n        try {\r\n            const _config = {\r\n                ...config.data,\r\n                name: TemplateString(config.data.name).parse(input).result,\r\n                id: TemplateString(config.data.id).parse(input).result,\r\n                metadata: TemplateString(config.data.metadata).parse(input).result,\r\n            };\r\n\r\n            const outputs = {};\r\n            for (let con of config.outputs) {\r\n                if (con.default) continue;\r\n                outputs[con.name] = con?.description ? `<${con?.description}>` : '';\r\n            }\r\n\r\n            const namespaceId = _config.namespace;\r\n            debugOutput += `[Selected namespace id] \\n${namespaceId}\\n\\n`;\r\n\r\n            const vectorDB = ConnectorService.getVectorDBConnector();\r\n            const nsExists = vectorDB.user(AccessCandidate.team(teamId)).namespaceExists(namespaceId);\r\n            if (!nsExists) {\r\n                throw new Error(`Namespace ${namespaceId} does not exist`);\r\n            }\r\n\r\n            const inputSchema = this.validateInput(input);\r\n            if (inputSchema.error) {\r\n                throw new Error(`Input validation error: ${inputSchema.error}\\n EXITING...`);\r\n            }\r\n\r\n            const providedId = _config.id;\r\n            // const isAutoId = _config.isAutoId;\r\n            const idRegex = /^[a-zA-Z0-9\\-\\_\\.]+$/;\r\n\r\n            if (!providedId) {\r\n                // Assign a new ID if it's set to auto-generate or not provided\r\n                // _config.id = crypto.randomBytes(16).toString('hex');\r\n                throw new Error(`Id is required`);\r\n            } else if (!idRegex.test(providedId)) {\r\n                // Validate the provided ID if it's not auto-generated\r\n                throw new Error(`Invalid id. Accepted characters: 'a-z', 'A-Z', '0-9', '-', '_', '.'`);\r\n            }\r\n\r\n            // check if the datasource already exists with the same id\r\n            // await this.checkForRecordDuplicate(dsId, token);\r\n\r\n            let indexRes: any = null;\r\n            let parsedUrlArray: string[] | null = null;\r\n\r\n            //! DISABLE URL ARRAY PARSING FOR NOW UNTIL WE HAVE A GOOD WAY TO HANDLE BULK INDEXING\r\n            // if ((parsedUrlArray = parseUrlArray(inputSchema.value.Source))) {\r\n            //     debugOutput += `STEP: Parsing input as url array\\n\\n`;\r\n            //     if (parsedUrlArray.length > this.MAX_ALLOWED_URLS_PER_INPUT) {\r\n            //         throw new Error(`Too many urls in input. Max allowed: ${this.MAX_ALLOWED_URLS_PER_INPUT}`);\r\n            //     }\r\n\r\n            //     for (let url of parsedUrlArray) {\r\n            //         indexRes = await this.addDSFromUrl({\r\n            //             teamId,\r\n            //             namespaceId,\r\n            //             dsId, // WILL OVERRIDE EACH OTHER\r\n            //             type: detectURLSourceType(url),\r\n            //             url,\r\n            //             name: _config.name || 'Untitled',\r\n            //         });\r\n\r\n            //         debugOutput += `STEP: Created datasource for url: ${url}\\n\\n`;\r\n            //     }\r\n            // } else\r\n\r\n            const dsId = DataSourceIndexer.genDsId(providedId, teamId, namespaceId);\r\n\r\n            if (isUrl(inputSchema.value.Source)) {\r\n                debugOutput += `STEP: Parsing input as url\\n\\n`;\r\n                throw new Error('URLs are not supported yet');\r\n                // indexRes = await this.addDSFromUrl({\r\n                //     teamId,\r\n                //     namespaceId,\r\n                //     dsId,\r\n                //     type: detectURLSourceType(inputSchema.value.Source),\r\n                //     url: inputSchema.value.Source,\r\n                //     name: _config.name || 'Untitled',\r\n                //     metadata: _config.metadata || null,\r\n                // });\r\n            } else {\r\n                debugOutput += `STEP: Parsing input as text\\n\\n`;\r\n                indexRes = await this.addDSFromText({\r\n                    teamId,\r\n                    namespaceId: namespaceId,\r\n                    text: inputSchema.value.Source,\r\n                    name: _config.name || 'Untitled',\r\n                    metadata: _config.metadata || null,\r\n                    sourceId: dsId,\r\n                });\r\n            }\r\n\r\n            debugOutput += `Created datasource successfully\\n\\n`;\r\n\r\n            return {\r\n                _debug: debugOutput,\r\n                Success: {\r\n                    result: indexRes?.data?.dataSource || true,\r\n                    id: _config.id,\r\n                },\r\n                // _error,\r\n            };\r\n        } catch (err: any) {\r\n            debugOutput += `Error: ${err?.message || \"Couldn't index data source\"}\\n\\n`;\r\n            return {\r\n                _debug: debugOutput,\r\n                _error: err?.message || \"Couldn't index data source\",\r\n            };\r\n        }\r\n    }\r\n\r\n    validateInput(input: any) {\r\n        return Joi.object({\r\n            Source: Joi.any().required(),\r\n        })\r\n            .unknown(true)\r\n            .validate(input);\r\n    }\r\n\r\n    private async addDSFromText({ teamId, sourceId, namespaceId, text, name, metadata }) {\r\n        const id = await VectorsHelper.load().createDatasource(text, namespaceId, {\r\n            teamId,\r\n            metadata,\r\n            id: sourceId,\r\n            label: name,\r\n        });\r\n\r\n        return id;\r\n    }\r\n\r\n    public static genDsId(providedId: string, teamId: string, namespaceId: string) {\r\n        return `${teamId}::${namespaceId}::${providedId}`;\r\n    }\r\n\r\n    private async addDSFromUrl({ teamId, namespaceId, dsId, type, url, name, metadata }) {\r\n        throw new Error('URLs are not supported yet');\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport Joi from 'joi';\r\nimport { validateCharacterSet } from '../utils';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { SmythFS } from '@sre/IO/Storage.service/SmythFS.class';\r\nimport { JSONContent, JSONContentHelper } from '@sre/helpers/JsonContent.helper';\r\nimport { IStorageVectorDataSource } from '@sre/types/VectorDB.types';\r\nimport { VectorsHelper } from '@sre/IO/VectorDB.service/Vectors.helper';\r\nimport DataSourceIndexer from './DataSourceIndexer.class';\r\n\r\nexport default class DataSourceCleaner extends Component {\r\n    protected configSchema = Joi.object({\r\n        namespaceId: Joi.string().max(50).allow('').label('namespace'),\r\n        id: Joi.string().custom(validateCharacterSet, 'custom validation characterSet').allow('').label('source identifier'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const teamId = agent.teamId;\r\n        const agentId = agent.id;\r\n        let debugOutput = agent.agentRuntime?.debug ? '== Source Indexer Log ==\\n' : null;\r\n\r\n        try {\r\n            const configSchema = this.validateConfigData(config.data);\r\n            if (configSchema.error) {\r\n                throw new Error(`Config data validation error: ${configSchema.error}\\n EXITING...`);\r\n            }\r\n\r\n            const outputs = {};\r\n            for (let con of config.outputs) {\r\n                if (con.default) continue;\r\n                outputs[con.name] = con?.description ? `<${con?.description}>` : '';\r\n            }\r\n\r\n            const inputSchema = this.validateInput(input);\r\n            if (inputSchema.error) {\r\n                throw new Error(`Input validation error: ${inputSchema.error}\\n EXITING...`);\r\n            }\r\n\r\n            const namespaceId = configSchema.value.namespaceId;\r\n            const vectorDB = ConnectorService.getVectorDBConnector();\r\n            const nsExists = vectorDB.user(AccessCandidate.team(teamId)).namespaceExists(namespaceId);\r\n            if (!nsExists) {\r\n                throw new Error(`Namespace ${namespaceId} does not exist`);\r\n            }\r\n\r\n            const providedId = TemplateString(config.data.id).parse(input).result;\r\n            const idRegex = /^[a-zA-Z0-9\\-\\_\\.]+$/;\r\n            if (!idRegex.test(providedId)) {\r\n                throw new Error(`Invalid id. Accepted characters: 'a-z', 'A-Z', '0-9', '-', '_', '.'`);\r\n            }\r\n            debugOutput += `Searching for data source with id: ${providedId}\\n`;\r\n\r\n            const dsId = DataSourceIndexer.genDsId(providedId, teamId, namespaceId);\r\n\r\n            await VectorsHelper.load().deleteDatasource(teamId, namespaceId, dsId);\r\n\r\n            debugOutput += `Deleted data source with id: ${providedId}\\n`;\r\n\r\n            return {\r\n                _debug: debugOutput,\r\n                Success: true,\r\n                // _error,\r\n            };\r\n        } catch (err: any) {\r\n            debugOutput += `Failed to delete data source: \\n Error: ${err?.message}\\n`;\r\n\r\n            return {\r\n                _debug: debugOutput,\r\n                _error: err?.message || \"Couldn't delete data source\",\r\n            };\r\n        }\r\n    }\r\n\r\n    validateInput(input: any) {\r\n        return Joi.object({}).unknown(true).validate(input);\r\n    }\r\n\r\n    validateConfigData(data: any) {\r\n        return Joi.object({\r\n            namespaceId: Joi.string().required(),\r\n            id: Joi.string().optional().allow('').allow(null),\r\n        })\r\n            .unknown(true)\r\n            .validate(data);\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class JSONFilter extends Component {\r\n    protected configSchema = Joi.object({\r\n        fields: Joi.string().max(30000).allow('').label('Prompt'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        logger.debug(`=== JSONFilter Log ===`);\r\n        let Output = {};\r\n        let _error = null;\r\n        try {\r\n            const componentId = config.id;\r\n            const fields = config.data.fields;\r\n            const obj = input.Input;\r\n\r\n            Output = filterFields(obj, fields);\r\n            logger.debug(`Output filtered`);\r\n        } catch (error: any) {\r\n            _error = error;\r\n            logger.error(` JSONFilter Error \\n ${error.toString()}`);\r\n        }\r\n        return { Output, _error, _debug: logger.output };\r\n    }\r\n}\r\n\r\nfunction filterFields(obj, fields) {\r\n    const fieldList = fields?.split(',').map((field) => field.trim());\r\n\r\n    function filterObject(obj) {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(filterObject);\r\n        } else if (obj !== null && typeof obj === 'object') {\r\n            return Object.keys(obj)\r\n                .filter((key) => fieldList.includes(key))\r\n                .reduce((acc, key) => {\r\n                    acc[key] = filterObject(obj[key]);\r\n                    return acc;\r\n                }, {});\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    return filterObject(obj);\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class LogicAND extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        const result: any = { Output: true };\r\n\r\n        for (let cfgInput of config.inputs) {\r\n            // check if all inputs are set (expected inputs are in \"config.inputs\" actual inputs are in \"input\")\r\n            if (!input[cfgInput.name]) {\r\n                result.Output = undefined;\r\n                break;\r\n            }\r\n        }\r\n\r\n        result.Verified = result.Output !== undefined;\r\n        result.Unverified = !result.Verified;\r\n        if (!result.Verified) delete result.Verified;\r\n        if (!result.Unverified) delete result.Unverified;\r\n        return result;\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class LogicOR extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const result: any = { Output: undefined };\r\n        console.log(input);\r\n        console.log(config);\r\n        for (let cfgInput of config.inputs) {\r\n            // check if one of the inputs are set (expected inputs are in \"config.inputs\" actual inputs are in \"input\")\r\n            if (input[cfgInput.name]) {\r\n                result.Output = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        result.Verified = result.Output !== undefined;\r\n        result.Unverified = !result.Verified;\r\n        if (!result.Verified) delete result.Verified;\r\n        if (!result.Unverified) delete result.Unverified;\r\n\r\n        return result;\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class LogicXOR extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const result: any = { Output: undefined };\r\n        let trueCount = 0;\r\n\r\n        for (let cfgInput of config.inputs) {\r\n            // counts the number of set inputs\r\n            if (input[cfgInput.name]) {\r\n                trueCount++;\r\n            }\r\n        }\r\n        // checks if only one input is set, to trigger output\r\n        if (trueCount === 1) {\r\n            result.Output = true;\r\n        }\r\n\r\n        result.Verified = result.Output !== undefined;\r\n        result.Unverified = !result.Verified;\r\n        if (!result.Verified) delete result.Verified;\r\n        if (!result.Unverified) delete result.Unverified;\r\n\r\n        return result;\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class LogicAtLeast extends Component {\r\n    protected configSchema = Joi.object({\r\n        // TODO (Forhad): Need to check if min and max work instead of the custom validateInteger\r\n        minSetInputs: Joi.string()\r\n            .custom(validateInteger({ min: 0, max: 9 }), 'custom range validation')\r\n            .label('Minimum Inputs'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        const result: any = { Output: undefined };\r\n\r\n        if (typeof config.data.minSetInputs !== 'string' || config.data.minSetInputs.trim() === '' || isNaN(Number(config.data.minSetInputs))) {\r\n            return result;\r\n        }\r\n\r\n        const minSetInputs = Number(config.data.minSetInputs);\r\n        if (config.inputs.length < minSetInputs) {\r\n            return result;\r\n        }\r\n\r\n        let trueCount = 0;\r\n        for (let cfgInput of config.inputs) {\r\n            if (input[cfgInput.name]) {\r\n                trueCount++;\r\n            }\r\n        }\r\n\r\n        if (trueCount >= minSetInputs) {\r\n            result.Output = true;\r\n        }\r\n\r\n        result.Verified = result.Output !== undefined;\r\n        result.Unverified = !result.Verified;\r\n        if (!result.Verified) delete result.Verified;\r\n        if (!result.Unverified) delete result.Unverified;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface RangeValidationArgs {\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\nfunction validateInteger(args: RangeValidationArgs) {\r\n    return (value: string, helpers: any) => {\r\n        const numValue = Number(value);\r\n        const fieldName = helpers.schema._flags.label || helpers.state.path[helpers.state.path.length - 1];\r\n\r\n        // Check if the value is a number\r\n        if (isNaN(numValue)) {\r\n            throw new Error(`The value for '${fieldName}' must be a number`);\r\n        }\r\n\r\n        // Range validations\r\n        if (args.min !== undefined && args.max !== undefined) {\r\n            if (numValue < args.min || numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be from ${args.min} to ${args.max}`);\r\n            }\r\n        } else if (args.min !== undefined) {\r\n            if (numValue < args.min) {\r\n                throw new Error(`The value for '${fieldName}' must be greater or equal to ${args.min}`);\r\n            }\r\n        } else if (args.max !== undefined) {\r\n            if (numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be less or equal to ${args.max}`);\r\n            }\r\n        }\r\n\r\n        return value; // Value is valid\r\n    };\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\n\r\nexport default class LogicAtMost extends Component {\r\n    protected configSchema = Joi.object({\r\n        // TODO (Forhad): Need to check if min and max work instead of the custom validateInteger\r\n        maxSetInputs: Joi.string()\r\n            .custom(validateInteger({ min: 0, max: 9 }), 'custom range validation')\r\n            .label('Maximum Inputs'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const result: any = { Output: undefined };\r\n\r\n        if (typeof config.data.maxSetInputs !== 'string' || config.data.maxSetInputs.trim() === '' || isNaN(Number(config.data.maxSetInputs))) {\r\n            return result;\r\n        }\r\n\r\n        const maxSetInputs = Number(config.data.maxSetInputs);\r\n        if (config.inputs.length < maxSetInputs) {\r\n            return result;\r\n        }\r\n\r\n        let trueCount = 0;\r\n        for (let cfgInput of config.inputs) {\r\n            if (input[cfgInput.name]) {\r\n                trueCount++;\r\n                if (trueCount > maxSetInputs) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (trueCount <= maxSetInputs) {\r\n            result.Output = true;\r\n        }\r\n\r\n        result.Verified = result.Output !== undefined;\r\n        result.Unverified = !result.Verified;\r\n        if (!result.Verified) delete result.Verified;\r\n        if (!result.Unverified) delete result.Unverified;\r\n\r\n        return result;\r\n    }\r\n}\r\ninterface RangeValidationArgs {\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\nfunction validateInteger(args: RangeValidationArgs) {\r\n    return (value: string, helpers: any) => {\r\n        const numValue = Number(value);\r\n        const fieldName = helpers.schema._flags.label || helpers.state.path[helpers.state.path.length - 1];\r\n\r\n        // Check if the value is a number\r\n        if (isNaN(numValue)) {\r\n            throw new Error(`The value for '${fieldName}' must be a number`);\r\n        }\r\n\r\n        // Range validations\r\n        if (args.min !== undefined && args.max !== undefined) {\r\n            if (numValue < args.min || numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be from ${args.min} to ${args.max}`);\r\n            }\r\n        } else if (args.min !== undefined) {\r\n            if (numValue < args.min) {\r\n                throw new Error(`The value for '${fieldName}' must be greater or equal to ${args.min}`);\r\n            }\r\n        } else if (args.max !== undefined) {\r\n            if (numValue > args.max) {\r\n                throw new Error(`The value for '${fieldName}' must be less or equal to ${args.max}`);\r\n            }\r\n        }\r\n\r\n        return value; // Value is valid\r\n    };\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport AgentRequest from '@sre/AgentManager/AgentRequest.class';\r\nimport AgentSettings from '@sre/AgentManager/AgentSettings.class';\r\nimport { TAgentProcessParams } from '@sre/types/Agent.types';\r\nimport { uid } from '../utils';\r\n\r\nimport { CLIConnector } from '@sre/IO/CLI.service/CLIConnector';\r\nimport * as FileType from 'file-type';\r\nimport fs from 'fs';\r\nimport mime from 'mime';\r\nimport path from 'path';\r\nimport { ConnectorService } from './ConnectorsService';\r\nexport class AgentProcess {\r\n    public agent: Agent;\r\n\r\n    private _loadPromise: Promise<any>;\r\n\r\n    private constructor(private agentData: any) {\r\n        this.initAgent(agentData);\r\n    }\r\n    private async initAgent(agentData: any) {\r\n        let data;\r\n        let agentId;\r\n\r\n        if (typeof agentData === 'object') {\r\n            data = agentData;\r\n            if (data.components && data.connections) {\r\n                data = { data, version: '1.0' };\r\n            }\r\n\r\n            agentId = data.data.id || 'tmp-' + uid();\r\n        } else {\r\n            const jsonRegex = /^{.*}$/g;\r\n            const jsonData = agentData.match(jsonRegex)?.[0];\r\n\r\n            const idRegex = /^[a-zA-Z0-9\\-]+$/g;\r\n            agentId = agentData.match(idRegex)?.[0];\r\n\r\n            //We are loading from an agentId\r\n            if (agentId) {\r\n                const agentDataConnector = ConnectorService.getAgentDataConnector();\r\n                data = await agentDataConnector.getAgentData(agentId, 'latest');\r\n            }\r\n\r\n            //we are loading an agent from provided data\r\n            if (!data && jsonData) {\r\n                data = JSON.parse(jsonData);\r\n                //generate an agentId if not provided\r\n                agentId = data.id || 'tmp-' + uid();\r\n\r\n                if (data.components && data.connections) {\r\n                    data = { data, version: '1.0' };\r\n                }\r\n            }\r\n        }\r\n\r\n        const agentSettings = new AgentSettings(agentId);\r\n        this.agent = new Agent(agentId, data, agentSettings);\r\n    }\r\n\r\n    public async ready() {\r\n        if (this._loadPromise) {\r\n            return this._loadPromise;\r\n        }\r\n\r\n        return (this._loadPromise = new Promise((resolve) => {\r\n            let maxWait = 10000;\r\n            //wait for agent to be set\r\n            const itv = setInterval(() => {\r\n                if (this.agent) {\r\n                    clearInterval(itv);\r\n                    resolve(true);\r\n                }\r\n                maxWait -= 100;\r\n                if (maxWait <= 0) {\r\n                    clearInterval(itv);\r\n                    resolve(false);\r\n                }\r\n            }, 100);\r\n        }));\r\n    }\r\n\r\n    public static load(agentData: any) {\r\n        const agentProcess = new AgentProcess(agentData);\r\n        return agentProcess;\r\n    }\r\n\r\n    public async run(reqConfig: TAgentProcessParams | Array<string> | AgentRequest) {\r\n        await this.ready();\r\n        if (!this.agent) throw new Error('Failed to load agent');\r\n        let request: AgentRequest = this.parseReqConfig(reqConfig);\r\n\r\n        this.agent.setRequest(request);\r\n\r\n        const pathMatches = request.path.match(/(^\\/v[0-9]+\\.[0-9]+?)?(\\/api\\/(.+)?)/);\r\n        if (!pathMatches || !pathMatches[2]) {\r\n            return { status: 404, data: { error: 'Endpoint not found' } };\r\n        }\r\n        const endpointPath = pathMatches[2];\r\n        const input = request.method == 'GET' ? request.query : request.body;\r\n        const result: any = await this.agent.process(endpointPath, input).catch((error) => ({ error: error.message }));\r\n\r\n        return { data: result };\r\n    }\r\n\r\n    public reset() {\r\n        //the current version of agent cannot be used to run multiple requests\r\n        //as a workaround we provide this function to reset AgentProcess state by generating a new Agent\r\n        //TODO: refactor Agent.class in order to allow multiple consecutive requests running\r\n        this.initAgent(this.agentData);\r\n    }\r\n\r\n    private parseReqConfig(reqConfig: TAgentProcessParams | Array<string> | AgentRequest): AgentRequest {\r\n        if (reqConfig instanceof AgentRequest) return reqConfig;\r\n        if (Array.isArray(reqConfig)) return this.parseCLI(reqConfig);\r\n        return new AgentRequest(reqConfig);\r\n    }\r\n\r\n    private parseCLI(argList: Array<string>): AgentRequest {\r\n        const cliConnector: CLIConnector = ConnectorService.getCLIConnector();\r\n        const methods = ['get', 'post', 'put', 'delete', 'patch', 'head', 'options'];\r\n        const cli: any = cliConnector.parse(argList, ['endpoint', 'post', 'get', 'put', 'delete', 'patch', 'head', 'options', 'headers', 'session']);\r\n\r\n        const usedMethod = methods.find((method) => cli[method]);\r\n\r\n        const req: AgentRequest = new AgentRequest();\r\n\r\n        req.method = usedMethod?.toUpperCase() || 'GET';\r\n        req.body = {};\r\n        req.query = {};\r\n\r\n        switch (usedMethod) {\r\n            case 'get':\r\n            case 'delete':\r\n            case 'head':\r\n            case 'options':\r\n                req.query = cli[usedMethod];\r\n                break;\r\n            case 'post':\r\n            case 'put':\r\n            case 'patch':\r\n                req.body = cli[usedMethod];\r\n                break;\r\n        }\r\n\r\n        req.path = `/api/${cli.endpoint}`;\r\n        req.params = cli.endpoint?.split('/');\r\n\r\n        req.headers = cli.headers || {};\r\n        //convert all keys to lowercase\r\n        for (let key in req.headers) {\r\n            req.headers[key.toLowerCase()] = req.headers[key];\r\n            delete req.headers[key];\r\n        }\r\n\r\n        req.sessionID = cli.session || uid();\r\n\r\n        req.files = [];\r\n        if (req.body) {\r\n            for (let entry in req.body) {\r\n                let value = req.body[entry];\r\n                const filePath = path.join(process.cwd(), value);\r\n                const fileName = path.basename(filePath);\r\n                if (!fs.existsSync(filePath)) continue;\r\n\r\n                //read the file and create a file object\r\n\r\n                try {\r\n                    // Read the file content\r\n                    const fileBuffer = fs.readFileSync(filePath);\r\n                    const ext: any = fileName.split('.').pop();\r\n\r\n                    const fileObj = {\r\n                        fieldname: entry,\r\n                        originalname: fileName,\r\n                        buffer: fileBuffer,\r\n                        mimetype: mime.getType(ext) || 'application/octet-stream',\r\n                    };\r\n\r\n                    delete req.body[entry];\r\n                    req.files.push(fileObj);\r\n\r\n                    // Try to determine the MIME type from the file content\r\n                    FileType.fileTypeFromBuffer(fileBuffer).then((fileType) => {\r\n                        if (fileType) {\r\n                            fileObj.mimetype = fileType.mime;\r\n                        }\r\n                    });\r\n                } catch (error) {\r\n                    console.warn('Coud not read file', filePath, error.message);\r\n                }\r\n            }\r\n        }\r\n\r\n        return req;\r\n    }\r\n\r\n    public async post(path: string, input?: any, headers?: any) {\r\n        return this.run({ method: 'POST', path, body: input || {}, headers });\r\n    }\r\n\r\n    public async get(path: string, query?: any, headers?: any) {\r\n        return this.run({ method: 'GET', path, query, headers });\r\n    }\r\n}\r\n","import { encode, encodeChat } from 'gpt-tokenizer';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { ChatMessage } from 'gpt-tokenizer/esm/GptEncoding';\r\n\r\n//content, name, role, tool_call_id, tool_calls, function_call\r\nexport class LLMContext {\r\n    private _systemPrompt: string = '';\r\n    public get systemPrompt() {\r\n        return this._systemPrompt;\r\n    }\r\n    public set systemPrompt(systemPrompt) {\r\n        this._systemPrompt = systemPrompt;\r\n    }\r\n    private _llmHelper: LLMHelper;\r\n    public contextLength: number;\r\n    public get llmHelper() {\r\n        return this._llmHelper;\r\n    }\r\n\r\n    public get messages() {\r\n        return this._messages;\r\n    }\r\n    /**\r\n     *\r\n     * @param source a messages[] object, or smyth file system uri (smythfs://...)\r\n     */\r\n    constructor(private _model, _systemPrompt: string = '', private _messages: any[] = []) {\r\n        this._systemPrompt = _systemPrompt;\r\n        //TODO:allow configuring a storage service\r\n        this._llmHelper = LLMHelper.load(this._model);\r\n    }\r\n\r\n    public push(...message: any[]) {\r\n        this._messages.push(...message);\r\n\r\n        //TODO: persist to storage\r\n    }\r\n    public addUserMessage(content: string) {\r\n        this.push({ role: 'user', content });\r\n    }\r\n    public addAssistantMessage(content: string) {\r\n        this.push({ role: 'assistant', content });\r\n    }\r\n\r\n    public getContextWindow(maxTokens: number, maxOutputTokens: number = 256): any[] {\r\n        //TODO: handle non key accounts (limit tokens)\r\n        const maxModelContext = this._llmHelper?.modelInfo?.keyOptions?.tokens || this._llmHelper?.modelInfo?.tokens || 256;\r\n        let maxInputContext = Math.min(maxTokens, maxModelContext);\r\n\r\n        if (maxInputContext + maxOutputTokens > maxModelContext) {\r\n            maxInputContext -= maxInputContext + maxOutputTokens - maxModelContext;\r\n        }\r\n\r\n        let messages = [];\r\n\r\n        const systemMessage = { role: 'system', content: this._systemPrompt };\r\n        //loop through messages from last to first and use encodeChat to calculate token lengths\r\n\r\n        let tokens = encodeChat([systemMessage as ChatMessage], 'gpt-4o').length;\r\n        for (let i = this._messages.length - 1; i >= 0; i--) {\r\n            const message = this._messages[i] as ChatMessage;\r\n\r\n            //skip system messages because we will add our own\r\n\r\n            if (message.role === 'system') continue;\r\n\r\n            //skip empty messages\r\n            if (!message.content) {\r\n                //FIXME: tool call messages does not have a content but have a tool field do we need to count them as tokens ?\r\n                messages.unshift(message);\r\n                continue;\r\n            }\r\n\r\n            delete message['__smyth_data__']; //remove smyth data entry, this entry may hold smythOS specific data\r\n\r\n            const textContent = typeof message.content === 'string' ? message.content : JSON.stringify(message.content);\r\n            const encoded = encode(textContent);\r\n            tokens += encoded.length;\r\n            if (tokens > maxInputContext) {\r\n                if (typeof message.content !== 'string') {\r\n                    //FIXME: handle this case for object contents (used by Anthropic for tool calls for example)\r\n                    break;\r\n                }\r\n                //handle context window overflow\r\n                //FIXME: the logic here is weak, we need a better one\r\n                const diff = tokens - maxInputContext;\r\n                const excessPercentage = diff / encoded.length;\r\n\r\n                //truncate message content\r\n                //const textContent = typeof message.content === 'string' ? message.content : JSON.stringify(message.content);\r\n\r\n                message.content = message.content.slice(0, Math.floor(message.content.length * (1 - excessPercentage)) - 200);\r\n                message.content += '...\\n\\nWARNING : The context window has been truncated to fit the maximum token limit.';\r\n\r\n                tokens -= encoded.length;\r\n                tokens += encodeChat([message], 'gpt-4').length;\r\n                //break;\r\n            }\r\n            messages.unshift(message);\r\n        }\r\n        //add system message as first message in the context window\r\n        messages.unshift(systemMessage);\r\n\r\n        return messages;\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport yaml from 'js-yaml';\r\n\r\nimport { REQUEST_METHODS } from '../constants';\r\n\r\n// * We need a couple of packages to resolve references in the OpenAPI specification\r\nimport SwaggerParser from '@apidevtools/swagger-parser';\r\nimport $RefParser from '@apidevtools/json-schema-ref-parser';\r\nimport { JSONSchema } from '@apidevtools/json-schema-ref-parser/dist/lib/types';\r\n\r\nconst swaggerParser = new SwaggerParser();\r\n\r\nexport class OpenAPIParser {\r\n    static mapReqMethods(paths: Array<Record<string, any>>): Map<string, any> {\r\n        const methods = new Map();\r\n\r\n        for (const path in paths) {\r\n            const pathData = paths[path];\r\n\r\n            for (const method in pathData) {\r\n                const data = pathData[method];\r\n\r\n                if (REQUEST_METHODS.includes(method.toUpperCase())) {\r\n                    methods.set(data?.operationId, method);\r\n                }\r\n            }\r\n        }\r\n\r\n        return methods;\r\n    }\r\n    static mapEndpoints(paths: Array<Record<string, any>>): Map<string, any> {\r\n        const operationIds = new Map();\r\n\r\n        for (const path in paths) {\r\n            const pathData = paths[path];\r\n\r\n            // it's possible we have multiple methods for a single path\r\n            for (const method in pathData) {\r\n                const data = pathData[method];\r\n\r\n                if (REQUEST_METHODS.includes(method.toUpperCase())) {\r\n                    operationIds.set(data?.operationId, path);\r\n                }\r\n            }\r\n        }\r\n\r\n        return operationIds;\r\n    }\r\n\r\n    static async yamlToJson(yamlData: string): Promise<JSONSchema> {\r\n        const data = yaml.load(yamlData);\r\n        const schema = await $RefParser.dereference(data);\r\n\r\n        return schema;\r\n    }\r\n    static async getJson(data: string | Record<string, any>): Promise<Record<string, any>> {\r\n        try {\r\n            let _data = data;\r\n            if (typeof data === 'string') {\r\n                _data = JSON.parse(_data as string);\r\n            }\r\n            const result = swaggerParser.dereference(_data as any);\r\n            return result;\r\n        } catch (error) {\r\n            try {\r\n                return OpenAPIParser.yamlToJson(data as string);\r\n            } catch (error) {\r\n                throw new Error('Invalid OpenAPI specification data format');\r\n            }\r\n        }\r\n    }\r\n    static async getJsonFromUrl(url: string): Promise<Record<string, any>> {\r\n        const response = await axios.get(url);\r\n        const data = response.data;\r\n\r\n        return OpenAPIParser.getJson(data);\r\n    }\r\n\r\n    static isValidOpenAPI(data: Record<string, any>): boolean {\r\n        return data?.openapi && data?.paths && data?.servers;\r\n    }\r\n}\r\n","import { AgentProcess } from '@sre/Core/AgentProcess.helper';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { LLMContext } from '@sre/MemoryManager/LLMContext';\r\nimport { TAgentProcessParams } from '@sre/types/Agent.types';\r\nimport { ToolData } from '@sre/types/LLM.types';\r\nimport { isUrl } from '@sre/utils/data.utils';\r\nimport { processWithConcurrencyLimit } from '@sre/utils/general.utils';\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport EventEmitter from 'events';\r\nimport { JSONContent } from './JsonContent.helper';\r\nimport { OpenAPIParser } from './OpenApiParser.helper';\r\nimport { Match, TemplateString } from './TemplateString.helper';\r\n\r\nconst console = Logger('ConversationHelper');\r\ntype FunctionDeclaration = {\r\n    name: string;\r\n    description: string;\r\n    properties: Record<string, any>;\r\n    requiredFields: string[];\r\n};\r\ntype ToolParams = {\r\n    type: string;\r\n    endpoint: string;\r\n    args: Record<string, any>;\r\n    method: string;\r\n    baseUrl: string;\r\n    headers?: Record<string, string>;\r\n};\r\n\r\n//TODO: handle authentication\r\nexport class Conversation extends EventEmitter {\r\n    private _agentId: string = '';\r\n    private _systemPrompt;\r\n    public get systemPrompt() {\r\n        return this._systemPrompt;\r\n    }\r\n    public set systemPrompt(systemPrompt) {\r\n        this._systemPrompt = systemPrompt;\r\n        if (this._context) this._context.systemPrompt = systemPrompt;\r\n    }\r\n    public assistantName;\r\n\r\n    private _reqMethods;\r\n    private _toolsConfig;\r\n    private _endpoints;\r\n    private _baseUrl;\r\n\r\n    private _status = '';\r\n    private _currentWaitPromise;\r\n\r\n    private _context: LLMContext;\r\n    private _maxContextSize = 1024 * 16;\r\n    private _maxOutputTokens = 1024;\r\n\r\n    public get context() {\r\n        return this._context;\r\n    }\r\n\r\n    private _lastError;\r\n    private _spec;\r\n    public stop = false;\r\n    public set spec(specSource) {\r\n        this.ready.then(() => {\r\n            this._status = '';\r\n            this.loadSpecFromSource(specSource).then((spec) => {\r\n                if (!spec) {\r\n                    this._status = 'error';\r\n                    this.emit('error', 'Invalid OpenAPI specification data format');\r\n                    throw new Error('Invalid OpenAPI specification data format');\r\n                }\r\n                this._spec = spec;\r\n                this.updateModel(this._model);\r\n                this._status = 'ready';\r\n            });\r\n        });\r\n    }\r\n\r\n    public set model(model: string) {\r\n        this.ready.then(() => {\r\n            this._status = '';\r\n            this.updateModel(model);\r\n            this._status = 'ready';\r\n        });\r\n    }\r\n    public get model() {\r\n        return this._model;\r\n    }\r\n    constructor(\r\n        private _model: string,\r\n        private _specSource?: string | Record<string, any>,\r\n        private _settings?: { maxContextSize: number; maxOutputTokens: number }\r\n    ) {\r\n        //TODO: handle loading previous session (messages)\r\n        super();\r\n\r\n        //this event listener avoids unhandled errors that can cause crashes\r\n        this.on('error', (error) => {\r\n            this._lastError = error;\r\n            console.warn('Conversation Error: ', error);\r\n        });\r\n        if (_settings?.maxContextSize) this._maxContextSize = _settings.maxContextSize;\r\n        if (_settings?.maxOutputTokens) this._maxOutputTokens = _settings.maxOutputTokens;\r\n        if (_specSource) {\r\n            this.loadSpecFromSource(_specSource)\r\n                .then((spec) => {\r\n                    if (!spec) {\r\n                        this._status = 'error';\r\n                        this.emit('error', 'Unable to parse OpenAPI specifications');\r\n                        throw new Error('Invalid OpenAPI specification data format');\r\n                    }\r\n                    this._spec = spec;\r\n\r\n                    this.updateModel(this._model);\r\n                    this._status = 'ready';\r\n                })\r\n                .catch((error) => {\r\n                    this._status = 'error';\r\n                    this.emit('error', error);\r\n                });\r\n        } else {\r\n            this.updateModel(this._model);\r\n            this._status = 'ready';\r\n        }\r\n    }\r\n\r\n    public get ready() {\r\n        if (this._currentWaitPromise) return this._currentWaitPromise;\r\n        this._currentWaitPromise = new Promise((resolve, reject) => {\r\n            if (this._status) {\r\n                return resolve(this._status);\r\n            }\r\n\r\n            const maxWaitTime = 30000;\r\n            let waitTime = 0;\r\n            const interval = 100;\r\n\r\n            const wait = setInterval(() => {\r\n                if (this._status) {\r\n                    clearInterval(wait);\r\n                    return resolve(this._status);\r\n                } else {\r\n                    waitTime += interval;\r\n                    if (waitTime >= maxWaitTime) {\r\n                        clearInterval(wait);\r\n                        return reject('Timeout: Failed to prepare data');\r\n                    }\r\n                }\r\n            }, interval);\r\n        });\r\n\r\n        return this._currentWaitPromise;\r\n    }\r\n\r\n    //TODO : handle attachments\r\n    public async prompt(message?: string, toolHeaders = {}) {\r\n        if (this.stop) return;\r\n        await this.ready;\r\n\r\n        const reqMethods = this._reqMethods;\r\n        const toolsConfig = this._toolsConfig;\r\n        const endpoints = this._endpoints;\r\n        const baseUrl = this._baseUrl;\r\n\r\n        /* ==================== STEP ENTRY ==================== */\r\n        console.debug('Request to LLM with the given model, messages and functions properties.', {\r\n            model: this.model,\r\n            message,\r\n            toolsConfig,\r\n        });\r\n        /* ==================== STEP ENTRY ==================== */\r\n        const llmHelper: LLMHelper = LLMHelper.load(this.model);\r\n\r\n        if (message) this._context.addUserMessage(message);\r\n\r\n        const contextWindow = this._context.getContextWindow(this._maxContextSize, this._maxOutputTokens);\r\n\r\n        const { data: llmResponse } = await llmHelper\r\n            .toolRequest(\r\n                {\r\n                    model: this.model,\r\n                    messages: contextWindow,\r\n                    toolsConfig,\r\n                    max_tokens: this._maxOutputTokens,\r\n                },\r\n                this._agentId\r\n            )\r\n            .catch((error: any) => {\r\n                throw new Error(\r\n                    '[LLM Request Error]\\n' +\r\n                        JSON.stringify({\r\n                            code: error?.name || 'LLMRequestFailed',\r\n                            message: error?.message || 'Something went wrong while calling LLM.',\r\n                        })\r\n                );\r\n            });\r\n\r\n        // useTool = true means we need to use it\r\n        if (llmResponse?.useTool) {\r\n            /* ==================== STEP ENTRY ==================== */\r\n            console.debug({\r\n                type: 'ToolsData',\r\n                message: 'Tool(s) is available for use.',\r\n                toolsData: llmResponse?.toolsData,\r\n            });\r\n            /* ==================== STEP ENTRY ==================== */\r\n\r\n            const toolsData: ToolData[] = [];\r\n\r\n            for (const tool of llmResponse?.toolsData) {\r\n                const endpoint = endpoints?.get(tool?.name);\r\n                // Sometimes we have object response from the LLM such as Anthropic\r\n                const parsedArgs = JSONContent(tool?.arguments).tryParse();\r\n                let args = typeof tool?.arguments === 'string' ? parsedArgs || {} : tool?.arguments;\r\n\r\n                if (args?.error) {\r\n                    throw new Error('[Tool] Arguments Parsing Error\\n' + JSON.stringify({ message: args?.error }));\r\n                }\r\n\r\n                const toolArgs = {\r\n                    type: tool?.type,\r\n                    method: reqMethods?.get(tool?.name),\r\n                    endpoint,\r\n                    args,\r\n                    baseUrl,\r\n                    headers: toolHeaders,\r\n                };\r\n\r\n                /* ==================== STEP ENTRY ==================== */\r\n                console.debug({\r\n                    type: 'UseTool',\r\n                    message: 'As LLM returned a tool to use, so use it with the provided arguments.',\r\n                    plugin_url: { baseUrl, endpoint, args },\r\n                    arguments: args,\r\n                });\r\n                /* ==================== STEP ENTRY ==================== */\r\n\r\n                this.emit('beforeToolCall', { tool, args });\r\n                //TODO: Should we run these tools in parallel?\r\n                let { data: functionResponse, error } = await this.useTool(toolArgs);\r\n\r\n                if (error) {\r\n                    this.emit('toolCallError', toolArgs, error);\r\n                    functionResponse = typeof error === 'object' && typeof error !== null ? JSON.stringify(error) : error;\r\n                }\r\n\r\n                functionResponse =\r\n                    typeof functionResponse === 'object' && typeof functionResponse !== null ? JSON.stringify(functionResponse) : functionResponse;\r\n\r\n                /* ==================== STEP ENTRY ==================== */\r\n                console.debug({\r\n                    type: 'ToolResult',\r\n                    message: 'Result from the tool',\r\n                    response: functionResponse,\r\n                });\r\n                /* ==================== STEP ENTRY ==================== */\r\n\r\n                this.emit('afterToolCall', toolArgs, functionResponse);\r\n                toolsData.push({ ...tool, result: functionResponse });\r\n            }\r\n\r\n            const messagesWithToolResult = llmHelper.connector.transformToolMessageBlocks({ messageBlock: llmResponse?.message, toolsData });\r\n\r\n            this._context.push(...messagesWithToolResult);\r\n\r\n            return this.prompt(null, toolHeaders);\r\n        }\r\n\r\n        this._context.push(llmResponse?.message);\r\n\r\n        let content = JSONContent(llmResponse?.content).tryParse();\r\n\r\n        /* ==================== STEP ENTRY ==================== */\r\n        console.debug({\r\n            type: 'FinalResult',\r\n            message: 'Here is the final result after processing all the tools and LLM response.',\r\n            response: content,\r\n        });\r\n        /* ==================== STEP ENTRY ==================== */\r\n\r\n        return content;\r\n    }\r\n\r\n    //TODO : handle attachments\r\n    public async streamPrompt(message?: string, toolHeaders = {}, concurrentToolCalls = 4) {\r\n        if (this.stop) return;\r\n        await this.ready;\r\n\r\n        //let promises = [];\r\n        let _content = '';\r\n        const reqMethods = this._reqMethods;\r\n        const toolsConfig = this._toolsConfig;\r\n        const endpoints = this._endpoints;\r\n        const baseUrl = this._baseUrl;\r\n\r\n        /* ==================== STEP ENTRY ==================== */\r\n        // console.debug('Request to LLM with the given model, messages and functions properties.', {\r\n        //     model: this.model,\r\n        //     message,\r\n        //     toolsConfig,\r\n        // });\r\n        /* ==================== STEP ENTRY ==================== */\r\n        const llmHelper: LLMHelper = LLMHelper.load(this.model);\r\n\r\n        if (message) this._context.addUserMessage(message);\r\n\r\n        const contextWindow = this._context.getContextWindow(this._maxContextSize, this._maxOutputTokens);\r\n\r\n        const eventEmitter: any = await llmHelper\r\n            .streamRequest(\r\n                {\r\n                    model: this.model,\r\n                    messages: contextWindow,\r\n                    toolsConfig,\r\n                    max_tokens: this._maxOutputTokens,\r\n                },\r\n                this._agentId\r\n            )\r\n            .catch((error) => {\r\n                console.error('Error on streamRequest: ', error);\r\n            });\r\n\r\n        if (!eventEmitter || eventEmitter.error) {\r\n            throw new Error('[LLM Request Error]');\r\n        }\r\n\r\n        if (message) this.emit('start');\r\n        eventEmitter.on('data', (data) => {\r\n            this.emit('data', data);\r\n        });\r\n\r\n        eventEmitter.on('content', (content) => {\r\n            _content += content;\r\n            this.emit('content', content);\r\n        });\r\n\r\n        let toolsPromise = new Promise((resolve, reject) => {\r\n            let hasTools = false;\r\n            let hasError = false;\r\n            eventEmitter.on('error', (error) => {\r\n                hasError = true;\r\n                reject(error);\r\n            });\r\n\r\n            eventEmitter.on('toolsData', async (toolsData) => {\r\n                hasTools = true;\r\n                let llmMessage: any = {\r\n                    role: 'assistant',\r\n                    content: _content,\r\n                    tool_calls: [],\r\n                };\r\n                llmMessage.tool_calls = toolsData.map((tool) => {\r\n                    return {\r\n                        id: tool.id,\r\n                        type: tool.type,\r\n                        function: {\r\n                            name: tool.name,\r\n                            arguments: tool.arguments,\r\n                        },\r\n                    };\r\n                });\r\n\r\n                //if (llmMessage.tool_calls?.length <= 0) return;\r\n\r\n                this.emit('toolInfo', toolsData); // replaces onFunctionCallResponse in legacy code\r\n\r\n                const toolProcessingTasks = toolsData.map(\r\n                    (tool: { index: number; name: string; type: string; arguments: Record<string, any> }) => async () => {\r\n                        const endpoint = endpoints?.get(tool?.name);\r\n                        // Sometimes we have object response from the LLM such as Anthropic\r\n\r\n                        let args = typeof tool?.arguments === 'string' ? JSONContent(tool?.arguments).tryParse() || {} : tool?.arguments;\r\n\r\n                        if (args?.error) {\r\n                            throw new Error('[Tool] Arguments Parsing Error\\n' + JSON.stringify({ message: args?.error }));\r\n                        }\r\n\r\n                        //await beforeFunctionCall(llmMessage, toolsData[tool.index]);\r\n                        this.emit('beforeToolCall', { tool, args });\r\n\r\n                        const toolArgs = {\r\n                            type: tool?.type,\r\n                            method: reqMethods?.get(tool?.name),\r\n                            endpoint,\r\n                            args,\r\n                            baseUrl,\r\n                            headers: toolHeaders,\r\n                        };\r\n\r\n                        let { data: functionResponse, error } = await this.useTool(toolArgs);\r\n\r\n                        if (error) {\r\n                            functionResponse = typeof error === 'object' && typeof error !== null ? JSON.stringify(error) : error;\r\n                        }\r\n\r\n                        functionResponse =\r\n                            typeof functionResponse === 'object' && typeof functionResponse !== null\r\n                                ? JSON.stringify(functionResponse)\r\n                                : functionResponse;\r\n\r\n                        //await afterFunctionCall(functionResponse, toolsData[tool.index]);\r\n                        this.emit('afterToolCall', { tool, args }, functionResponse);\r\n\r\n                        return { ...tool, result: functionResponse };\r\n                    }\r\n                );\r\n\r\n                const processedToolsData = await processWithConcurrencyLimit<ToolData>(toolProcessingTasks, concurrentToolCalls);\r\n\r\n                const messagesWithToolResult = llmHelper.connector.transformToolMessageBlocks({\r\n                    messageBlock: llmMessage,\r\n                    toolsData: processedToolsData,\r\n                });\r\n\r\n                this._context.push(...messagesWithToolResult);\r\n\r\n                const result = await resolve(await this.streamPrompt(null, toolHeaders, concurrentToolCalls));\r\n                //console.log('Result after tool call: ', result);\r\n            });\r\n\r\n            eventEmitter.on('end', async (toolsData) => {\r\n                if (hasError) return;\r\n\r\n                if (!hasTools) {\r\n                    //console.log(' ===> resolved content no tool', _content);\r\n                    this._context.push({ role: 'assistant', content: _content });\r\n                    resolve(''); //the content were already emitted through 'content' event\r\n                }\r\n            });\r\n        });\r\n\r\n        const toolsContent = await toolsPromise.catch((error) => {\r\n            console.error('Error in toolsPromise: ', error);\r\n            //this.emit('error', error);\r\n            this.emit('warning', error);\r\n            return '';\r\n        });\r\n        _content += toolsContent;\r\n        let content = JSONContent(_content).tryParse();\r\n\r\n        // let streamPromise = new Promise((resolve, reject) => {\r\n        //     eventEmitter.on('end', async () => {\r\n        //         if (toolsPromise) await toolsPromise;\r\n\r\n        //         let content = JSONContent(_content).tryParse();\r\n        //         resolve({ content });\r\n        //     });\r\n        // });\r\n\r\n        // promises.push(streamPromise);\r\n\r\n        //await Promise.all(promises);\r\n        //return content;\r\n\r\n        if (message) {\r\n            //console.log('main content', content);\r\n            //this._context.push({ role: 'assistant', content: content });\r\n            this.emit('end');\r\n        } else {\r\n            //console.log('tool content', content);\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    public async _streamPrompt(message?: string, toolHeaders = {}, concurrentToolCalls = 4) {\r\n        await this.ready;\r\n\r\n        const reqMethods = this._reqMethods;\r\n        const toolsConfig = this._toolsConfig;\r\n        const endpoints = this._endpoints;\r\n        const baseUrl = this._baseUrl;\r\n\r\n        /* ==================== STEP ENTRY ==================== */\r\n        // console.debug('Request to LLM with the given model, messages and functions properties.', {\r\n        //     model: this.model,\r\n        //     message,\r\n        //     toolsConfig,\r\n        // });\r\n        /* ==================== STEP ENTRY ==================== */\r\n        const llmHelper: LLMHelper = LLMHelper.load(this.model);\r\n\r\n        if (message) this._context.addUserMessage(message);\r\n        const contextWindow = this._context.getContextWindow(this._maxContextSize, this._maxOutputTokens);\r\n\r\n        const { data: llmResponse, error } = await llmHelper.streamToolRequest(\r\n            {\r\n                model: this.model,\r\n                messages: contextWindow,\r\n                toolsConfig,\r\n            },\r\n            this._agentId\r\n        );\r\n\r\n        if (error) {\r\n            throw new Error(\r\n                '[LLM Request Error]\\n' +\r\n                    JSON.stringify({\r\n                        code: error?.name || 'LLMRequestFailed',\r\n                        message: error?.message || 'Something went wrong while calling LLM.',\r\n                    })\r\n            );\r\n        }\r\n\r\n        // useTool = true means we need to use it\r\n        if (llmResponse?.useTool) {\r\n            const llmMessage = llmResponse?.message;\r\n            const toolsData = llmResponse?.toolsData;\r\n\r\n            /* ==================== STEP ENTRY ==================== */\r\n            // console.debug({\r\n            //     type: 'ToolsData',\r\n            //     message: 'Tool(s) is available for use.',\r\n            //     toolsData: llmResponse?.toolsData,\r\n            // });\r\n            /* ==================== STEP ENTRY ==================== */\r\n\r\n            this.emit('toolInfo', toolsData); // replaces onFunctionCallResponse in legacy code\r\n\r\n            const toolProcessingTasks = toolsData.map(\r\n                (tool: { index: number; name: string; type: string; arguments: Record<string, any> }) => async () => {\r\n                    const endpoint = endpoints?.get(tool?.name);\r\n                    // Sometimes we have object response from the LLM such as Anthropic\r\n\r\n                    let args = typeof tool?.arguments === 'string' ? JSONContent(tool?.arguments).tryParse() || {} : tool?.arguments;\r\n\r\n                    if (args?.error) {\r\n                        throw new Error('[Tool] Arguments Parsing Error\\n' + JSON.stringify({ message: args?.error }));\r\n                    }\r\n\r\n                    //await beforeFunctionCall(llmMessage, toolsData[tool.index]);\r\n                    this.emit('beforeToolCall', { tool, args });\r\n\r\n                    const toolArgs = {\r\n                        type: tool?.type,\r\n                        method: reqMethods?.get(tool?.name),\r\n                        endpoint,\r\n                        args,\r\n                        baseUrl,\r\n                        headers: toolHeaders,\r\n                    };\r\n\r\n                    let { data: functionResponse, error } = await this.useTool(toolArgs);\r\n\r\n                    if (error) {\r\n                        functionResponse = typeof error === 'object' && typeof error !== null ? JSON.stringify(error) : error;\r\n                    }\r\n\r\n                    functionResponse =\r\n                        typeof functionResponse === 'object' && typeof functionResponse !== null\r\n                            ? JSON.stringify(functionResponse)\r\n                            : functionResponse;\r\n\r\n                    //await afterFunctionCall(functionResponse, toolsData[tool.index]);\r\n                    this.emit('afterToolCall', { tool, args }, functionResponse);\r\n\r\n                    return { ...tool, result: functionResponse };\r\n                }\r\n            );\r\n\r\n            const processedToolsData = await processWithConcurrencyLimit<ToolData>(toolProcessingTasks, concurrentToolCalls);\r\n\r\n            const messagesWithToolResult = llmHelper.connector.transformToolMessageBlocks({\r\n                messageBlock: llmMessage,\r\n                toolsData: processedToolsData,\r\n            });\r\n\r\n            this._context.push(...messagesWithToolResult);\r\n\r\n            return this.streamPrompt(null, toolHeaders, concurrentToolCalls);\r\n        }\r\n        let _content = '';\r\n        if (llmResponse.content) {\r\n            _content = llmResponse.content;\r\n        }\r\n        if (llmResponse.stream) {\r\n            this.emit('start');\r\n            for await (const part of llmResponse.stream) {\r\n                const delta = part.choices[0].delta;\r\n\r\n                //if (!_content) delta.content = '\\n\\n' + delta.content;\r\n                //onResponse(delta);\r\n                this.emit('data', delta);\r\n                if (delta.content) this.emit('content', delta.content);\r\n                _content += delta.content || '';\r\n            }\r\n\r\n            this.emit('end');\r\n        }\r\n        let content = JSONContent(_content).tryParse();\r\n\r\n        /* ==================== STEP ENTRY ==================== */\r\n        // console.debug({\r\n        //     type: 'FinalResult',\r\n        //     message: 'Here is the final result after processing all the tools and LLM response.',\r\n        //     response: content,\r\n        // });\r\n        /* ==================== STEP ENTRY ==================== */\r\n\r\n        return content;\r\n    }\r\n    private resolveToolEndpoint(baseUrl: string, method: string, endpoint: string, params: Record<string, any>): string {\r\n        //handle query params\r\n        let templateParams = {};\r\n        if (params) {\r\n            const parameters = this._spec?.paths?.[endpoint]?.[method.toLowerCase()]?.parameters || [];\r\n            for (let p of parameters) {\r\n                if (p.in === 'path') {\r\n                    templateParams[p.name] = params[p.name] || '';\r\n                    delete params[p.name];\r\n                }\r\n            }\r\n        }\r\n        const parsedEndpoint = TemplateString(endpoint).parse(templateParams, Match.singleCurly).clean().result;\r\n\r\n        // Create a new URL object using the base URL and endpoint\r\n        const url = new URL(parsedEndpoint, baseUrl);\r\n\r\n        // Iterate over the params object and append each key/value pair to the URL search parameters\r\n        Object.keys(params).forEach((key) => {\r\n            url.searchParams.append(key, params[key]);\r\n        });\r\n\r\n        // Return the full URL as a string\r\n        return url.toString();\r\n    }\r\n\r\n    private async useTool(params: ToolParams): Promise<{\r\n        data: any;\r\n        error;\r\n    }> {\r\n        const { type, endpoint, args, method, baseUrl, headers = {} } = params;\r\n\r\n        if (type === 'function') {\r\n            try {\r\n                const url = this.resolveToolEndpoint(baseUrl, method, endpoint, method == 'get' ? args : {});\r\n\r\n                const reqConfig: AxiosRequestConfig = {\r\n                    method,\r\n                    url,\r\n                    headers,\r\n                };\r\n\r\n                if (method !== 'get') {\r\n                    if (Object.keys(args).length) {\r\n                        reqConfig.data = args;\r\n                    }\r\n                    (reqConfig.headers as Record<string, unknown>)['Content-Type'] = 'application/json';\r\n                }\r\n\r\n                console.debug('Calling tool: ', reqConfig);\r\n\r\n                //TODO : implement a timeout for the tool call\r\n                if (reqConfig.url.includes('localhost')) {\r\n                    //if it's a local agent, invoke it directly\r\n                    const response = await AgentProcess.load(reqConfig.headers['X-AGENT-ID']).run(reqConfig as TAgentProcessParams);\r\n                    return { data: response.data, error: null };\r\n                } else {\r\n                    //if it's a remote agent, call the API via HTTP\r\n                    const response = await axios.request(reqConfig);\r\n\r\n                    return { data: response.data, error: null };\r\n                }\r\n            } catch (error: any) {\r\n                console.warn('Failed to call Tool: ', baseUrl, endpoint);\r\n                console.warn('  ====>', error);\r\n                return { data: null, error: error?.response?.data || error?.message };\r\n            }\r\n        }\r\n\r\n        return { data: null, error: `'${type}' tool type not supported at the moment` };\r\n    }\r\n    /**\r\n     * updates LLM model, if spec is available, it will update the tools config\r\n     * @param model\r\n     */\r\n    private updateModel(model: string) {\r\n        try {\r\n            this._model = model;\r\n\r\n            if (this._spec) {\r\n                this._reqMethods = OpenAPIParser.mapReqMethods(this._spec?.paths);\r\n                this._endpoints = OpenAPIParser.mapEndpoints(this._spec?.paths);\r\n                this._baseUrl = this._spec?.servers?.[0].url;\r\n\r\n                const functionDeclarations = this.getFunctionDeclarations(this._spec);\r\n                const llmHelper: LLMHelper = LLMHelper.load(this._model);\r\n                this._toolsConfig = llmHelper.connector.formatToolsConfig({\r\n                    type: 'function',\r\n                    toolDefinitions: functionDeclarations,\r\n                    toolChoice: 'auto',\r\n                });\r\n\r\n                let messages = [];\r\n                if (this._context) messages = this._context.messages; // preserve messages\r\n\r\n                this._context = new LLMContext(this._model, this.systemPrompt, messages);\r\n            } else {\r\n                this._toolsConfig = null;\r\n                this._reqMethods = null;\r\n                this._endpoints = null;\r\n                this._baseUrl = null;\r\n            }\r\n        } catch (error) {\r\n            this.emit('error', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this function is used to patch the spec with missing fields that are required for the tool to work\r\n     * @param spec\r\n     */\r\n    private patchSpec(spec: Record<string, any>) {\r\n        const paths = spec?.paths;\r\n        for (const path in paths) {\r\n            const pathData = paths[path];\r\n\r\n            // it's possible we have multiple methods for a single path\r\n            for (const key in pathData) {\r\n                const data = pathData[key];\r\n                if (!data?.operationId) {\r\n                    //normalize path and use it as operationId\r\n                    data.operationId = path.replace(/\\//g, '_').replace(/{|}/g, '').replace(/\\./g, '_');\r\n                }\r\n            }\r\n        }\r\n        return spec;\r\n    }\r\n    /**\r\n     * Loads OpenAPI specification from source\r\n     * @param specSource\r\n     * @returns\r\n     */\r\n    private async loadSpecFromSource(specSource: string | Record<string, any>) {\r\n        if (typeof specSource === 'object') {\r\n            if (OpenAPIParser.isValidOpenAPI(specSource)) return this.patchSpec(specSource);\r\n            return null;\r\n        }\r\n\r\n        if (typeof specSource === 'string') {\r\n            if (isUrl(specSource as string)) {\r\n                const spec = await OpenAPIParser.getJsonFromUrl(specSource as string);\r\n\r\n                if (spec.info?.description) this.systemPrompt = spec.info.description;\r\n                if (spec.info?.title) this.assistantName = spec.info.title;\r\n\r\n                const defaultBaseUrl = new URL(specSource as string).origin;\r\n\r\n                if (!spec?.servers) spec.servers = [{ url: defaultBaseUrl }];\r\n                if (spec.servers?.length == 0) spec.servers = [{ url: defaultBaseUrl }];\r\n\r\n                if (this.assistantName) {\r\n                    this.systemPrompt = `Assistant Name : ${this.assistantName}\\n\\n${this.systemPrompt}`;\r\n                }\r\n\r\n                return this.patchSpec(spec);\r\n            }\r\n            const agentDataConnector = ConnectorService.getAgentDataConnector();\r\n            const agentId = specSource as string;\r\n            const agentData = await agentDataConnector.getAgentData(agentId).catch((error) => null);\r\n            if (!agentData) return null;\r\n            this._agentId = agentId;\r\n            this.systemPrompt = agentData?.data?.behavior || this.systemPrompt;\r\n            this.assistantName = agentData?.data?.name || agentData?.data?.templateInfo?.name || this.assistantName;\r\n            if (this.assistantName) {\r\n                this.systemPrompt = `Assistant Name : ${this.assistantName}\\n\\n${this.systemPrompt}`;\r\n            }\r\n            const spec = await agentDataConnector.getOpenAPIJSON(agentData, 'http://localhost/', 'latest', true).catch((error) => null);\r\n            return this.patchSpec(spec);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts function declarations from OpenAPI specification\r\n     * @param spec\r\n     * @returns\r\n     */\r\n    private getFunctionDeclarations(spec): FunctionDeclaration[] {\r\n        const paths = spec?.paths;\r\n        const reqMethods = OpenAPIParser.mapReqMethods(paths);\r\n\r\n        let declarations: FunctionDeclaration[] = [];\r\n\r\n        for (const path in paths) {\r\n            const pathData = paths[path];\r\n\r\n            // it's possible we have multiple methods for a single path\r\n            for (const key in pathData) {\r\n                const data = pathData[key];\r\n\r\n                const method = reqMethods.get(data?.operationId) || 'get';\r\n\r\n                let properties = {};\r\n                let requiredFields: string[] = [];\r\n\r\n                if (method.toLowerCase() === 'get') {\r\n                    const params = data?.parameters || [];\r\n                    for (const prop of params) {\r\n                        properties[prop.name] = {\r\n                            ...prop.schema,\r\n                            description: prop.description,\r\n                        };\r\n\r\n                        if (prop.required === true) {\r\n                            requiredFields.push(prop?.name || '');\r\n                        }\r\n                    }\r\n                } else {\r\n                    properties = data?.requestBody?.content?.['application/json']?.schema?.properties;\r\n                    requiredFields = data?.requestBody?.content?.['application/json']?.schema?.required;\r\n\r\n                    // Open AI doesn't support 'required' to be boolean inside property\r\n                    for (const prop in properties) {\r\n                        delete properties[prop]?.required;\r\n                    }\r\n                }\r\n\r\n                if (!properties) properties = {};\r\n                if (!requiredFields) requiredFields = [];\r\n\r\n                const declaration = {\r\n                    name: data?.operationId,\r\n                    description: data?.description || data?.summary || '',\r\n                    properties,\r\n                    requiredFields,\r\n                };\r\n                declarations.push(declaration);\r\n            }\r\n        }\r\n\r\n        return declarations;\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { Conversation } from '@sre/helpers/Conversation.helper';\r\nimport Component from './Component.class';\r\n\r\nexport default class AgentPlugin extends Component {\r\n    protected configSchema = Joi.object({\r\n        agentId: Joi.string().max(200).required(),\r\n        openAiModel: Joi.string().max(200).required(),\r\n        descForModel: Joi.string().max(5000).allow('').label('Description for Model'),\r\n        id: Joi.string().max(200),\r\n        name: Joi.string().max(500),\r\n        desc: Joi.string().max(5000).allow('').label('Description'),\r\n        logoUrl: Joi.string().max(8192).allow(''),\r\n        version: Joi.string().max(100).allow(''),\r\n        domain: Joi.string().max(253).allow(''),\r\n    });\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        logger.debug(`=== Agent Plugin Log ===`);\r\n\r\n        try {\r\n            const subAgentId = config.data?.agentId;\r\n\r\n            if (!subAgentId) {\r\n                return { _error: 'Agent Component ID is required!', _debug: logger.output };\r\n            }\r\n\r\n            //tag this request to tell the nested agent that the call comes from internal agent\r\n            const reqTag = agent.agentRuntime?.reqTag;\r\n\r\n            const model = config?.data?.openAiModel;\r\n            const descForModel = TemplateString(config?.data?.descForModel).parse(input).result;\r\n            const prompt = typeof input?.Prompt === 'string' ? input?.Prompt : JSON.stringify(input?.Prompt);\r\n\r\n            const agentDataConnector = ConnectorService.getAgentDataConnector();\r\n\r\n            //let subAgentDomain = await isDeployed(subAgentId);\r\n            // when domain found for sub agent, that means it's deployed\r\n            const isSubAgentDeployed = await agentDataConnector.isDeployed(subAgentId);\r\n\r\n            let version = config.data?.version || '';\r\n\r\n            logger.debug('Version: ', version);\r\n\r\n            if (version === 'same-as-parent') {\r\n                const isParentAgentDeployed = await agentDataConnector.isDeployed(agent?.id);\r\n\r\n                if (isParentAgentDeployed) {\r\n                    if (isSubAgentDeployed) {\r\n                        version = 'latest';\r\n                    } else {\r\n                        return {\r\n                            _error: `Call failed, Agent '${config.data?.name}' (${subAgentId}) is not deployed. Please deploy the agent and try again.`,\r\n                            _debug: logger.output,\r\n                        };\r\n                    }\r\n                } else {\r\n                    version = ''; // empty string ('') means latest dev version\r\n                }\r\n            } else if (version === 'dev-latest') {\r\n                version = '';\r\n            } else if (version === 'prod-latest') {\r\n                if (isSubAgentDeployed) {\r\n                    version = 'latest';\r\n                } else {\r\n                    return {\r\n                        _error: `Call failed, Agent '${config.data?.name}' (${subAgentId}) is not deployed. Please deploy the agent and try again.`,\r\n                        _debug: logger.output,\r\n                    };\r\n                }\r\n            }\r\n\r\n            const conv = new Conversation(config?.data?.openAiModel, subAgentId);\r\n\r\n            const result = await conv.prompt(prompt, {\r\n                'X-AGENT-ID': subAgentId,\r\n                'X-AGENT-VERSION': version,\r\n                'X-REQUEST-TAG': reqTag, //request Tag identifies the request and tells the called agent that the call comes from internal agent\r\n                'x-caller-session-id': agent.callerSessionId,\r\n            });\r\n\r\n            logger.debug(`Response:\\n`, result, '\\n');\r\n\r\n            return { Response: result, _debug: logger.output };\r\n        } catch (error: any) {\r\n            console.error('Error on running Agent Component: ', error);\r\n            return { _error: `Error on running Agent Component!\\n${error?.message || JSON.stringify(error)}`, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { CacheConnector } from '@sre/MemoryManager/Cache.service';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { DEFAULT_MAX_TOKENS_FOR_LLM } from '@sre/constants';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { encode } from 'gpt-tokenizer';\r\nimport Component from './Component.class';\r\nimport { JSONContent, JSONContentHelper } from '@sre/helpers/JsonContent.helper';\r\n\r\n//const sessions = {};\r\nlet cacheConnector: CacheConnector;\r\nfunction getCacheConnector() {\r\n    if (!cacheConnector) {\r\n        cacheConnector = ConnectorService.getCacheConnector();\r\n    }\r\n    return cacheConnector;\r\n}\r\n\r\nasync function saveMessagesToSession(agentId, userId, conversationId, messages, ttl?) {\r\n    if (!userId && !conversationId) return;\r\n    const cacheConnector = getCacheConnector();\r\n    const conv_uid = `${agentId}:conv-u${userId}-c${conversationId}`;\r\n\r\n    cacheConnector.user(AccessCandidate.agent(agentId)).set(conv_uid, JSON.stringify(messages), null, null, ttl);\r\n}\r\n\r\nasync function readMessagesFromSession(agentId, userId, conversationId, maxTokens = DEFAULT_MAX_TOKENS_FOR_LLM) {\r\n    if (!userId && !conversationId) return [];\r\n    const cacheConnector = getCacheConnector();\r\n\r\n    const conv_uid = `${agentId}:conv-u${userId}-c${conversationId}`;\r\n    //read the last messages from a given session and ensure that the total chat tokens are within the limit\r\n    //start from the last message and keep adding messages until the total tokens exceed the limit\r\n    //if (!sessions[agentId]) return [];\r\n    //if (!sessions[agentId][conv_uid]) return [];\r\n\r\n    const sessionData = await cacheConnector.user(AccessCandidate.agent(agentId)).get(conv_uid);\r\n\r\n    const messages = sessionData ? JSONContent(sessionData).tryParse() : [];\r\n    //const messages = sessions[agentId][conv_uid].messages;\r\n\r\n    const filteredMessages: any[] = [];\r\n\r\n    let tokens = 0;\r\n    if (messages[0]?.role == 'system') {\r\n        const encoded = encode(messages[0]?.content);\r\n        const messageTokens = encoded.length + 3;\r\n        tokens += messageTokens;\r\n    }\r\n\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].role == 'system') continue;\r\n        const message = messages[i];\r\n        const encoded = encode(message?.content);\r\n        const messageTokens = encoded.length + 3;\r\n        if (tokens + messageTokens > maxTokens) break;\r\n        filteredMessages.unshift(message);\r\n        tokens += messageTokens;\r\n    }\r\n\r\n    if (messages[0]?.role == 'system') filteredMessages.unshift(messages[0]);\r\n\r\n    return filteredMessages;\r\n}\r\n\r\n//TODO : update this implementation to use ConversationManager\r\n//        This will allow better context management and support for tool calls\r\nexport default class LLMAssistant extends Component {\r\n    protected configSchema = Joi.object({\r\n        model: Joi.string().max(200).required(),\r\n        behavior: Joi.string().max(30000).allow('').label('Behavior'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            logger.debug('== LLM Assistant Log ==\\n');\r\n\r\n            const model: string = config.data.model || 'echo';\r\n            const ttl = config.data.ttl || undefined;\r\n            const llmHelper: LLMHelper = LLMHelper.load(model);\r\n            // if the llm is undefined, then it means we removed the model from our system\r\n            if (!llmHelper.connector) {\r\n                return {\r\n                    _error: `The model '${model}' is not available. Please try a different one.`,\r\n                    _debug: logger.output,\r\n                };\r\n            }\r\n\r\n            logger.debug(` Model : ${model}`);\r\n\r\n            const userInput = input.UserInput;\r\n            const userId = input.UserId;\r\n            const conversationId = input.ConversationId;\r\n\r\n            let behavior = TemplateString(config.data.behavior).parse(input).result;\r\n            logger.debug(`[Parsed Behavior] \\n${behavior}\\n\\n`);\r\n\r\n            const modelInfo = llmHelper.modelInfo;\r\n            const maxTokens = modelInfo?.tokens ?? 2048;\r\n\r\n            const messages: any[] = await readMessagesFromSession(agent.id, userId, conversationId, Math.round(maxTokens / 2));\r\n\r\n            if (messages[0]?.role != 'system') messages.unshift({ role: 'system', content: behavior });\r\n            messages.push({ role: 'user', content: userInput });\r\n            //saveMessagesToSession(agent.id, userId, conversationId, messages);\r\n\r\n            const customParams = {\r\n                messages,\r\n            };\r\n\r\n            const response: any = await llmHelper.promptRequest(null, config, agent, customParams).catch((error) => ({ error: error }));\r\n\r\n            // in case we have the response but it's empty string, undefined or null\r\n            if (!response) {\r\n                return { _error: ' LLM Error = Empty Response!', _debug: logger.output };\r\n            }\r\n\r\n            if (response?.error) {\r\n                logger.error(` LLM Error=${JSON.stringify(response.error)}`);\r\n\r\n                return { Response: response?.data, _error: response?.error + ' ' + response?.details, _debug: logger.output };\r\n            }\r\n\r\n            messages.push({ role: 'assistant', content: response });\r\n            saveMessagesToSession(agent.id, userId, conversationId, messages, ttl);\r\n\r\n            const result = { Response: response };\r\n\r\n            result['_debug'] = logger.output;\r\n\r\n            return result;\r\n        } catch (error) {\r\n            return { _error: error.message, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Agent from './Agent.class';\r\nimport AgentRequest from './AgentRequest.class';\r\n\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { uid } from '@sre/utils';\r\nconst console = Logger('ForkedAgent');\r\n\r\n/**\r\n * This class creates a forked agent from a parent agent branch, it allows running a sub-branch of the parent agent asynchrounously by providing a separate agent context\r\n * We use composition instead of inheritance to avoid circular dependencies between Agent and ForkedAgent\r\n */\r\nexport default class ForkedAgent {\r\n    public agent: Agent;\r\n    public get agentRequest() {\r\n        return this.agent.agentRequest;\r\n    }\r\n    public get components() {\r\n        return this.agent.components;\r\n    }\r\n    public get agentRuntime() {\r\n        return this.agent.agentRuntime;\r\n    }\r\n    public get jobID() {\r\n        return this.agent.jobID;\r\n    }\r\n    constructor(\r\n        private parent: Agent,\r\n        componentId: string //the component to fork from\r\n    ) {\r\n        const data = fork(this.parent.data, componentId);\r\n        //TODO : we need to create a default APIEndpoint bound to the root component if root component is not an APIEndpoint\r\n        const content = { name: this.parent.name, data, teamId: this.parent.teamId, debugSessionEnabled: false, version: this.parent.version };\r\n\r\n        const agentRequest = new AgentRequest(this.parent.agentRequest.req);\r\n        agentRequest.headers = []; //clear all headers from parent agent to conflict with child agent\r\n\r\n        this.agent = new Agent(this.parent.id, content, this.parent.agentSettings, agentRequest);\r\n        const JobID = componentId + '-' + uid();\r\n        this.agent.jobID = JobID;\r\n        //since the jobID was updated we need to create a different runtime\r\n        //FIXME : we need to find a way to avoid creating default runtime for forked agents, then replace it\r\n        //this.agent.agentRuntime = new AgentRuntime(this.agent);\r\n\r\n        //super(parent.id, content, agentRequest);\r\n    }\r\n\r\n    process(path: string, input: any) {\r\n        return this.agent.process(path, input);\r\n    }\r\n}\r\n\r\n// Helper function to clone a component and update its ID\r\nfunction cloneComponent(component) {\r\n    const newComponent = JSON.parse(JSON.stringify(component));\r\n    newComponent.id = component.id;\r\n    return newComponent;\r\n}\r\n\r\n// Helper function to recursively clone components and their connections\r\nfunction cloneRecursively(componentData, currentID, newIDMap, clonedComponents, clonedConnections) {\r\n    const componentToClone = componentData.components.find((c) => c.id === currentID);\r\n    if (!componentToClone) {\r\n        return;\r\n    }\r\n\r\n    const clonedComponent = cloneComponent(componentToClone);\r\n    newIDMap[currentID] = clonedComponent.id; // Map old ID to new ID\r\n    clonedComponents.push(clonedComponent);\r\n\r\n    // Find all outgoing connections for the current component\r\n    const outgoingConnections = componentData.connections.filter((conn) => conn.sourceId === currentID);\r\n    outgoingConnections.forEach((conn) => {\r\n        // Clone the connection and update the IDs\r\n        const clonedConnection = JSON.parse(JSON.stringify(conn));\r\n        clonedConnection.sourceId = clonedComponent.id;\r\n        if (!newIDMap[conn.targetId]) {\r\n            // Recursively clone the connected component if it hasn't been cloned yet\r\n            cloneRecursively(componentData, conn.targetId, newIDMap, clonedComponents, clonedConnections);\r\n        }\r\n        clonedConnection.targetId = newIDMap[conn.targetId];\r\n        clonedConnections.push(clonedConnection);\r\n    });\r\n}\r\n\r\nfunction fork(componentData, componentID) {\r\n    const clonedComponents: any[] = [];\r\n    const clonedConnections: any[] = [];\r\n    const newIDMap = {}; // Map to keep track of old to new ID mappings\r\n\r\n    // Start the cloning process from the specified component ID\r\n    cloneRecursively(componentData, componentID, newIDMap, clonedComponents, clonedConnections);\r\n\r\n    const rootComponentData = clonedComponents.find((e) => e.id == componentID);\r\n    if (rootComponentData) {\r\n        if (rootComponentData.name !== 'APIEndpoint') {\r\n            const APIEndpointData: any = {\r\n                id: `${componentID}_ENDPOINT`,\r\n                name: 'APIEndpoint',\r\n                outputs: [\r\n                    { name: 'headers', index: 0, default: true },\r\n                    { name: 'body', index: 1, default: true },\r\n                    { name: 'query', index: 2, default: true },\r\n                ],\r\n                inputs: [],\r\n                data: { endpoint: componentID, description: '', method: 'POST' },\r\n                displayName: 'APIEndpoint',\r\n                title: 'APIEndpoint',\r\n                description: '',\r\n            };\r\n\r\n            //APIEndpointData.inputs = JSON.parse(JSON.stringify(rootComponentData.inputs));\r\n            clonedComponents.push(APIEndpointData);\r\n\r\n            //find all previously connected forked inputs\r\n            const incomingConnections = componentData.connections.filter((conn) => conn.targetId === componentID);\r\n            // //deduplicate connections by targetId\r\n            // const uniqueIncomingConnections = incomingConnections.filter(\r\n            //     (conn, index, self) => index === self.findIndex((t) => t.targetId === conn.targetId && t.sourceIndex === conn.sourceIndex && t.targetIndex === conn.targetIndex),\r\n            // );\r\n\r\n            let i = 3;\r\n            for (let con of incomingConnections) {\r\n                const input = rootComponentData.inputs.find((e) => e.index == con.targetIndex);\r\n                const epInput = JSON.parse(JSON.stringify(input));\r\n                APIEndpointData.inputs.push(epInput);\r\n\r\n                const epOutput = {\r\n                    name: input.name,\r\n                    expression: `body.${input.name}`,\r\n                    optional: false,\r\n                    index: i++,\r\n                    default: false,\r\n                };\r\n                APIEndpointData.outputs.push(epOutput);\r\n\r\n                clonedConnections.push({\r\n                    sourceId: APIEndpointData.id,\r\n                    targetId: rootComponentData.id,\r\n                    sourceIndex: epOutput.index,\r\n                    targetIndex: input.index,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return the cloned sub-workflow\r\n    return {\r\n        components: clonedComponents,\r\n        connections: clonedConnections,\r\n    };\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport ForkedAgent from '@sre/AgentManager/ForkedAgent.class';\r\nimport Component from './Component.class';\r\nimport Joi from 'joi';\r\nimport { delay } from '../utils';\r\n\r\nexport default class Async extends Component {\r\n    static JOBS = {};\r\n    protected configSchema = null;\r\n    static ForkedAgent;\r\n    constructor() {\r\n        super();\r\n        // import('../ForkedAgent.class').then((ForkedAgent) => {\r\n        //     Async.ForkedAgent = ForkedAgent.default;\r\n        // });\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        //we set data.forked to true in the forked component in order to refork it again.\r\n        const forked = config.data.forked;\r\n        let _error = null;\r\n\r\n        try {\r\n            //const runtimeData = agent.agentRuntime.getRuntimeData(config.id);\r\n\r\n            if (!forked) {\r\n                const forkedAgent: ForkedAgent = new ForkedAgent(agent, config.id);\r\n                const JobID = forkedAgent.jobID;\r\n\r\n                forkedAgent.agent.async = true;\r\n                forkedAgent.agent.jobID = JobID;\r\n                //clean JobID branch\r\n                this.cleanJobIDBranch(forkedAgent.agent);\r\n\r\n                const componentData = forkedAgent.components[config.id];\r\n                componentData.data.forked = true;\r\n\r\n                forkedAgent.agentRequest.body = { ...input };\r\n\r\n                if (!Async.JOBS[agent.id]) Async.JOBS[agent.id] = {};\r\n                Async.JOBS[agent.id][JobID] = {\r\n                    //forkedAgent,\r\n                    status: 'pending',\r\n                };\r\n\r\n                //We use this to inform the debugger about the list of components used by this job\r\n                //this is only used to provide a visual feedback in the debugger UI\r\n                if (agent.debugSessionEnabled) {\r\n                    const _job_components = Object.keys(forkedAgent.components);\r\n                    agent.agentRuntime.updateComponent(config.id, { _job_components });\r\n                }\r\n\r\n                forkedAgent\r\n                    .process(`/api/${config.id}`, input)\r\n                    .then((result) => {\r\n                        Async.JOBS[agent.id][JobID].result = result;\r\n                        Async.JOBS[agent.id][JobID].status = 'done';\r\n                    })\r\n                    .finally(async () => {\r\n                        if (Async.JOBS[agent.id][JobID].status !== 'done') {\r\n                            Async.JOBS[agent.id][JobID].status = 'failed';\r\n                        }\r\n                        if (agent.debugSessionEnabled) {\r\n                            await delay(1000); //wait for the debugger to update the UI\r\n                            //ctxData in agentRuntime might have been updated by the main component\r\n                            //we need to reload it in order to ensure that we're updating the latest version\r\n                            agent.agentRuntime.reloadCtxData();\r\n                            agent.agentRuntime.updateComponent(config.id, { _job_components: [] });\r\n                        }\r\n                    });\r\n\r\n                return { JobID };\r\n            } else {\r\n                //const Input = input.Input;\r\n                let result = { JobID: agent.jobID };\r\n                for (let key in input) {\r\n                    result[key] = input[key];\r\n                }\r\n\r\n                return result;\r\n            }\r\n        } catch (error: any) {\r\n            _error = error;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    // private recursiveTagAsyncComponents(component, agent: Agent) {\r\n    //     for (let output of component.outputs) {\r\n    //         if (component.name == 'Async' && output.name === 'JobID') continue; //'JobID' is a special output\r\n    //         const connected = agent.connections.filter((c) => c.sourceId === component.id && c.sourceIndex === output.index);\r\n    //         if (!connected) continue;\r\n    //         for (let con of connected) {\r\n    //             const targetComponent = agent.components[con.targetId];\r\n    //             if (!targetComponent) continue;\r\n    //             targetComponent.async = true;\r\n    //             this.recursiveTagAsyncComponents(targetComponent, agent);\r\n    //         }\r\n    //     }\r\n    // }\r\n    // private tagAsyncComponents(agent: Agent) {\r\n    //     const componentsList: any[] = Object.values(agent.components);\r\n    //     const AsyncComponent = componentsList.find((c) => c.name === 'Async');\r\n    //     if (!AsyncComponent) return;\r\n    //     AsyncComponent.async = true;\r\n\r\n    //     this.recursiveTagAsyncComponents(AsyncComponent, agent);\r\n    // }\r\n    private cleanJobIDBranch(agent: Agent) {\r\n        //this.tagAsyncComponents(agent);\r\n\r\n        const componentsList: any[] = Object.values(agent.components);\r\n        const AsyncComponent = componentsList.find((c) => c.name === 'Async');\r\n        //const endpointComponent = componentsList.find((c) => c.name === 'APIEndpoint');\r\n        if (!AsyncComponent) return;\r\n        const jobIDOutputIndex = AsyncComponent.outputs.findIndex((o) => o.name === 'JobID');\r\n        if (jobIDOutputIndex === -1) return;\r\n        //delete connections where sourceId = AsyncComponent.id and sourceOutputIndex = jobIDOutputIndex and the component is not tagged as async\r\n        agent.connections = agent.connections.filter((c) => {\r\n            const toDelete = c.sourceId === AsyncComponent.id && c.sourceIndex === jobIDOutputIndex && !agent.components[c.targetId].async;\r\n            return !toDelete;\r\n        });\r\n\r\n        //TODO : remove orphaned branches\r\n        this.removeOrphanedBranches(agent);\r\n    }\r\n\r\n    private removeOrphanedBranches(agent: Agent) {\r\n        const toDelete: any[] = [];\r\n        for (let componentId in agent.components) {\r\n            const component = agent.components[componentId];\r\n            if (component.name === 'APIEndpoint') continue;\r\n            const connected = agent.connections.some((c) => c.targetId === component.id);\r\n            if (!connected) {\r\n                //this.removeComponent(agent, component.id);\r\n                toDelete.push(component.id);\r\n            }\r\n        }\r\n        for (let id of toDelete) {\r\n            this.removeComponent(agent, id);\r\n        }\r\n    }\r\n\r\n    private removeComponent(agent: Agent, componentId: string) {\r\n        const component = agent.components[componentId];\r\n        delete agent.components[componentId];\r\n\r\n        //delete connections where sourceId = componentId\r\n        agent.connections = agent.connections.filter((c) => c.sourceId !== componentId);\r\n        this.removeOrphanedBranches(agent);\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport axios from 'axios';\r\nimport Joi from 'joi';\r\nimport Async from './Async.class';\r\n\r\nexport default class Await extends Component {\r\n    static WAITS = {};\r\n\r\n    protected configSchema = Joi.object({\r\n        jobs_count: Joi.number().min(1).max(100).default(1).label('Jobs Count'),\r\n        max_time: Joi.number().min(1).max(21600).default(1).label('Max time'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            let Results: any = {};\r\n            const _error = null;\r\n            let jobs_count = parseInt(config.data.jobs_count || 1);\r\n            let max_time = parseInt(config.data.max_time || 1);\r\n\r\n            const jobs = Array.isArray(input.Jobs) ? input.Jobs : [input.Jobs];\r\n\r\n            if (!Await.WAITS[agent.id]) Await.WAITS[agent.id] = {};\r\n            if (!Await.WAITS[agent.id][config.id]) Await.WAITS[agent.id][config.id] = {};\r\n            if (!Await.WAITS[agent.id][config.id][agent.agentRuntime.workflowReqId])\r\n                Await.WAITS[agent.id][config.id][agent.agentRuntime.workflowReqId] = [];\r\n\r\n            //add jobs to the list\r\n            for (let jobID of jobs) Await.WAITS[agent.id][config.id][agent.agentRuntime.workflowReqId].push(jobID);\r\n\r\n            logger.debug('Jobs', jobs);\r\n            logger.debug('Waiting for jobs to finish');\r\n\r\n            let promise = new Promise((resolve, reject) => {\r\n                let interval = setInterval(() => {\r\n                    if (max_time < 0) {\r\n                        clearInterval(interval);\r\n                        return resolve(true);\r\n                    }\r\n                    let done = true;\r\n                    let completed = 0;\r\n                    for (let jobID of jobs) {\r\n                        if (Async.JOBS?.[agent.id]?.[jobID]?.status == 'pending') {\r\n                            done = false;\r\n                            break;\r\n                        } else {\r\n                            completed++;\r\n                        }\r\n                    }\r\n                    if (completed >= jobs_count) {\r\n                        done = true;\r\n                    }\r\n\r\n                    if (done) {\r\n                        clearInterval(interval);\r\n                        return resolve(true);\r\n                    }\r\n\r\n                    max_time -= 1;\r\n                }, 1000);\r\n            });\r\n\r\n            await promise;\r\n            logger.debug('Jobs finished, collecting results');\r\n            for (let jobID of jobs) {\r\n                Results[jobID] = {\r\n                    output: Async.JOBS?.[agent.id]?.[jobID]?.result,\r\n                    status: Async.JOBS?.[agent.id]?.[jobID]?.status || 'unknown_job',\r\n                };\r\n            }\r\n            delete Await.WAITS[agent.id][config.id][agent.agentRuntime.workflowReqId];\r\n\r\n            logger.debug('Results', Results);\r\n            return { Results, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error running code \\n${_error}\\n`);\r\n            delete Await.WAITS[agent.id][config.id][agent.agentRuntime.workflowReqId];\r\n\r\n            return { Output: undefined, _error, _debug: logger.output, _debug_time: logger.elapsedTime };\r\n        }\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport Joi from 'joi';\r\n\r\nexport default class ForEach extends Component {\r\n    protected configSchema = null;\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        let Loop = {};\r\n        let Result;\r\n        let _temp_result;\r\n        let _error = null;\r\n        let _in_progress = true;\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const inputObject = input.Input;\r\n            let inputArray = Array.isArray(inputObject) ? inputObject : [inputObject];\r\n\r\n            if (!Array.isArray(inputArray) && typeof inputArray === 'object')\r\n                //if json object, use the values\r\n                inputArray = Object.values(inputArray);\r\n\r\n            const runtimeData = agent.agentRuntime.getRuntimeData(config.id);\r\n            const _ForEachData = runtimeData._LoopData || { parentId: config.id, loopIndex: 0, loopLength: inputArray.length };\r\n\r\n            logger.debug(`Loop: ${_ForEachData.loopIndex} / ${_ForEachData.loopLength}`);\r\n            delete _ForEachData.branches; //reset branches (the number of branches is calculated in CallComponent@Agent.class.ts )\r\n\r\n            if (_ForEachData.result) {\r\n                _temp_result = _ForEachData.result;\r\n                logger.debug(`  => Loop Result : ${JSON.stringify(Loop, null, 2)}`);\r\n                logger.debug(`---------------------------------------------------`);\r\n            }\r\n\r\n            Loop = inputArray[_ForEachData.loopIndex];\r\n\r\n            logger.debug(`  => Loop Data : ${JSON.stringify(Loop, null, 2)}`);\r\n\r\n            _in_progress = Loop !== undefined;\r\n            if (_in_progress) {\r\n                _ForEachData.loopIndex++;\r\n            }\r\n            _ForEachData._in_progress = _in_progress;\r\n\r\n            agent.agentRuntime.updateRuntimeData(config.id, { _LoopData: _ForEachData });\r\n        } catch (error: any) {\r\n            _error = error;\r\n            logger.error(error);\r\n        }\r\n        if (!_in_progress) {\r\n            Result = _temp_result || [];\r\n\r\n            switch (config?.data?.format) {\r\n                case 'minimal':\r\n                    Result = Result.map((item) => cleanupResult(item.result));\r\n                    break;\r\n                case 'results-array':\r\n                    Result = Result.map((item) => Object.values(cleanupResult(item.result))).flat(Infinity);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return { Loop, Result, _temp_result, _error, _in_progress, _debug: logger.output };\r\n    }\r\n    async postProcess(output, config, agent: Agent): Promise<any> {\r\n        output = await super.postProcess(output, config, agent);\r\n        if (output?.result) {\r\n            delete output.result._temp_result;\r\n            delete output.result._in_progress;\r\n            delete output.result.Loop;\r\n        }\r\n        return output;\r\n    }\r\n}\r\nfunction cleanupResult(result) {\r\n    if (typeof result !== 'object') return result;\r\n    if (result._debug) delete result._debug;\r\n    if (result._error) delete result._error;\r\n    if (result._temp_result) delete result._temp_result;\r\n    if (result._in_progress) delete result._in_progress;\r\n    return result;\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport axios from 'axios';\r\nimport Joi from 'joi';\r\nimport _config from '@sre/config';\r\nimport { TemplateStringHelper } from '@sre/helpers/TemplateString.helper';\r\n\r\nexport default class Code extends Component {\r\n    protected configSchema = Joi.object({\r\n        code_vars: Joi.string().max(1000).allow('').label('Variables'),\r\n        code_body: Joi.string().max(500000).allow('').label('Code'),\r\n        _templateSettings: Joi.object().allow(null).label('Template Settings'),\r\n        _templateVars: Joi.object().allow(null).label('Template Variables'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            let Output: any = {};\r\n            let _error = undefined;\r\n            const url = _config.env.CODE_SANDBOX_URL + '/run-js';\r\n\r\n            let codeInputs = {};\r\n            for (let fieldName in input) {\r\n                const _type = typeof input[fieldName];\r\n                switch (_type) {\r\n                    case 'string':\r\n                        //escape string\r\n                        //codeInputs[fieldName] = `\\`${input[fieldName]}\\``;\r\n\r\n                        //encode string\r\n                        const b64encoded = Buffer.from(input[fieldName]).toString('base64');\r\n                        codeInputs[fieldName] = `___internal.b64decode('${b64encoded}')`;\r\n\r\n                        break;\r\n                    case 'number':\r\n                    case 'boolean':\r\n                        codeInputs[fieldName] = input[fieldName];\r\n                        break;\r\n                    default:\r\n                        codeInputs[fieldName] = input[fieldName];\r\n                        break;\r\n                }\r\n            }\r\n            //FIXME : don't trust code_vars from user input ==> generate it\r\n\r\n            // let code_vars = parseTemplate(config.data.code_vars || '', codeInputs, { escapeString: false, processUnmatched: false });\r\n            let code_vars = TemplateStringHelper.create(config.data.code_vars || '').parse(codeInputs).result;\r\n            //TODO: the current template parser doesn't support the processUnmatched or unmached options !!!!\r\n            // code_vars = parseTemplate(code_vars || '', codeInputs, { escapeString: false, unmached: 'undefined' });\r\n            let code_body = config.data.code_body;\r\n            if (config.data._templateVars) {\r\n                // code_body = parseTemplate(code_body, config.data._templateVars);\r\n                code_body = TemplateStringHelper.create(code_body).parse(config.data._templateVars).result;\r\n            }\r\n            const code = code_vars + '\\n' + code_body;\r\n\r\n            logger.debug(` Running code \\n${code}\\n`);\r\n\r\n            const result: any = await axios.post(url, { code }).catch((error) => ({ error }));\r\n\r\n            if (result.error) {\r\n                _error = result.error?.response?.data || result.error?.message || result.error.toString();\r\n                logger.error(` Error running code \\n${_error}\\n`);\r\n                Output = undefined; //prevents running next component if the code execution failed\r\n            } else {\r\n                logger.debug(` Code result \\n${JSON.stringify(result.data, null, 2)}\\n`);\r\n                Output = result.data?.Output;\r\n            }\r\n\r\n            return { Output, _error, _debug: logger.output };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error running code \\n${_error}\\n`);\r\n            return { Output: undefined, _error, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import { HfInference } from '@huggingface/inference';\r\nimport Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport hfParams from '../data/hugging-face.params.json';\r\nimport Joi from 'joi';\r\nimport { TemplateStringHelper } from '@sre/helpers/TemplateString.helper';\r\nimport { convertStringToRespectiveType, delay, isBase64, kebabToCapitalize, kebabToCamel } from '../utils';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\n\r\nfunction shouldNestInputs(formatRequestPattern) {\r\n    const trimmedPattern = formatRequestPattern?.trim();\r\n    return /^(inputs|data):\\s*{(?![{])/.test(trimmedPattern);\r\n}\r\n\r\nfunction validateAndParseJson(value, helpers) {\r\n    let parsedJson: any = null;\r\n\r\n    // Try parsing the JSON string\r\n    try {\r\n        parsedJson = JSON.parse(value);\r\n    } catch (error) {\r\n        // If parsing fails, return an error\r\n        return helpers.error('string.invalidJson', { value });\r\n    }\r\n\r\n    // Check if the result is an object\r\n    if (typeof parsedJson !== 'object' || parsedJson === null) {\r\n        return helpers.error('string.notJsonObject', { value });\r\n    }\r\n\r\n    // Check for empty keys\r\n    for (const key in parsedJson) {\r\n        if (key.trim() === '') {\r\n            return helpers.error('object.emptyKey', { value });\r\n        }\r\n    }\r\n\r\n    // Return the parsed JSON if all validations pass\r\n    return parsedJson;\r\n}\r\n\r\nexport default class HuggingFace extends Component {\r\n    protected configSchema = Joi.object({\r\n        accessToken: Joi.string().max(350).required().label('Access Token'),\r\n        modelName: Joi.string().max(100).required(),\r\n        modelTask: Joi.string().max(100).required(),\r\n        inputConfig: Joi.string().allow(''),\r\n        parameters: Joi.string().custom(validateAndParseJson, 'custom JSON validation').allow(''),\r\n        name: Joi.string().max(100).required(),\r\n        displayName: Joi.string().max(100).required(),\r\n        desc: Joi.string().max(5000).required().allow(''),\r\n        logoUrl: Joi.string().max(500).allow(''),\r\n        disableCache: Joi.boolean().strict(),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        logger.debug(`=== Hugging Face Log ===`);\r\n\r\n        const agentId = agent?.id;\r\n\r\n        const teamId = agent?.teamId;\r\n        // const accessToken = await parseKey(config?.data?.accessToken, teamId);\r\n        const accessToken = (await TemplateStringHelper.create(config?.data?.accessToken).parseTeamKeysAsync(teamId).asyncResult) as string;\r\n\r\n        if (!accessToken) {\r\n            return { _error: 'Please provide a valid Hugging Face Access Token', _debug: logger.output };\r\n        }\r\n\r\n        const hf = new HfInference(accessToken);\r\n\r\n        const task = config?.data?.modelTask;\r\n\r\n        if (!task) {\r\n            return { _error: 'Hugging Face Task is required!', _debug: logger.output };\r\n        }\r\n\r\n        logger.debug(`Task: ${kebabToCapitalize(task)}`);\r\n\r\n        let hfFunc = kebabToCamel(task);\r\n\r\n        // * Right now 'text2textGeneration' function is not available, so we are using 'textGeneration' for it.\r\n        // Reference - https://huggingface.co/docs/api-inference/en/detailed_parameters#text2text-generation-task\r\n        if (hfFunc === 'text2textGeneration') {\r\n            hfFunc = 'textGeneration';\r\n        }\r\n\r\n        if (!hf?.[hfFunc]) {\r\n            return { _error: `Inference API does not support for this task - ${kebabToCapitalize(task)}`, _debug: logger.output };\r\n        }\r\n\r\n        const modelName = config?.data?.modelName;\r\n\r\n        if (!modelName) {\r\n            return { _error: 'Hugging Face Model is required!', _debug: logger.output };\r\n        }\r\n\r\n        logger.debug(`Model Name: ${modelName}`);\r\n\r\n        //const inputConfig = JSON.parse(config?.data?.inputConfig || '{}');\r\n\r\n        let inputConfig: any = {};\r\n        const formatRequest = hfParams?.[task]?.formatRequest;\r\n        const _hfParams = hfParams?.[task]?.inputs;\r\n        if (_hfParams && Object.keys(_hfParams).length > 0) {\r\n            for (const key in _hfParams) {\r\n                const config = _hfParams[key];\r\n                inputConfig[key] = config;\r\n            }\r\n            if (typeof inputConfig === 'object' && inputConfig !== null) {\r\n                inputConfig = { ...inputConfig, formatRequest };\r\n            }\r\n        }\r\n\r\n        if (!inputConfig || Object.keys(inputConfig)?.length === 0) {\r\n            console.log('No inputs config found for Hugging Face Model!');\r\n        }\r\n\r\n        let inputs = {};\r\n\r\n        if (!input || Object.keys(input)?.length === 0) {\r\n            return { _error: 'Please provide a valid input!', _debug: logger.output };\r\n        }\r\n\r\n        if (typeof input !== 'object') {\r\n            return { _error: 'Invalid input!', _debug: logger.output };\r\n        }\r\n\r\n        if (typeof input == 'object' && Object.keys(input)?.length > 0) {\r\n            for (const key in input) {\r\n                if (inputConfig?.[key]) {\r\n                    let value = input[key];\r\n                    let name = inputConfig[key]['request_parameter_name'];\r\n                    let type = inputConfig[key]['request_parameter_type'];\r\n\r\n                    if (type && type?.includes('Blob')) {\r\n                        try {\r\n                            // const file = new SmythFile(value);\r\n                            // const blob = await file.toBlob(); // Converts to Blob for file inputs\r\n                            // inputs[name] = blob;\r\n                            const binaryFile = new BinaryInput(value);\r\n                            const buffer = await binaryFile.getBuffer();\r\n                            const blob = new Blob([buffer]);\r\n                            inputs[name] = blob;\r\n                        } catch (error: any) {\r\n                            return { _error: error?.message || JSON.stringify(error), _debug: logger.output };\r\n                        }\r\n                    } else {\r\n                        inputs[name] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Determine if inputs should be nested based on formatRequest\r\n        const nestInputs = shouldNestInputs(inputConfig.formatRequest);\r\n        // Apply the determined structure to newInputs\r\n        const structuredInputs = nestInputs ? { inputs } : inputs;\r\n\r\n        // Blob data will be converted to an empty object '{}', when stringified during logging. We need log something so that user can understand that it is a Blob\r\n        let inputsLog;\r\n\r\n        if (structuredInputs['inputs'] && typeof structuredInputs['inputs'] === 'object') {\r\n            inputsLog = { ...structuredInputs['inputs'] };\r\n\r\n            for (const [key, value] of Object.entries(structuredInputs['inputs'] || {})) {\r\n                if (value instanceof Blob) {\r\n                    inputsLog[key] = `Blob size=${value.size}`;\r\n                }\r\n            }\r\n        } else {\r\n            inputsLog = structuredInputs;\r\n        }\r\n\r\n        logger.debug('Inputs: ', inputsLog);\r\n\r\n        let params = JSON.parse(config?.data?.parameters || '{}');\r\n        params = convertStringToRespectiveType(params);\r\n\r\n        let parameters = {};\r\n\r\n        if (params && Object.keys(params)?.length > 0) {\r\n            for (const key in params) {\r\n                const value = params[key];\r\n\r\n                if (typeof value === 'string') {\r\n                    // if value is 'None' then skip it\r\n                    if (value?.toLowerCase() === 'none') continue;\r\n\r\n                    parameters[key] = TemplateStringHelper.create(value).parse(input).result;\r\n                } else {\r\n                    parameters[key] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        let args = { model: modelName, ...structuredInputs };\r\n\r\n        const options = {};\r\n\r\n        // default value of use_cache is true, make it false if disableCache is true\r\n        if (config?.data?.disableCache) {\r\n            options['use_cache'] = false;\r\n        }\r\n\r\n        if (Object.keys(parameters)?.length > 0) {\r\n            args['parameters'] = parameters;\r\n\r\n            logger.debug('Parameters: \\n', parameters);\r\n        }\r\n\r\n        const modelCallWithRetry = async ({ retryCount = 0, retryLimit = 2, retryDelay = 1000 }) => {\r\n            try {\r\n                /*\r\n                Provide the 'request' method when the method is not found and as a fallback for the following error:\r\n                InferenceOutputError: Invalid inference output: Expected Array<{summary_text: string}>. Use the 'request' method with the same parameters to do a custom call with no type checking.\r\n                */\r\n                if (typeof hf[hfFunc] !== 'function' || retryCount === retryLimit) {\r\n                    hfFunc = 'request';\r\n                }\r\n                const result = await hf[hfFunc](args, options);\r\n                let output;\r\n\r\n                if (result instanceof Blob) {\r\n                    // Handle case where result is directly a Blob\r\n                    // const file = new SmythFile(result);\r\n                    // const fileObj = await file.toSmythFileObject({\r\n                    //     metadata: {\r\n                    //         teamid: teamId,\r\n                    //         agentid: agentId,\r\n                    //     },\r\n                    //     baseUrl: agent?.baseUrl,\r\n                    // });\r\n                    // output = fileObj;\r\n                    const obj = await BinaryInput.from(result).getJsonData(AccessCandidate.agent(agent.id));\r\n                    output = obj;\r\n                } else if (Array.isArray(result)) {\r\n                    // Handle case where result is an array of objects containing Blobs or base64 strings\r\n                    output = await Promise.all(\r\n                        result.map(async (item) => {\r\n                            if (item.blob instanceof Blob || (typeof item.blob === 'string' && isBase64(item.blob))) {\r\n                                let binaryInput: BinaryInput;\r\n\r\n                                if (item.blob instanceof Blob) {\r\n                                    // file = new SmythFile(item.blob);\r\n\r\n                                    binaryInput = BinaryInput.from(item.blob);\r\n                                } else {\r\n                                    // file = new SmythFile(item.blob, item['content-type']);\r\n                                    binaryInput = BinaryInput.from(item.blob, undefined, item['content-type']);\r\n                                }\r\n                                // const fileObj = await file.toSmythFileObject({\r\n                                //     metadata: {\r\n                                //         teamid: teamId,\r\n                                //         agentid: agentId,\r\n                                //     },\r\n                                //     baseUrl: agent?.baseUrl,\r\n                                // });\r\n                                const fileObj = await binaryInput.getJsonData(AccessCandidate.agent(agent.id));\r\n                                return { ...item, blob: fileObj };\r\n                            } else {\r\n                                return item;\r\n                            }\r\n                        })\r\n                    );\r\n                } else {\r\n                    // Handle case where result is neither a Blob nor an array of Blob-containing objects\r\n                    output = result;\r\n                }\r\n                return output;\r\n            } catch (error) {\r\n                if (retryCount < retryLimit) {\r\n                    await delay(retryDelay);\r\n\r\n                    return modelCallWithRetry({\r\n                        retryCount: retryCount + 1,\r\n                        retryLimit,\r\n                        retryDelay: retryDelay * 2,\r\n                    });\r\n                }\r\n\r\n                throw error;\r\n            }\r\n        };\r\n\r\n        try {\r\n            const output = await modelCallWithRetry({\r\n                retryCount: 0,\r\n                retryLimit: 2,\r\n                retryDelay: 5000,\r\n            });\r\n\r\n            logger.debug('Output: \\n', output);\r\n\r\n            return { Output: output, _debug: logger.output };\r\n        } catch (error: any) {\r\n            console.log(`Error on running Hugging Face Model!`, error);\r\n            console.log('Error: args, options ', args, options);\r\n\r\n            return { _error: `Error from Hugging Face: \\n${error?.message || JSON.stringify(error)}`, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport Joi from 'joi';\r\nimport { TemplateStringHelper } from '@sre/helpers/TemplateString.helper';\r\n\r\nfunction validateAndParseJson(value, helpers) {\r\n    let parsedJson: any = null;\r\n\r\n    // Try parsing the JSON string\r\n    try {\r\n        parsedJson = JSON.parse(value);\r\n    } catch (error) {\r\n        // If parsing fails, return an error\r\n        return helpers.error('string.invalidJson', { value });\r\n    }\r\n\r\n    // Check if the result is an object\r\n    if (typeof parsedJson !== 'object' || parsedJson === null) {\r\n        return helpers.error('string.notJsonObject', { value });\r\n    }\r\n\r\n    // Check for empty keys\r\n    for (const key in parsedJson) {\r\n        if (key.trim() === '') {\r\n            return helpers.error('object.emptyKey', { value });\r\n        }\r\n    }\r\n\r\n    // Return the parsed JSON if all validations pass\r\n    return parsedJson;\r\n}\r\n\r\nexport default class ZapierAction extends Component {\r\n    protected configSchema = Joi.object({\r\n        actionName: Joi.string().max(100).required(),\r\n        actionId: Joi.string().max(100).required(),\r\n        logoUrl: Joi.string().max(500).allow(''),\r\n        apiKey: Joi.string().max(350).required(),\r\n        params: Joi.string().custom(validateAndParseJson, 'custom JSON validation').allow(''),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        logger.debug(`=== Zapier Action Log ===`);\r\n\r\n        const teamId = agent?.teamId;\r\n        // const apiKey = await parseKey(config?.data?.apiKey, teamId);\r\n        const apiKey = await TemplateStringHelper.create(config?.data?.apiKey).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n        if (!apiKey) {\r\n            return { _error: 'You are not authorized to run the Zapier Action!', _debug: logger.output };\r\n        }\r\n\r\n        const actionId = config?.data?.actionId;\r\n\r\n        if (!actionId) {\r\n            return { _error: 'Zapier Action ID is required!', _debug: logger.output };\r\n        }\r\n\r\n        if (!Object.keys(input || {})?.length) {\r\n            return { _error: 'Give a plain english description of exact action you want to do!', _debug: logger.output };\r\n        }\r\n\r\n        let _input = {};\r\n\r\n        for (const [key, value] of Object.entries(input)) {\r\n            // TODO: handle SmythFileObject in SRE context\r\n            /*\r\n            PROBLEM:\r\n            in SRE context, if the passed input is a file, it will be an object with a url property with\r\n            something like smythfs://teamId.team/candidateId/..., correct?\r\n            the problem now is that, the zapier action expects a public url and not an INTERNAL private resource.\r\n\r\n            Solutions I thought of:\r\n            - pass a base64 \r\n            */\r\n            // if (isSmythFileObject(value)) {\r\n            //     _input[key] = (value as SmythFileObject)?.url;\r\n            // } else {\r\n            _input[key] = value;\r\n            // }\r\n        }\r\n\r\n        try {\r\n            const url = `https://actions.zapier.com/api/v1/exposed/${actionId}/execute/?api_key=${apiKey}`;\r\n            const res = await axios.post(url, { ..._input });\r\n\r\n            logger.debug(`Output:\\n`, res?.data);\r\n\r\n            return { Output: res?.data, _debug: logger.output };\r\n        } catch (error: any) {\r\n            console.log('Error Running Zapier Action: \\n', error);\r\n\r\n            // Sometimes 'error?.response?.data' is an empty Object then we need to use 'error?.message'\r\n            let message = Object.keys(error?.response?.data || {})?.length ? error?.response?.data : error?.message;\r\n\r\n            if (typeof message === 'object') message = JSON.stringify(message);\r\n\r\n            logger.error(`Error running Zapier Action!`, message);\r\n            logger.error('Error Inputs ', input);\r\n\r\n            return { _error: `Zapier Error: ${message}`, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Joi from 'joi';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { Conversation } from '@sre/helpers/Conversation.helper';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nimport Component from './Component.class';\r\n\r\nexport default class GPTPlugin extends Component {\r\n    protected configSchema = Joi.object({\r\n        model: Joi.string().optional(),\r\n        openAiModel: Joi.string().required(), // ! Legacy\r\n        specUrl: Joi.string().max(2048).uri().required().description('URL of the OpenAPI specification'),\r\n        descForModel: Joi.string().max(5000).required().allow('').label('Description for Model'),\r\n        name: Joi.string().max(500).required().allow(''),\r\n        desc: Joi.string().max(5000).required().allow('').label('Description'),\r\n        logoUrl: Joi.string().max(8192).allow(''),\r\n        id: Joi.string().max(200),\r\n        version: Joi.string().max(100).allow(''),\r\n        domain: Joi.string().max(253).allow(''),\r\n    });\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    init() {}\r\n\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        logger.debug(`=== GPT Plugin Log ===`);\r\n\r\n        try {\r\n            const specUrl = config?.data?.specUrl;\r\n\r\n            if (!specUrl) {\r\n                return { _error: 'Please provide a Open API Specification URL!', _debug: logger.output };\r\n            }\r\n\r\n            const model = config?.data?.model || config?.data?.openAiModel;\r\n            const descForModel = TemplateString(config?.data?.descForModel).parse(input).result;\r\n            let prompt = '';\r\n\r\n            if (input?.Prompt) {\r\n                prompt = typeof input?.Prompt === 'string' ? input?.Prompt : JSON.stringify(input?.Prompt);\r\n            } else if (input?.Query) {\r\n                prompt = typeof input?.Query === 'string' ? input?.Query : JSON.stringify(input?.Query);\r\n            }\r\n\r\n            if (!prompt) {\r\n                return { _error: 'Please provide a prompt', _debug: logger.output };\r\n            }\r\n\r\n            // TODO [Forhad]: Need to check and validate input prompt token\r\n\r\n            const conv = new Conversation(model, specUrl);\r\n\r\n            const result = await conv.prompt(prompt);\r\n\r\n            logger.debug(`Response:\\n`, result, '\\n');\r\n\r\n            return { Output: result, _debug: logger.output };\r\n        } catch (error: any) {\r\n            console.error('Error on running GPT Plugin: ', error);\r\n            return { _error: `Error on running GPT Plugin!\\n${error?.message || JSON.stringify(error)}`, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport Component from './Component.class';\r\nimport Joi from 'joi';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\nimport { GenerateImageConfig } from '@sre/types/LLM.types';\r\n\r\nexport default class ImageGenerator extends Component {\r\n    protected configSchema = Joi.object({\r\n        model: Joi.string().valid('dall-e-2', 'dall-e-3').required(),\r\n        sizeDalle2: Joi.string().valid('256x256', '512x512', '1024x1024').required(),\r\n        sizeDalle3: Joi.string().valid('1024x1024', '1792x1024', '1024x1792').required(),\r\n        quality: Joi.string().valid('standard', 'hd').required(),\r\n        style: Joi.string().valid('vivid', 'natural').required(),\r\n        isRawInputPrompt: Joi.boolean().strict(),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        logger.debug(`=== Image Generator Log ===`);\r\n\r\n        let model = config?.data?.model;\r\n\r\n        if (!model) {\r\n            return { _error: 'Model Not Found: Either DALL·E 3 or DALL·E 2 is required!', _debug: logger.output };\r\n        }\r\n\r\n        let prompt = typeof input?.Prompt === 'string' ? input?.Prompt : JSON.stringify(input?.Prompt);\r\n\r\n        // ! LATER IMPROVEMENT: support image variation API\r\n        /* let image = input?.Image || null;\r\n        let shouldGenerateVariation = false;\r\n        let tempImagePath = '';\r\n\r\n        if (image) {\r\n            const file = new SmythFile(image);\r\n            image = await file.toFsReadStream();\r\n\r\n            if (image) {\r\n                shouldGenerateVariation = true;\r\n                tempImagePath = image?.path;\r\n\r\n                model = 'dall-e-2';\r\n            }\r\n        } */\r\n\r\n        // ! LATER IMPROVEMENT: support image variation API\r\n        // if (!prompt && !image)\r\n        if (!prompt) {\r\n            return { _error: 'Please provide a prompt or Image', _debug: logger.output };\r\n        }\r\n\r\n        let _finalPrompt = prompt;\r\n\r\n        logger.debug(`Prompt: \\n`, prompt);\r\n\r\n        const responseFormat = config?.data?.responseFormat || 'url';\r\n\r\n        let args: GenerateImageConfig = {\r\n            response_format: responseFormat,\r\n            model,\r\n        };\r\n\r\n        // ! LATER IMPROVEMENT: support image variation API\r\n        /* if (shouldGenerateVariation) {\r\n            args = {\r\n                image,\r\n                model,\r\n                response_format: responseFormat,\r\n            };\r\n        } else {\r\n            args = {\r\n                prompt,\r\n                model,\r\n                response_format: responseFormat,\r\n            };\r\n        } */\r\n\r\n        if (model === 'dall-e-3') {\r\n            const size = config?.data?.sizeDalle3 || '1024x1024';\r\n            const quality = config?.data?.quality || 'standard';\r\n            const style = config?.data?.style || 'vivid';\r\n            args.size = size;\r\n            args.quality = quality;\r\n            args.style = style;\r\n\r\n            const isRawInputPrompt = config?.data?.isRawInputPrompt || false;\r\n\r\n            if (isRawInputPrompt) {\r\n                _finalPrompt = `I NEED to test how the tool works with extremely simple prompts. DO NOT add any detail, just use it AS-IS: ${input?.Prompt}`;\r\n            }\r\n        } else if (model === 'dall-e-2') {\r\n            const size = config?.data?.sizeDalle2 || '256x256';\r\n            const numberOfImages = parseInt(config?.data?.numberOfImages) || 1;\r\n            args.size = size;\r\n            args.n = numberOfImages;\r\n        }\r\n\r\n        try {\r\n            // ! LATER IMPROVEMENT: support image variation API\r\n            /* if (shouldGenerateVariation) {\r\n                response = await OpenAI.generateImageVariation(args);\r\n\r\n                // remove temp image\r\n                const removeFile = promisify(fs.unlink);\r\n                removeFile(tempImagePath);\r\n            } else {\r\n                response = await OpenAI.generateImage(args);\r\n            } */\r\n\r\n            // let response = await OpenAI.generateImage(args);\r\n            const llmHelper: LLMHelper = LLMHelper.load(model);\r\n\r\n            // if the llm is undefined, then it means we removed the model from our system\r\n            if (!llmHelper.connector) {\r\n                return {\r\n                    _error: `The model '${model}' is not available. Please try a different one.`,\r\n                    _debug: logger.output,\r\n                };\r\n            }\r\n            const response: any = await llmHelper.imageGenRequest(_finalPrompt, args, agent).catch((error) => ({ error: error }));\r\n\r\n            let output = response?.data?.[0]?.[responseFormat];\r\n            const revised_prompt = response?.data?.[0]?.revised_prompt;\r\n\r\n            if (revised_prompt && prompt !== revised_prompt) {\r\n                logger.debug(`Revised Prompt:\\n${revised_prompt}`);\r\n            }\r\n\r\n            logger.debug(`Output:`, output);\r\n\r\n            return { Output: output, _debug: logger.output };\r\n        } catch (error: any) {\r\n            return { _error: `Generating Image(s)\\n${error?.message || JSON.stringify(error)}`, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import { JSONContentHelper } from '@sre/helpers/JsonContent.helper';\r\nimport Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport { LLMHelper } from '@sre/LLMManager/LLM.helper';\r\n// import { parseJson, parseTemplate } from '../../services/utils';\r\nimport Joi from 'joi';\r\n// import { getLLMApiKey } from '../../services/LLMHelper/utils';\r\n\r\nexport default class Classifier extends Component {\r\n    protected configSchema = Joi.object({\r\n        model: Joi.string().max(200).required(),\r\n        prompt: Joi.string().max(30000).allow('').label('Prompt'),\r\n    });\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    escapeJSONString(str: string) {\r\n        return str.replace(/\\{/g, '<[<(').replace(/\\}/g, ')>]>').replace(/\"/g, '`');\r\n    }\r\n    unescapeJSONString(str: string) {\r\n        return str\r\n            .replace(/<\\[<\\(/g, '{')\r\n            .replace(/\\)>]>/g, '}')\r\n            .replace(/`/g, '\"');\r\n    }\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        //let debugLog = agent.agentRuntime?.debug ? [] : undefined;\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n\r\n        const inputCopy = JSON.parse(JSON.stringify(input));\r\n        for (let key in inputCopy) {\r\n            if (typeof inputCopy[key] === 'string') {\r\n                inputCopy[key] = this.escapeJSONString(inputCopy[key]);\r\n            } else if (typeof inputCopy[key] === 'object') {\r\n                inputCopy[key] = JSON.stringify(inputCopy[key]);\r\n                inputCopy[key] = this.escapeJSONString(inputCopy[key]);\r\n            }\r\n        }\r\n\r\n        const _input = typeof input === 'string' ? input : JSON.stringify(inputCopy, null, 2);\r\n        //const categories = config.outputs.map((output) => (output.name[0] != '[' ? output.name : null)).filter((e) => e);\r\n        const categories = {};\r\n        for (let con of config.outputs) categories[con.name] = con.description || '';\r\n\r\n        const outputs = {};\r\n        for (let con of config.outputs) {\r\n            outputs[con.name] = '<Boolean|String>';\r\n        }\r\n\r\n        const model: string = config.data.model;\r\n        logger.log(` Selected model : ${model}`);\r\n\r\n        let prompt = '';\r\n        const excludedKeys = ['_debug', '_error'];\r\n        const outputKeys = Object.keys(outputs).filter((key) => !excludedKeys.includes(key));\r\n\r\n        if (outputKeys.length > 0) {\r\n            const outputFormat = {};\r\n            outputKeys.forEach((key) => (outputFormat[key] = outputs[key]));\r\n\r\n            prompt = `${config.data.prompt}\r\n${_input}\r\n\r\n---\r\nCategories: \r\n${JSON.stringify(categories, null, 2)}`;\r\n\r\n            prompt = TemplateString(prompt).parse(input).result;\r\n        }\r\n\r\n        logger.log(` Enhanced prompt \\n${prompt}\\n`);\r\n\r\n        if (!prompt) {\r\n            logger.error(` Missing information, Cannot run classifier`);\r\n\r\n            return { _error: 'Missing information, Cannot run classifier', _debug: logger.output };\r\n        }\r\n\r\n        // const response: any = await LLMHelper.componentLLMRequest(prompt, model, params, agent).catch((error) => ({ error: error }));\r\n\r\n        const llmHelper: LLMHelper = LLMHelper.load(model || 'echo');\r\n        if (!llmHelper.connector) {\r\n            return {\r\n                _error: `The model '${model}' is not available. Please try a different one.`,\r\n                _debug: logger.output,\r\n            };\r\n        }\r\n\r\n        try {\r\n            let response = await llmHelper.promptRequest(prompt, config, agent).catch((error) => ({ error: error }));\r\n\r\n            if (response.error) {\r\n                logger.error(` LLM Error=`, response.error);\r\n\r\n                return { _error: response.error.toString(), _debug: logger.output };\r\n            }\r\n\r\n            // let parsed = parseJson(response);\r\n            let parsed = typeof response === 'string' ? JSONContentHelper.create(response).tryParse() : response;\r\n\r\n            for (let entry in parsed) {\r\n                if (!parsed[entry]) delete parsed[entry];\r\n                else {\r\n                    if (typeof parsed[entry] === 'string') {\r\n                        parsed[entry] = this.unescapeJSONString(parsed[entry]);\r\n                        // const parsedValue = parseJson(parsed[entry]);\r\n                        const parsedValue = JSONContentHelper.create(parsed[entry]).tryParse();\r\n                        if (typeof parsedValue === 'object' && !parsedValue.error) parsed[entry] = parsedValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (parsed.error) {\r\n                parsed._error = parsed.error;\r\n                logger.warn(` Post process error=${parsed.error}`);\r\n                delete parsed.error;\r\n            }\r\n\r\n            logger.log(' Classifier result', parsed);\r\n\r\n            parsed['_debug'] = logger.output;\r\n\r\n            return parsed;\r\n        } catch (error) {\r\n            return { _error: error.message, _debug: logger.output };\r\n        }\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\nimport crypto from 'crypto';\r\nimport querystring from 'querystring';\r\n\r\nexport default class FSign extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    init() {}\r\n    async process(input, config, agent: Agent) {\r\n        await super.process(input, config, agent);\r\n        const logger = this.createComponentLogger(agent, config.name);\r\n        try {\r\n            const _error = undefined;\r\n            const teamId = agent ? agent.teamId : null;\r\n\r\n            let data = input.Data;\r\n            //if (typeof data === 'object') data = JSON.stringify(data);\r\n            let signingKey = input.Key || config.data.key;\r\n            // signingKey = parseTemplate(signingKey, input, { processUnmatched: false });\r\n            // signingKey = await parseKey(signingKey, teamId);\r\n            signingKey = await TemplateString(signingKey).parse(input).parseTeamKeysAsync(teamId).asyncResult;\r\n\r\n            const signMethod = config.data.signMethod || 'HMAC';\r\n            const dataTransform = config.data.dataTransform || 'None';\r\n            const hashType = config.data.hashType || 'md5';\r\n            const RSA_padding = config.data.RSA_padding;\r\n            const RSA_saltLength = config.data.RSA_saltLength;\r\n            const encoding = config.data.encoding || 'hex';\r\n\r\n            if (typeof data != 'string') {\r\n                switch (dataTransform) {\r\n                    case 'Stringify':\r\n                        data = JSON.stringify(data);\r\n                        break;\r\n                    case 'Querystring':\r\n                        data = querystring.stringify(data);\r\n                        break;\r\n                }\r\n            }\r\n            logger.debug(' Data to sign = ', data);\r\n            logger.debug(` Signing data using ${signMethod} algorithm and ${encoding} encoding`);\r\n            const Signature = this.signData(data, signingKey, signMethod, encoding, { hashType, RSA_padding, RSA_saltLength });\r\n\r\n            logger.debug(` Signature generated: ${Signature}`);\r\n            return { Signature, _error, _debug: logger.output };\r\n        } catch (err: any) {\r\n            const _error = err?.response?.data || err?.message || err.toString();\r\n            logger.error(` Error generating hash \\n${_error}\\n`);\r\n            return { hash: undefined, _error, _debug: logger.output };\r\n        }\r\n    }\r\n\r\n    private signData(data, key, signMethod, encoding = 'hex', options: any = {}) {\r\n        // Determine if the algorithm is for HMAC or RSA/DSA/ECDSA\r\n        switch (signMethod) {\r\n            case 'RSA':\r\n                const algo = `${signMethod}-${options.hashType || 'md5'}`.toUpperCase();\r\n                const sign = crypto.createSign(algo);\r\n                sign.update(data);\r\n\r\n                const sign_options = {\r\n                    key,\r\n                    padding: options.RSA_padding ? crypto.constants[options.RSA_padding] : undefined,\r\n                    saltLength: options.RSA_saltLength ? crypto.constants[options.RSA_saltLength] : undefined,\r\n                };\r\n                // For RSA/DSA/ECDSA, options may include padding and saltLength\r\n                return sign.sign(sign_options, encoding.toLowerCase() as crypto.BinaryToTextEncoding);\r\n\r\n            case 'HMAC':\r\n                const hmac = crypto.createHmac(options.hashType, key);\r\n                hmac.update(data);\r\n                return hmac.digest(encoding as crypto.BinaryToTextEncoding);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import Component from './Component.class';\r\nimport APIEndpoint from './APIEndpoint.class';\r\nimport APIOutput from './APIOutput.class';\r\nimport PromptGenerator from './PromptGenerator.class';\r\nimport APICall from './APICall/APICall.class';\r\nimport VisionLLM from './VisionLLM.class';\r\nimport FSleep from './FSleep.class';\r\nimport FHash from './FHash.class';\r\nimport FEncDec from './FEncDec.class';\r\nimport FTimestamp from './FTimestamp.class';\r\nimport DataSourceLookup from './DataSourceLookup.class';\r\nimport DataSourceIndexer from './DataSourceIndexer.class';\r\nimport DataSourceCleaner from './DataSourceCleaner.class';\r\nimport JSONFilter from './JSONFilter.class';\r\nimport LogicAND from './LogicAND.class';\r\nimport LogicOR from './LogicOR.class';\r\nimport LogicXOR from './LogicXOR.class';\r\nimport LogicAtLeast from './LogicAtLeast.class';\r\nimport LogicAtMost from './LogicAtMost.class';\r\nimport AgentPlugin from './AgentPlugin.class';\r\nimport LLMAssistant from './LLMAssistant.class';\r\nimport Async from './Async.class';\r\nimport Await from './Await.class';\r\nimport ForEach from './ForEach.class';\r\nimport Code from './Code.class';\r\nimport HuggingFace from './HuggingFace.class';\r\nimport ZapierAction from './ZapierAction.class';\r\nimport GPTPlugin from './GPTPlugin.class';\r\nimport ImageGenerator from './ImageGenerator.class';\r\nimport Classifier from './Classifier.class';\r\nimport FSign from './FSign.class';\r\n\r\nconst components = {\r\n    Component: new Component(),\r\n    Note: new Component(), //this is a fake component\r\n    APIEndpoint: new APIEndpoint(),\r\n    APIOutput: new APIOutput(),\r\n    PromptGenerator: new PromptGenerator(),\r\n    LLMPrompt: new PromptGenerator(),\r\n    APICall: new APICall(),\r\n    VisionLLM: new VisionLLM(),\r\n    FSleep: new FSleep(),\r\n    FHash: new FHash(),\r\n    FEncDec: new FEncDec(),\r\n    FSign: new FSign(),\r\n    FTimestamp: new FTimestamp(),\r\n    DataSourceLookup: new DataSourceLookup(),\r\n    DataSourceIndexer: new DataSourceIndexer(),\r\n    DataSourceCleaner: new DataSourceCleaner(),\r\n    JSONFilter: new JSONFilter(),\r\n    LogicAND: new LogicAND(),\r\n    LogicOR: new LogicOR(),\r\n    LogicXOR: new LogicXOR(),\r\n    LogicAtLeast: new LogicAtLeast(),\r\n    LogicAtMost: new LogicAtMost(),\r\n    AgentPlugin: new AgentPlugin(),\r\n    LLMAssistant: new LLMAssistant(),\r\n    Async: new Async(),\r\n    Await: new Await(),\r\n    ForEach: new ForEach(),\r\n    Code: new Code(),\r\n    HuggingFace: new HuggingFace(),\r\n    ZapierAction: new ZapierAction(),\r\n    GPTPlugin: new GPTPlugin(),\r\n    ImageGenerator: new ImageGenerator(),\r\n    Classifier: new Classifier(),\r\n};\r\n\r\nexport default components;\r\n","import Agent from './Agent.class';\r\nimport { AgentCallLog } from '@sre/types/AgentLogger.types';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { uid } from '@sre/utils';\r\n\r\nconst console = Logger('AgentLogger');\r\n\r\nexport default class AgentLogger {\r\n    private static transactions: any = {};\r\n    constructor(private agent: Agent) {}\r\n    public static async cleanup() {\r\n        const trIds = Object.keys(AgentLogger.transactions);\r\n        for (const trId of trIds) {\r\n            const transaction = AgentLogger.transactions[trId];\r\n            if (transaction.canDelete()) {\r\n                delete AgentLogger.transactions[trId];\r\n            }\r\n        }\r\n    }\r\n    public static log(agent, trId, logData: AgentCallLog) {\r\n        if (!trId) trId = 'log-' + uid();\r\n        return trId;\r\n    }\r\n    public static async logTask(agent: Agent, tasks) {}\r\n}\r\n","import EventEmitter from 'events';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport config from '@sre/config';\r\nimport { delay, uid } from '@sre/utils';\r\nimport AgentRuntime from '@sre/AgentManager/AgentRuntime.class';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\n\r\nconst console = Logger('RuntimeContext');\r\n\r\ntype TRuntimeData = {\r\n    input?: { [key: string]: any };\r\n    _LoopData?: any;\r\n};\r\ntype TComponentContext = {\r\n    active: boolean;\r\n    name: string;\r\n    runtimeData?: TRuntimeData;\r\n    step: number;\r\n    input?: { [key: string]: any };\r\n    output?: { [key: string]: any };\r\n};\r\nexport class RuntimeContext extends EventEmitter {\r\n    public circularLimitReached: string | boolean = false;\r\n    public step: number = 0;\r\n    public sessionResult: boolean = false;\r\n    public sessionResults: any;\r\n    public components: { [id: string]: { ctx: TComponentContext } } = {};\r\n\r\n    public checkRuntimeContext: any = null;\r\n\r\n    private ctxFile: string = '';\r\n    private _runtimeFileReady: any;\r\n\r\n    constructor(private runtime: AgentRuntime) {\r\n        super();\r\n        const agent = runtime.agent;\r\n        const dbgFolder = path.join(<string>config.env.DATA_PATH, `/debug/${agent.id}/`);\r\n        if (!fs.existsSync(dbgFolder)) {\r\n            fs.mkdirSync(dbgFolder, { recursive: true });\r\n        }\r\n\r\n        const processRootID = runtime.processID?.split(':')[0] || '';\r\n        const reqId = processRootID == runtime.xDebugId ? '' : '.' + uid() + runtime.reqTag;\r\n        this.ctxFile = path.join(dbgFolder, `${runtime.xDebugId}${reqId}${agent.jobID ? `-job-${agent.jobID}` : ''}.json`);\r\n\r\n        this.initRuntimeContext();\r\n    }\r\n\r\n    private serialize() {\r\n        const data = {\r\n            step: this.step,\r\n            sessionResult: this.sessionResult,\r\n            sessionResults: this.sessionResults,\r\n            components: this.components,\r\n        };\r\n\r\n        return data;\r\n    }\r\n    private deserialize(data: any) {\r\n        this.step = data.step;\r\n        this.sessionResult = data.sessionResult;\r\n        this.sessionResults = data.sessionResults;\r\n        this.components = data.components;\r\n    }\r\n    private reset() {\r\n        this.step = 0;\r\n        this.sessionResult = false;\r\n        this.sessionResults = null;\r\n        this.components = {};\r\n    }\r\n\r\n    private initRuntimeContext() {\r\n        if (this._runtimeFileReady) return;\r\n\r\n        const endpointDBGCall = this.runtime.xDebugId?.startsWith('dbg-'); //weak check for debug session, we need to improve this\r\n        console.debug('Init ctxFile', this.ctxFile);\r\n        const agent = this.runtime.agent;\r\n        let method = (agent.agentRequest.method || 'POST').toUpperCase();\r\n        const endpoint = agent.endpoints?.[agent.agentRequest.path]?.[method];\r\n\r\n        let ctxData: any = {};\r\n        if (!fs.existsSync(this.ctxFile)) {\r\n            ctxData = JSON.parse(JSON.stringify({ components: agent.components, connections: agent.connections, timestamp: Date.now() }));\r\n            if (!ctxData.step) ctxData.step = 0;\r\n            for (let cptId in ctxData.components) {\r\n                ctxData.components[cptId] = {\r\n                    id: cptId,\r\n                    name: ctxData.components[cptId].name,\r\n                    //dbg: { active: false, name: ctxData.components[cptId].name },\r\n                    ctx: { active: false, name: ctxData.components[cptId].name },\r\n                };\r\n\r\n                const cpt = ctxData.components[cptId];\r\n                //if this debug session was initiated from an endpoint, we mark the endpoint component as active\r\n                if (endpoint && endpoint.id != undefined && cpt.id == endpoint.id && endpointDBGCall) {\r\n                    //cpt.dbg.active = true;\r\n                    cpt.ctx.active = true;\r\n                }\r\n            }\r\n            fs.writeFileSync(this.ctxFile, JSON.stringify(ctxData, null, 2));\r\n        } else {\r\n            ctxData = JSON.parse(fs.readFileSync(this.ctxFile, 'utf8'));\r\n            if (!ctxData.step) ctxData.step = 0;\r\n        }\r\n\r\n        this.deserialize(ctxData);\r\n        this._runtimeFileReady = true;\r\n        this.emit('ready');\r\n    }\r\n    public async sync() {\r\n        if (!this.ctxFile) return;\r\n        this.emit('syncing');\r\n\r\n        const deleteSession = this.runtime.sessionClosed;\r\n\r\n        if (deleteSession) {\r\n            if (this.runtime.debug && fs.existsSync(this.ctxFile)) await delay(1000 * 60); //if we're in debug mode, we keep the file for a while to allow final state read\r\n            if (fs.existsSync(this.ctxFile)) fs.unlinkSync(this.ctxFile);\r\n        } else {\r\n            const data = this.serialize();\r\n            if (data) fs.writeFileSync(this.ctxFile, JSON.stringify(data, null, 2));\r\n        }\r\n    }\r\n\r\n    public incStep() {\r\n        this.step++;\r\n        this.sync();\r\n    }\r\n\r\n    public updateComponent(componentId: string, data: any) {\r\n        const ctxData = this;\r\n        if (!ctxData) return;\r\n        const component = ctxData.components[componentId];\r\n\r\n        if (!component) {\r\n            console.log('>>>>>>> updateComponent Component debug data not found', componentId, component);\r\n            console.log('>>> ctxFile', this.ctxFile);\r\n            console.log('>>> ctxData', ctxData);\r\n        }\r\n        component.ctx = { ...component.ctx, ...data, step: this.step };\r\n\r\n        //if (this.debug) component.dbg = { ...component.dbg, ...data };\r\n\r\n        this.sync();\r\n    }\r\n    public resetComponent(componentId: string) {\r\n        const ctxData = this;\r\n        const component = ctxData.components[componentId];\r\n        if (!component) {\r\n            console.log('>>>>>>> resetComponent Component debug data not found', componentId, component);\r\n            console.log('>>> ctxFile', this.ctxFile);\r\n            console.log('>>> ctxData', ctxData);\r\n        }\r\n        //component.dbg.active = false;\r\n        //component.dbg.runtimeData = {};\r\n        component.ctx.runtimeData = {};\r\n        component.ctx.active = false;\r\n\r\n        this.sync();\r\n    }\r\n\r\n    public getComponentData(componentId: string) {\r\n        const ctxData = this;\r\n        if (!ctxData) return null;\r\n        const component = ctxData.components[componentId];\r\n        if (!component) {\r\n            console.log('>>>>>>> getComponentData Component debug data not found', componentId, component);\r\n            console.log('>>> ctxFile', this.ctxFile);\r\n            console.log('>>> ctxData', ctxData);\r\n        }\r\n        //const data = this.debug ? component.dbg : component.ctx;\r\n        const data = component.ctx;\r\n\r\n        return data;\r\n    }\r\n}\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport Agent from './Agent.class';\r\nimport Component from '@sre/Components/Component.class';\r\nimport componentInstance from '@sre/Components/index';\r\n\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { uid } from '@sre/utils';\r\nimport { RuntimeContext } from '@sre/MemoryManager/RuntimeContext';\r\n\r\nconst console = Logger('AgentRuntime');\r\nconst AgentRuntimeUnavailable = new Proxy(\r\n    {},\r\n    {\r\n        get: function (target, prop, receiver) {\r\n            // Check if the property being accessed is a function\r\n            if (typeof target[prop] === 'function') {\r\n                return target[prop];\r\n            } else {\r\n                // Return a function that logs \"unavailable\"\r\n                return function () {\r\n                    console.warn(`AgentRuntime Unavailable tried to call : ${prop.toString()}`);\r\n                };\r\n            }\r\n        },\r\n    }\r\n);\r\nexport default class AgentRuntime {\r\n    private static processResults: any = {};\r\n    private static tagsData = {};\r\n    public static dummy = AgentRuntimeUnavailable;\r\n\r\n    private agentContext: RuntimeContext;\r\n    //private ctxFile: string = '';\r\n    private xDebugRun: string | undefined = '';\r\n    private xDebugInject: string | undefined = '';\r\n    private xDebugRead: string | undefined = '';\r\n    private xDebugStop: string | undefined = '';\r\n    private xDebugPendingInject: any = null;\r\n    public xDebugId: string | undefined = '';\r\n    private xDebugCmd: string | undefined = '';\r\n    private _debugActive = false;\r\n    private _runtimeFileReady = false;\r\n    public sessionClosed = false;\r\n\r\n    private reqTagOwner = false;\r\n\r\n    //reqTag is used to identify the current running workflow including nested calls, it allows us to identify circular calls\r\n    public reqTag: any;\r\n    public processID: any; //this identifies the current processID, a process ID is the full set of runCycles that is executed by the agent.\r\n    public workflowReqId: any; //this identifies the current running workflow. a workflow starts when and agent endpoint is called, or a debug session is initiated, and ends when no more steps can be executed.\r\n\r\n    public alwaysActiveComponents: any = {};\r\n    public exclusiveComponents: any = {};\r\n\r\n    private checkRuntimeContext: any = null;\r\n\r\n    public get circularLimitReached() {\r\n        return this.agentContext?.circularLimitReached || false;\r\n    }\r\n    public set circularLimitReached(value) {\r\n        if (this.agentContext) this.agentContext.circularLimitReached = value;\r\n    }\r\n\r\n    public get debug() {\r\n        return this._debugActive;\r\n    }\r\n    public get curStep() {\r\n        return this.agentContext?.step || 0;\r\n    }\r\n\r\n    constructor(public agent: Agent) {\r\n        this.reqTag = agent.agentRequest.header('X-REQUEST-TAG');\r\n        const isNestedProcess: boolean = !!this.reqTag;\r\n\r\n        if (!this.reqTag) {\r\n            //tagged request should not be run in debug mode, this comes from a parent agent\r\n            this.xDebugStop = agent.agentRequest.header('X-DEBUG-STOP');\r\n            this.xDebugRun = agent.agentRequest.header('X-DEBUG-RUN'); //send this as header to create a session and attach it\r\n            this.xDebugInject = agent.agentRequest.header('X-DEBUG-INJ');\r\n            this.xDebugRead = agent.agentRequest.header('X-DEBUG-READ');\r\n            this.reqTag = 'xTAG-' + uid(); //if request tag is not set, set a new value, this will be used to tag nested agent calls\r\n            this.reqTagOwner = true;\r\n        } else {\r\n            this.xDebugStop = undefined;\r\n            this.xDebugRun = undefined;\r\n            this.xDebugInject = undefined;\r\n            this.xDebugRead = undefined;\r\n        }\r\n\r\n        this.xDebugId = this.xDebugStop || this.xDebugRun || this.xDebugRead;\r\n\r\n        //if (req.body) {\r\n        if (!this.xDebugId && agent.agentRequest.body) {\r\n            if (this.xDebugInject != undefined && this.xDebugInject != null) {\r\n                this.xDebugPendingInject = agent.agentRequest.body;\r\n                this.xDebugRun = this.xDebugInject || 'inj-' + uid();\r\n            } else {\r\n                if (this.xDebugRun == '') {\r\n                    this.xDebugRun = 'dbg-' + uid(); //generate a random debug id\r\n                }\r\n            }\r\n            this.xDebugId = this.xDebugRun;\r\n        }\r\n\r\n        this.processID = this.xDebugId;\r\n\r\n        if (!this.xDebugId) {\r\n            //if it's not a debug session, processID is unique per request\r\n            this.xDebugId = agent.sessionId;\r\n            this.processID = this.reqTag;\r\n        }\r\n        if (isNestedProcess) {\r\n            // Need to make processID unique to run same sub-agents multiple times in parallel\r\n            this.processID += `:${Math.floor(1000 + Math.random() * 9000)}`;\r\n        }\r\n\r\n        //we need a way to identify current running workflow in a unique way\r\n        //=> In debug mode, xDebugRun holds the debug sessionID which is unique per workflow run\r\n        //   if the debug session is stopped, xDebugStop holds the sessionID\r\n        //   Note : We can't use reqTag in debug mode because it changes every time a new debug step is executed\r\n        //\r\n        //=> In normal mode, reqTag is unique per workflow run\r\n        this.workflowReqId = this.xDebugRun || this.xDebugStop || this.reqTag;\r\n\r\n        //tagsData can be updated from external integrations (eg. Chatbot, API Endpoint, etc.)\r\n        if (!AgentRuntime.tagsData[this.reqTag]) AgentRuntime.tagsData[this.reqTag] = {};\r\n        if (!AgentRuntime.processResults[this.processID])\r\n            AgentRuntime.processResults[this.processID] = {\r\n                timestamp: Date.now(),\r\n                errorResults: [],\r\n                sessionResults: [],\r\n            };\r\n\r\n        this.agentContext = new RuntimeContext(this);\r\n        this.agentContext.on('ready', () => {\r\n            this.alwaysActiveComponents = {};\r\n            this.exclusiveComponents = {};\r\n            for (let component of this.agent.data.components) {\r\n                const cpt: Component = componentInstance[component.name];\r\n                if (!cpt) {\r\n                    console.warn(`Component ${component.name} Exists in agent but has no implementation`);\r\n                    continue;\r\n                }\r\n\r\n                if (cpt.alwaysActive) {\r\n                    this.alwaysActiveComponents[component.id] = cpt;\r\n                    this.updateComponent(component.id, { active: true, alwaysActive: true });\r\n                    const runtimeData = { ...this.getRuntimeData(component.id) };\r\n                    this.saveRuntimeComponentData(component.id, runtimeData);\r\n                }\r\n                if (cpt.exclusive) {\r\n                    this.exclusiveComponents[component.id] = cpt;\r\n                    this.updateComponent(component.id, { exclusive: true });\r\n                    const runtimeData = { ...this.getRuntimeData(component.id) };\r\n                    this.saveRuntimeComponentData(component.id, runtimeData);\r\n                }\r\n            }\r\n        });\r\n\r\n        //if xDebugId is equal to agent session, it means that the debugging features are not active\r\n        this._debugActive = this.xDebugId != agent.sessionId;\r\n\r\n        //console.debug(`New Agent Runtime initialized for agentId=${this.agent.id}  tag=${this.reqTag} debug file=${this.ctxFile}`);\r\n    }\r\n\r\n    public destroy() {\r\n        this.sessionClosed = true;\r\n        this.sync();\r\n    }\r\n\r\n    public incTag(componentId) {\r\n        if (!AgentRuntime.tagsData[this.reqTag][componentId]) AgentRuntime.tagsData[this.reqTag][componentId] = 0;\r\n        AgentRuntime.tagsData[this.reqTag][componentId]++;\r\n\r\n        // console.log(\r\n        //     `incTag agentId=${this.agent.id} componentId=${componentId} tag=${this.reqTag} ==> ${AgentRuntime.tagsData[this.reqTag][componentId]}`,\r\n        // );\r\n        //console.log('incTag tagsData', tagsData);\r\n    }\r\n\r\n    public async sync() {\r\n        //if (!this.ctxFile) return;\r\n\r\n        const deleteTag = (this.reqTagOwner && this.sessionClosed) || this.circularLimitReached;\r\n        if (deleteTag) {\r\n            console.log('>>>>>>>>>>>> deleting tagsData', this.reqTag);\r\n            delete AgentRuntime.tagsData[this.reqTag];\r\n        }\r\n\r\n        this.agentContext.sync();\r\n    }\r\n    public getWaitingComponents() {\r\n        const ctxData = this.agentContext;\r\n        const dbgComponents: any = Object.values(ctxData?.components || []).filter((c: any) => c?.ctx?.active == true);\r\n        const waitingComponents: any = dbgComponents.filter((c: any) => c?.ctx?.status && typeof c?.ctx?.output !== undefined);\r\n        return waitingComponents;\r\n    }\r\n    public getExclusiveActiveComponents() {\r\n        const ctxData = this.agentContext;\r\n        const dbgComponents: any = Object.values(ctxData?.components || []).filter((c: any) => c?.ctx?.active == true);\r\n        const exclusiveActiveComponents: any = dbgComponents.filter((c: any) => c?.ctx?.exclusive == true);\r\n        return exclusiveActiveComponents;\r\n    }\r\n    public readState(stateId: string, deltaOnly = false) {\r\n        //if (!this._debugActive || !this.xDebugRead) return null;\r\n        if (!this._debugActive || !stateId) return null;\r\n\r\n        //this.checkRuntimeContext();\r\n        const runtime = this;\r\n        const agent = this.agent;\r\n\r\n        const ctxData = runtime.agentContext;\r\n        const dbgAllComponents: any = runtime.xDebugPendingInject || Object.values(ctxData?.components || []);\r\n\r\n        //first try to find exclusive active components\r\n        let dbgActiveComponents: any;\r\n        dbgActiveComponents = dbgAllComponents.filter((c: any) => c?.ctx?.active == true && c?.ctx?.exclusive == true);\r\n        //if no exclusive active components, find all active components\r\n        if (!dbgActiveComponents || dbgActiveComponents.length == 0)\r\n            dbgActiveComponents = dbgAllComponents.filter(\r\n                (c: any) =>\r\n                    c?.ctx?.active == true ||\r\n                    (!c?.ctx?.output?._error && Array.isArray(c?.ctx?._job_components) && c?.ctx?._job_components.length > 0)\r\n            );\r\n        //find waiting components that was not previously run\r\n        const dbgActiveWaitingComponents: any = dbgAllComponents.filter(\r\n            (c: any) => c?.ctx?.active == true && c?.ctx?.status && typeof c?.ctx?.output !== undefined\r\n        );\r\n\r\n        const dbgActiveReadyComponents: any = dbgAllComponents.filter((c: any) => c?.ctx?.active == true && !c?.ctx?.status);\r\n\r\n        let state = {};\r\n        for (let dbgComponent of dbgAllComponents) {\r\n            state[dbgComponent.id] = dbgComponent.ctx;\r\n        }\r\n\r\n        //let dbgSession: any = runtime.xDebugRead;\r\n        let dbgSession: any = stateId;\r\n\r\n        // let alwaysActiveComponents = 0;\r\n        // for (let activeCpt of dbgActiveComponents) {\r\n        //     if (this.agent.alwaysActiveComponents[activeCpt.id]) alwaysActiveComponents++;\r\n        // }\r\n\r\n        if (!dbgActiveComponents || dbgActiveComponents.length == 0 /*|| dbgActiveComponents.length == alwaysActiveComponents*/) {\r\n            dbgSession = null;\r\n            runtime.sessionClosed = true;\r\n        }\r\n\r\n        const remainingActiveComponents: any = Object.values(ctxData?.components || []).filter(\r\n            (c: any) => c?.ctx?.active == true && !c?.ctx?.alwaysActive\r\n        );\r\n        const activeAsyncComponents: any = Object.values(ctxData?.components || []).filter(\r\n            (c: any) => !c?.ctx?.output?._error && Array.isArray(c?.ctx?._job_components) && c?.ctx?._job_components.length > 0\r\n        );\r\n\r\n        if (remainingActiveComponents.length == 0 && activeAsyncComponents.length == 0 /*&& awaitingInputs.length == 0*/) {\r\n            runtime.sessionClosed = true;\r\n        }\r\n\r\n        if (runtime.circularLimitReached) {\r\n            const circularLimitData = runtime.checkCircularLimit();\r\n            const error = `Circular Calls Limit Reached on ${circularLimitData}. Current agent circular limit is ${agent.circularLimit}`;\r\n            runtime.sessionClosed = true;\r\n            return { state, dbgSession, sessionClosed: runtime.sessionClosed, error };\r\n        }\r\n\r\n        const step = this.curStep >= 1 ? this.curStep - 1 : 0; //current state was executed in previous step\r\n\r\n        if (deltaOnly) {\r\n            const delta = {};\r\n            for (let cptId in state) {\r\n                const cpt = state[cptId];\r\n\r\n                //workaround, here we are supposed to test component steps that are equalt to current step\r\n                //but due to an inconsistency, the Async component has sometimes a step greater than the current step\r\n                if (cpt.step >= step) delta[cptId] = cpt;\r\n                //FIXME : identify the root cause of this issue and replace >= with ==\r\n            }\r\n            //return { state: delta, dbgSession, sessionClosed: runtime.sessionClosed, step };\r\n            state = delta;\r\n        }\r\n\r\n        return { state, dbgSession, sessionClosed: runtime.sessionClosed, step };\r\n    }\r\n\r\n    /**\r\n     * This method is called by the agent to run a process cycle, it will run all active components and return the results\r\n     * The function is called multiple times until all components are executed and no more active components are available\r\n     * @returns\r\n     */\r\n    public async runCycle() {\r\n        console.debug(\r\n            `runCycle agentId=${this.agent.id} wfReqId=${this.workflowReqId}  reqTag=${this.reqTag} session=${this.xDebugRun} cycleId=${this.processID}`\r\n        );\r\n        //this.checkRuntimeContext();\r\n\r\n        const runtime = this;\r\n        const agent = this.agent;\r\n        const ctxData = runtime.agentContext;\r\n        const dbgAllComponents: any = runtime.xDebugPendingInject || Object.values(ctxData?.components || []);\r\n\r\n        //first try to find exclusive active components\r\n        let dbgActiveComponents: any;\r\n        dbgActiveComponents = dbgAllComponents.filter((c: any) => c?.ctx?.active == true && c?.ctx?.exclusive == true);\r\n        //if no exclusive active components, find all active components\r\n        if (!dbgActiveComponents || dbgActiveComponents.length == 0)\r\n            dbgActiveComponents = dbgAllComponents.filter(\r\n                (c: any) =>\r\n                    c?.ctx?.active == true ||\r\n                    (!c?.ctx?.output?._error && Array.isArray(c?.ctx?._job_components) && c?.ctx?._job_components.length > 0)\r\n            );\r\n        //find waiting components that was not previously run\r\n        const dbgActiveWaitingComponents: any = dbgAllComponents.filter(\r\n            (c: any) => c?.ctx?.active == true && c?.ctx?.status && typeof c?.ctx?.output !== undefined\r\n        );\r\n        const dbgActiveReadyComponents: any = dbgAllComponents.filter(\r\n            (c: any) =>\r\n                (c?.ctx?.active == true && !c?.ctx?.status) ||\r\n                (!c?.ctx?.output?._error && Array.isArray(c?.ctx?._job_components) && c?.ctx?._job_components.length > 0)\r\n        );\r\n        //const dbgActiveReadyComponents: any = dbgActiveComponents.filter((c: any) => c?.ctx?.active == true && !c?.ctx?.status);\r\n\r\n        let step: any;\r\n\r\n        if (!dbgActiveComponents || dbgActiveComponents.length == 0) {\r\n            runtime.sessionClosed = true;\r\n            step = {\r\n                state: { sessionClosed: true },\r\n                dbgSession: null,\r\n                //expiredDbgSession: runtime.xDebugRun || runtime.xDebugStop,\r\n                expiredDbgSession: runtime.xDebugId,\r\n                sessionClosed: true,\r\n            };\r\n        }\r\n\r\n        if (!step && dbgActiveComponents.length == dbgActiveWaitingComponents.length && ctxData.sessionResult) {\r\n            runtime.sessionClosed = true;\r\n            step = {\r\n                state: { sessionClosed: true },\r\n                dbgSession: null,\r\n                //expiredDbgSession: runtime.xDebugRun,\r\n                expiredDbgSession: runtime.xDebugId,\r\n                sessionClosed: true,\r\n            };\r\n        }\r\n        if (!step && dbgActiveReadyComponents.length > 0) {\r\n            const promises: any = [];\r\n\r\n            for (let dbgComponent of dbgActiveReadyComponents) {\r\n                const injectInput = runtime.xDebugPendingInject ? dbgComponent.ctx.input : undefined;\r\n                promises.push(agent.callComponent(dbgComponent.ctx.sourceId, dbgComponent.id, injectInput));\r\n            }\r\n            const dbgResults = await Promise.all(promises);\r\n            const state = dbgResults.length == 1 ? dbgResults[0] : dbgResults;\r\n\r\n            runtime.xDebugPendingInject = null;\r\n\r\n            const remainingActiveComponents: any = Object.values(ctxData?.components || []).filter((c: any) => c?.ctx?.active == true);\r\n            const activeAsyncComponents: any = Object.values(ctxData?.components || []).filter(\r\n                (c: any) => !c?.ctx?.output?._error && Array.isArray(c?.ctx?._job_components) && c?.ctx?._job_components.length > 0\r\n            );\r\n            const dbgActiveWaitingComponents: any = dbgAllComponents.filter((c: any) => c?.ctx?.status && typeof c?.ctx?.output !== undefined);\r\n\r\n            if (dbgActiveWaitingComponents.length == remainingActiveComponents.length) {\r\n                ctxData.sessionResult = true;\r\n            }\r\n\r\n            //capture results\r\n            let sessionResults = dbgResults.flat().filter(\r\n                (e) =>\r\n                    e.id &&\r\n                    e.result &&\r\n                    !e.result._missing_inputs &&\r\n                    //check if this is the last component in the chain\r\n                    !agent.connections.find((c) => c.sourceId == e.id)\r\n            );\r\n\r\n            let errorResults = dbgResults.flat().filter((e) => e.id && (e.error || e.result?._error));\r\n            if (ctxData.sessionResult && sessionResults.length == 0 && runtime.sessionClosed) {\r\n                //no result ? check if we have errors\r\n                sessionResults = errorResults;\r\n            }\r\n\r\n            ctxData.sessionResults = sessionResults;\r\n            step = {\r\n                state,\r\n                dbgSession: runtime.xDebugRun,\r\n                sessionResult: runtime.agentContext.sessionResult,\r\n                sessionResults: runtime.agentContext.sessionResults,\r\n                errorResults,\r\n                sessionClosed: remainingActiveComponents.length == 0 && activeAsyncComponents.length == 0 /*&& awaitingInputs.length == 0*/,\r\n            };\r\n        } else {\r\n            runtime.sessionClosed = true;\r\n            //return { sessionClosed: true };\r\n            step = {\r\n                state: { sessionClosed: true },\r\n                dbgSession: null,\r\n                //expiredDbgSession: runtime.xDebugRun || runtime.xDebugStop,\r\n                expiredDbgSession: runtime.xDebugId,\r\n                sessionClosed: true,\r\n            };\r\n        }\r\n\r\n        this.checkCircularLimit();\r\n        if (step.sessionResults) {\r\n            AgentRuntime.processResults[this.processID].sessionResults.push(step.sessionResults);\r\n        }\r\n        if (step.errorResults) {\r\n            AgentRuntime.processResults[this.processID].errorResults.push(step.errorResults);\r\n        }\r\n\r\n        if (step?.sessionClosed || this.circularLimitReached) {\r\n            const finalResult = this.processResults();\r\n            step.finalResult = finalResult;\r\n            runtime.sessionClosed = true;\r\n        }\r\n\r\n        this.incStep();\r\n        this.sync();\r\n        return step;\r\n    }\r\n\r\n    private processResults() {\r\n        //this.checkCircularLimit();\r\n        let result: any = { error: 'Error processing results' };\r\n        const sessionResults = AgentRuntime.processResults[this.processID].sessionResults;\r\n        const errorResults = AgentRuntime.processResults[this.processID].errorResults;\r\n        if (this.circularLimitReached) {\r\n            const circularLimitData = this.circularLimitReached;\r\n            result = { error: `Circular Calls Limit Reached on ${circularLimitData}. Current circular limit is ${this.agent.circularLimit}` };\r\n        } else {\r\n            let state = [sessionResults, errorResults].flat(Infinity);\r\n            if (!state || state.length == 0) state = errorResults.flat(Infinity);\r\n\r\n            //post process run cycle results\r\n            //deduplicating redundant entries\r\n\r\n            const data = state\r\n                .reduce(\r\n                    (acc, current) => {\r\n                        if (!acc.seen[current.id]) {\r\n                            acc.result.push(current);\r\n                            acc.seen[current.id] = true;\r\n                        }\r\n                        return acc;\r\n                    },\r\n                    { seen: {}, result: [] }\r\n                )\r\n                .result.filter((e) => !e.result?._exclude);\r\n\r\n            //data.forEach((d: any) => delete d?.result?._debug);\r\n\r\n            result = data;\r\n            /////////////\r\n        }\r\n\r\n        //cleanup\r\n        delete AgentRuntime.processResults[this.processID];\r\n\r\n        this.sync();\r\n        return result;\r\n    }\r\n\r\n    public checkCircularLimit() {\r\n        if (this.circularLimitReached) return this.agentContext.circularLimitReached;\r\n        for (let componentId in AgentRuntime.tagsData[this.reqTag]) {\r\n            if (AgentRuntime.tagsData[this.reqTag][componentId] > this.agent.circularLimit) {\r\n                this.sessionClosed = true;\r\n                this.agentContext.circularLimitReached = componentId;\r\n                return componentId;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public async injectDebugOutput(componentId: string) {\r\n        if (this.xDebugPendingInject) {\r\n            const component = this.xDebugPendingInject.find((c: any) => c.id == componentId);\r\n            if (component?.ctx?.output) {\r\n                //if all outputs values are empty, we don't inject\r\n                let allEmpty = true;\r\n                for (let key in component.ctx.output) {\r\n                    if (component.ctx.output[key] != '') {\r\n                        allEmpty = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (allEmpty) return null;\r\n\r\n                return component.ctx.output;\r\n            }\r\n        }\r\n    }\r\n    public getRuntimeData(componentId) {\r\n        const componentData = this.getComponentData(componentId);\r\n        if (!componentData) return {};\r\n        const rData = componentData.runtimeData || {};\r\n\r\n        return rData;\r\n    }\r\n    public updateRuntimeData(componentId, data) {\r\n        const componentData = this.getComponentData(componentId);\r\n        if (!componentData) return;\r\n        componentData.runtimeData = { ...componentData.runtimeData, ...data };\r\n\r\n        this.sync();\r\n    }\r\n\r\n    public saveRuntimeComponentData(componentId, data) {\r\n        this.updateComponent(componentId, { runtimeData: data });\r\n    }\r\n\r\n    public incStep() {\r\n        this.agentContext.incStep();\r\n    }\r\n    public updateComponent(componentId: string, data: any) {\r\n        this.agentContext.updateComponent(componentId, data);\r\n    }\r\n\r\n    public resetComponent(componentId: string) {\r\n        this.agentContext.resetComponent(componentId);\r\n    }\r\n\r\n    public getComponentData(componentId: string) {\r\n        return this.agentContext.getComponentData(componentId);\r\n    }\r\n}\r\n","import os from 'os';\r\nimport process from 'process';\r\n\r\nconst OSResourceMonitor: any = {\r\n    mem: getMemoryUsage(),\r\n    //processMemory: getProcessMemoryUsage(),\r\n    cpu: getCpuUsage(),\r\n    //processCpu: getProcessCpuUsage(),\r\n};\r\nexport default OSResourceMonitor;\r\n\r\nfunction getCpuUsage() {\r\n    const cpus = os.cpus();\r\n    let user = 0;\r\n    let nice = 0;\r\n    let sys = 0;\r\n    let idle = 0;\r\n    let irq = 0;\r\n    let total = 0;\r\n\r\n    for (let cpu of cpus) {\r\n        user += cpu.times.user;\r\n        nice += cpu.times.nice;\r\n        sys += cpu.times.sys;\r\n        idle += cpu.times.idle;\r\n        irq += cpu.times.irq;\r\n    }\r\n\r\n    total = user + nice + sys + idle + irq;\r\n\r\n    return {\r\n        user: (user / total) * 100,\r\n        sys: (sys / total) * 100,\r\n        idle: (idle / total) * 100,\r\n        load: 100 - (idle / total) * 100,\r\n    };\r\n}\r\n\r\nfunction getMemoryUsage() {\r\n    const totalMemory = os.totalmem();\r\n    const freeMemory = os.freemem();\r\n    const usedMemory = totalMemory - freeMemory;\r\n\r\n    return {\r\n        totalMemory: (totalMemory / 1024 ** 3).toFixed(2) + ' GB',\r\n        freeMemory: (freeMemory / 1024 ** 3).toFixed(2) + ' GB',\r\n        usedMemory: (usedMemory / 1024 ** 3).toFixed(2) + ' GB',\r\n        memoryUsagePercentage: ((usedMemory / totalMemory) * 100).toFixed(2),\r\n    };\r\n}\r\n\r\nfunction getProcessMemoryUsage() {\r\n    const memoryUsage = process.memoryUsage();\r\n    return {\r\n        total: memoryUsage.rss,\r\n        heapTotal: (memoryUsage.heapTotal / 1024 ** 2).toFixed(2) + ' MB',\r\n        heapUsed: (memoryUsage.heapUsed / 1024 ** 2).toFixed(2) + ' MB',\r\n        external: (memoryUsage.external / 1024 ** 2).toFixed(2) + ' MB',\r\n    };\r\n}\r\n\r\nfunction getProcessCpuUsage() {\r\n    const cpuUsage = process.cpuUsage();\r\n    return {\r\n        user: cpuUsage.user,\r\n        system: cpuUsage.system,\r\n    };\r\n}\r\n\r\nfunction logSystemUsage() {\r\n    OSResourceMonitor.mem = getMemoryUsage();\r\n    OSResourceMonitor.cpu = getCpuUsage();\r\n    //OSResourceMonitor.processMemory = getProcessMemoryUsage();\r\n    //OSResourceMonitor.processCpu = getProcessCpuUsage();\r\n}\r\n\r\n//setInterval(logSystemUsage, 5000); // update every 5 seconds\r\n","import Component from '@sre/Components/Component.class';\r\nimport componentInstance from '@sre/Components/index';\r\nimport AgentLogger from './AgentLogger.class';\r\nimport AgentRequest from './AgentRequest.class';\r\nimport AgentRuntime from './AgentRuntime.class';\r\nimport AgentSettings from './AgentSettings.class';\r\nimport OSResourceMonitor from './OSResourceMonitor';\r\n\r\nimport config from '@sre/config';\r\nimport { delay, getCurrentFormattedDate, uid } from '@sre/utils/index';\r\n\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nconst console = Logger('Agent');\r\nconst idPromise = (id) => id;\r\nexport default class Agent {\r\n    public name: any;\r\n    public data: any;\r\n    public teamId: any;\r\n    public components: any;\r\n    public connections: any;\r\n    public endpoints: any = {};\r\n    public sessionId;\r\n    public sessionTag = '';\r\n    public callerSessionId;\r\n    public apiBasePath = '/api';\r\n    public agentRuntime: AgentRuntime | any;\r\n\r\n    public usingTestDomain = false;\r\n    public domain = '';\r\n    public debugSessionEnabled = false;\r\n    public circularLimit = 100; //TODO : make it configurable from agent settings\r\n    public version = '';\r\n    //public baseUrl = '';\r\n    public agentVariables: any = {};\r\n    private _kill = false;\r\n    //public agentRequest: Request | AgentRequest | any;\r\n    public async = false;\r\n    public jobID = '';\r\n    public planInfo: any = {};\r\n\r\n    public agentRequest: AgentRequest;\r\n    constructor(\r\n        public id,\r\n        agentData,\r\n        public agentSettings: AgentSettings,\r\n        agentRequest?: AgentRequest | any //private req: express.Request,\r\n    ) {\r\n        //this.agentRequest = new AgentRequest(req);\r\n        const json = typeof agentData === 'string' ? JSON.parse(agentData) : agentData;\r\n        this.name = json.name;\r\n        this.data = json.data;\r\n        //this.agentVariables = json.data.variables || {};\r\n\r\n        this.version = this.data.agentVersion || ''; //when version is not set we load the latest dev version\r\n        this.teamId = json.teamId;\r\n        this.connections = this.data.connections;\r\n        this.debugSessionEnabled = this.data.debugSessionEnabled;\r\n\r\n        this.agentVariables = json.data.variables || {};\r\n\r\n        //parse vault agent variables\r\n        // if (typeof json.data.variables === 'object') {\r\n        //     for (let key in json.data.variables) {\r\n        //         const value = json.data.variables[key];\r\n        //         if (value.startsWith('{{') && value.endsWith('}}')) {\r\n        //             utils.parseKey(value, this.teamId).then((result) => {\r\n        //                 this.agentVariables[key] = result;\r\n        //             });\r\n        //         } else {\r\n        //             this.agentVariables[key] = value;\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // Base URL required to serve binary data\r\n        //this.baseUrl = `https://${id}.${config.env.AGENT_DOMAIN}`;\r\n        //if (config.env.AGENT_DOMAIN_PORT) this.baseUrl += `:${config.env.AGENT_DOMAIN_PORT}`;\r\n\r\n        const endpoints = this.data.components.filter((c) => c.name == 'APIEndpoint');\r\n        for (let endpoint of endpoints) {\r\n            let method = endpoint.data.method || 'POST';\r\n            method = method.toUpperCase();\r\n            if (!this.endpoints[`${this.apiBasePath}/${endpoint.data.endpoint}`])\r\n                this.endpoints[`${this.apiBasePath}/${endpoint.data.endpoint}`] = {};\r\n            this.endpoints[`${this.apiBasePath}/${endpoint.data.endpoint}`][method] = endpoint;\r\n        }\r\n\r\n        this.components = {};\r\n        for (let component of this.data.components) {\r\n            //FIXME : this does not persist in debug mode, it breaks key value mem logic\r\n\r\n            this.components[component.id] = component;\r\n        }\r\n\r\n        for (let connection of this.data.connections) {\r\n            const sourceComponent = this.components[connection.sourceId];\r\n            const targetComponent = this.components[connection.targetId];\r\n            const sourceIndex = connection.sourceIndex;\r\n            const targetIndex = connection.targetIndex;\r\n\r\n            if (!sourceComponent.outputs[sourceIndex].next) sourceComponent.outputs[sourceIndex].next = [];\r\n            sourceComponent.outputs[sourceIndex].next.push(targetComponent.id);\r\n\r\n            if (!targetComponent.inputs[targetIndex].prev) targetComponent.inputs[targetIndex].prev = [];\r\n            targetComponent.inputs[targetIndex].prev.push(sourceComponent.id);\r\n        }\r\n\r\n        this.tagAsyncComponents();\r\n\r\n        if (agentRequest) {\r\n            this.setRequest(agentRequest);\r\n        }\r\n\r\n        //this.settings = new AgentSettings(this.id);\r\n    }\r\n\r\n    public setRequest(agentRequest: AgentRequest | any) {\r\n        if (this.agentRequest) return;\r\n        this.agentRequest = agentRequest;\r\n        this.agentRequest = agentRequest;\r\n        const dateTime = getCurrentFormattedDate();\r\n        this.sessionId = 'rt-' + (this.agentRequest.sessionID || dateTime + '.' + uid());\r\n\r\n        const sessionTags = this?.agentRequest?.headers['x-session-tag'];\r\n        if (sessionTags) this.sessionTag += this.sessionTag ? `,${sessionTags}` : sessionTags;\r\n\r\n        var regex = new RegExp(`^\\/v[0-9]+(\\.[0-9]+)?${this.apiBasePath}\\/(.*)`);\r\n        if (this.agentRequest?.path?.startsWith(`${this.apiBasePath}/`) || this.agentRequest?.path?.match(regex)) {\r\n            //we only need runtime context for API calls\r\n            this.agentRuntime = new AgentRuntime(this);\r\n            this.callerSessionId =\r\n                this?.agentRequest?.headers['x-caller-session-id']?.substring(0, 256) || this.agentRuntime.workflowReqId || this.sessionId;\r\n        } else {\r\n            this.agentRuntime = AgentRuntime.dummy;\r\n        }\r\n    }\r\n\r\n    public kill() {\r\n        this._kill = true;\r\n    }\r\n    private async parseVariables() {\r\n        //parse vault agent variables\r\n        if (typeof this.agentVariables === 'object') {\r\n            for (let key in this.agentVariables) {\r\n                const value = this.agentVariables[key];\r\n                if (value.startsWith('{{') && value.endsWith('}}')) {\r\n                    //this.agentVariables[key] = (await parseKey(value, this.teamId)) || '';\r\n                    this.agentVariables[key] = await TemplateString(value).parseTeamKeysAsync(this.teamId).asyncResult;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async process(endpointPath, input) {\r\n        //TODO: replace endpointPath + input params with a single agentRequest object. (This will require intensive regression testing)\r\n        let result: any;\r\n        let dbgSession: any = null;\r\n        let sessionClosed = false;\r\n\r\n        //this.agentRuntime.checkRuntimeContext();\r\n        //insert log\r\n        const logId = AgentLogger.log(this, null, {\r\n            sourceId: endpointPath,\r\n            componentId: `AGENT`,\r\n            domain: this.domain,\r\n            input,\r\n            workflowID: this.agentRuntime.workflowReqId,\r\n            processID: this.agentRuntime.processID,\r\n            inputTimestamp: new Date().toISOString(),\r\n            sessionID: this.callerSessionId,\r\n            tags: this.sessionTag,\r\n        });\r\n\r\n        const method = this.agentRequest.method.toUpperCase();\r\n        const endpoint = this.endpoints[endpointPath]?.[method];\r\n\r\n        //first check if this is a debug session, and return debug result if it's the case\r\n        if (this.agentRuntime.debug) {\r\n            if (!endpoint && this.agentRequest.path != '/api/') {\r\n                if (logId) AgentLogger.log(this, logId, { error: `Endpoint ${method} ${endpointPath} Not Found` });\r\n                throw new Error(`Endpoint ${method} ${endpointPath} Not Found`);\r\n            }\r\n            let dbgResult: any;\r\n            //let dbgResult: any = await this.agentRuntime.readState(true); //is this a debug read reqeust ?\r\n\r\n            if (!dbgResult) dbgResult = await this.agentRuntime.runCycle(); //no, is this a step over request ?\r\n\r\n            // result = dbgResult?.state;\r\n            // dbgSession = dbgResult?.dbgSession;\r\n            // sessionClosed = dbgResult?.sessionClosed;\r\n            if (dbgResult && typeof dbgResult?.state !== 'undefined') {\r\n                this.agentRuntime.sync();\r\n                if (dbgResult?.finalResult) {\r\n                    dbgResult.finalResult = await this.postProcess(dbgResult.finalResult).catch((error) => ({ error }));\r\n                }\r\n                return dbgResult;\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            if (logId) AgentLogger.log(this, logId, { error: `Endpoint ${method} ${endpointPath} Not Found` });\r\n            throw new Error(`Endpoint ${method} ${endpointPath} Not Found`);\r\n        }\r\n\r\n        this.agentRuntime.updateComponent(endpoint.id, { active: true, input, sourceId: null });\r\n\r\n        let step;\r\n        do {\r\n            step = await this.agentRuntime.runCycle();\r\n\r\n            //adjust latency based on cpu load\r\n            const qosLatency = Math.floor(OSResourceMonitor.cpu.load * this.planInfo?.maxLatency || 0);\r\n\r\n            await delay(30 + qosLatency);\r\n        } while (!step?.finalResult && !this._kill);\r\n\r\n        if (this._kill) {\r\n            console.warn(`Agent ${this.id} was killed`);\r\n            return { error: 'Agent killed' };\r\n        }\r\n        result = await this.postProcess(step?.finalResult).catch((error) => ({ error }));\r\n\r\n        //post process all results\r\n        if (this.agentRuntime.circularLimitReached) {\r\n            const circularLimitData = this.agentRuntime.circularLimitReached;\r\n            result = { error: `Circular Calls Limit Reached on ${circularLimitData}. Current circular limit is ${this.circularLimit}` };\r\n            throw new Error(`Circular Calls Limit Reached on ${circularLimitData}. Current circular limit is ${this.circularLimit}`);\r\n        }\r\n\r\n        if (logId) AgentLogger.log(this, logId, { outputTimestamp: '' + Date.now(), result });\r\n\r\n        this.updateTasksCount(); //Important, don't use await here, we need the call to be non blocking\r\n\r\n        //FIXME: does debug call ever reach this point ?\r\n        return this.agentRuntime.debug ? { state: result, dbgSession, sessionClosed } : result;\r\n    }\r\n\r\n    private async updateTasksCount() {\r\n        //tasks count update logic\r\n    }\r\n\r\n    public async postProcess(result) {\r\n        if (Array.isArray(result)) result = result.flat(Infinity);\r\n        if (!Array.isArray(result)) result = [result];\r\n\r\n        for (let i = 0; i < result.length; i++) {\r\n            const _result = result[i];\r\n            if (!_result) continue;\r\n            if (_result._debug) delete _result._debug;\r\n            if (_result._debug_time) delete _result._debug_time;\r\n            const _componentData = this.components[_result.id];\r\n            if (!_componentData) continue;\r\n            const _component: Component = componentInstance[_componentData.name];\r\n            if (!_component) continue;\r\n            //if (_component.hasPostProcess) {\r\n            const postProcessResult = await _component.postProcess(_result, _componentData, this).catch((error) => ({ error }));\r\n\r\n            result[i] = postProcessResult;\r\n            //}\r\n        }\r\n\r\n        if (result.length == 1) result = result[0];\r\n        return result;\r\n    }\r\n\r\n    // public saveRuntimeComponentData(componentId, data) {\r\n    //     //let runtimeData = { ...this.agentRuntime.getRuntimeData(componentId), ...data };\r\n    //     //this.agentRuntime.updateComponent(componentId, { runtimeData: data });\r\n\r\n    //     this.agentRuntime.saveRuntimeComponentData(componentId, data);\r\n    // }\r\n    // private getRuntimeData(componentId) {\r\n    //     // const componentData = this.agentRuntime.getComponentData(componentId);\r\n    //     // if (!componentData) return {};\r\n    //     // const rData = componentData.runtimeData || {};\r\n\r\n    //     return this.agentRuntime.getRuntimeData(componentId);\r\n    // }\r\n\r\n    // private clearRuntimeComponentData(componentId) {\r\n    //     this.agentRuntime.resetComponent(componentId);\r\n    // }\r\n\r\n    private hasLoopAncestor(inputEntry) {\r\n        if (!inputEntry.prev) return false;\r\n        for (let prevId of inputEntry.prev) {\r\n            const prevComponentData = this.components[prevId];\r\n            if (prevComponentData.name == 'ForEach') return true;\r\n\r\n            for (let inputEntry of prevComponentData.inputs) {\r\n                if (this.hasLoopAncestor(inputEntry)) return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearChildLoopRuntimeComponentData(componentId) {\r\n        const componentData = this.components[componentId];\r\n        const runtimeData = this.agentRuntime.getRuntimeData(componentId);\r\n        if (runtimeData._ChildLoopData) {\r\n            for (let inputEntry of componentData.inputs) {\r\n                if (this.hasLoopAncestor(inputEntry)) {\r\n                    delete runtimeData.input[inputEntry.name];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private getComponentMissingInputs(componentId, _input) {\r\n        let missingInputs: any = [];\r\n        const componentData = this.components[componentId];\r\n        const component: Component = componentInstance[componentData.name];\r\n        if (component.alwaysActive) return missingInputs;\r\n\r\n        const readablePredecessors = this.findReadablePredecessors(componentId);\r\n        const readableInputNames = {};\r\n        for (let pred of readablePredecessors) {\r\n            if (pred) {\r\n                readableInputNames[pred.input.name] = pred;\r\n            }\r\n        }\r\n        //readablePredecessors.map((e) => e.input.name);\r\n\r\n        const allInputIndexes = this.connections.filter((c) => c.targetId == componentId).map((e) => e.targetIndex);\r\n        const allInputs = componentData.inputs.filter((r) => allInputIndexes.includes(r.index));\r\n\r\n        if (Array.isArray(allInputs) && allInputs.length > 0) {\r\n            //if the next component has named inputs\r\n            for (let input of allInputs) {\r\n                if (input.optional) continue;\r\n                if (readableInputNames[input.name]) {\r\n                    const pred = readableInputNames[input.name];\r\n                    const component: Component = pred.component;\r\n                    const predComponentData = this.components[pred.id];\r\n                    const foundOutput = component.hasOutput(pred.output.name, predComponentData, this);\r\n                    if (foundOutput) continue; //if the input is readable, skip it, because we can read it's value when needed. Readable inputs are non blocking\r\n                }\r\n                if (typeof _input[input.name] == 'undefined' /* || _input[input.name] == null*/) {\r\n                    missingInputs.push(input.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return missingInputs;\r\n    }\r\n\r\n    public findReadablePredecessors(componentId) {\r\n        const componentData = this.components[componentId];\r\n        const component: Component = componentInstance[componentData.name];\r\n\r\n        const connections = this.connections.filter((c) => c.targetId == componentId);\r\n        const readablePredecessors = connections.map((c) => {\r\n            //this.components[c.sourceId])\r\n            const sourceComponentData = this.components[c.sourceId];\r\n            const sourceComponent: Component = componentInstance[sourceComponentData.name];\r\n            const output = sourceComponentData.outputs[c.sourceIndex];\r\n            const input = componentData.inputs[c.targetIndex];\r\n            if (sourceComponent.hasReadOutput) {\r\n                return { output, input, component: sourceComponent, id: c.sourceId };\r\n            }\r\n            return null;\r\n        });\r\n\r\n        return readablePredecessors.filter((e) => e != null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sourceId\r\n     * @param componentId\r\n     */\r\n    private updateStep(sourceId, componentId) {\r\n        const agentRuntime = this.agentRuntime;\r\n        const step = agentRuntime.curStep;\r\n        const componentData = agentRuntime.getComponentData(componentId);\r\n\r\n        // if (!componentData.steps) componentData.steps = {};\r\n        // if (!componentData.steps[step]) componentData.steps[step] = { sources: [] };\r\n        // componentData.steps[step].sources.push(sourceId);\r\n\r\n        // if (!componentData.stepSources) componentData.stepSources = {};\r\n        // if (!componentData.stepSources[sourceId]) componentData.stepSources[sourceId] = [];\r\n        // componentData.stepSources[sourceId].push(step);\r\n\r\n        agentRuntime.updateComponent(componentId, { step });\r\n    }\r\n\r\n    async callComponent(sourceId, componentId, input?) {\r\n        const agentRuntime = this.agentRuntime;\r\n        const componentData = this.components[componentId];\r\n        const component: Component = componentInstance[componentData.name];\r\n\r\n        if (this._kill) {\r\n            console.warn(`Agent ${this.id} was killed, skipping component ${componentData.name}`);\r\n            return { id: componentData.id, name: componentData.displayName, result: null, error: 'Agent killed' };\r\n        }\r\n\r\n        if (!component) {\r\n            throw new Error(`Component ${componentData.name} not found`);\r\n        }\r\n\r\n        this.agentRuntime.incTag(componentId);\r\n        this.agentRuntime.checkCircularLimit();\r\n        if (this.agentRuntime.circularLimitReached) {\r\n            return { error: `Circular Calls Reached` };\r\n        }\r\n\r\n        const data = agentRuntime.getComponentData(componentId);\r\n        if (data?.output?._missing_inputs) {\r\n            agentRuntime.updateComponent(componentId, { output: {} });\r\n        }\r\n\r\n        const _input = this.prepareComponentInput(componentId, input);\r\n\r\n        //insert log\r\n        const logId = AgentLogger.log(this, null, {\r\n            sourceId: sourceId || 'AGENT',\r\n            componentId,\r\n            domain: this.domain,\r\n            workflowID: this.agentRuntime.workflowReqId,\r\n            processID: this.agentRuntime.processID,\r\n            input:\r\n                componentData.name == 'APIEndpoint' ? (this.agentRequest.method == 'GET' ? this.agentRequest.query : this.agentRequest.body) : _input,\r\n            inputTimestamp: new Date().toISOString(),\r\n            sessionID: this.callerSessionId,\r\n            tags: this.sessionTag,\r\n        });\r\n\r\n        let output: any = null;\r\n        let missingInputs: any = [];\r\n\r\n        //agentRuntime.updateComponent(componentId, { step: agentRuntime.curStep });\r\n        this.updateStep(sourceId, componentId);\r\n\r\n        //first we check if the debugger is injecting an output, if yes we skip the inputs check\r\n        if (agentRuntime.debug) {\r\n            output = await agentRuntime.injectDebugOutput(componentId);\r\n        }\r\n\r\n        if (!output) {\r\n            missingInputs = this.getComponentMissingInputs(componentId, _input);\r\n\r\n            if (missingInputs.length > 0) {\r\n                agentRuntime.updateComponent(componentId, { active: true, status: 'waiting' });\r\n                //check if _error output is connected to a component\r\n                const connections = this.connections.filter((c) => c.sourceId == componentId) || [];\r\n                let hasErrorHandler = false;\r\n                for (let connection of connections) {\r\n                    const outputEndpoint = componentData.outputs[connection.sourceIndex];\r\n                    if (outputEndpoint.name == '_error') {\r\n                        hasErrorHandler = true;\r\n                        break;\r\n                    }\r\n                }\r\n                //if (hasErrorHandler) return { id: componentData.id, name: componentData.name, result: null };\r\n\r\n                output = { _error: 'Missing inputs : ' + JSON.stringify(missingInputs), _missing_inputs: missingInputs };\r\n            }\r\n\r\n            if (!output) {\r\n                //the following case happens when no debugger injection was performed\r\n                const validationResult = await component.validateConfig(componentData);\r\n                if (validationResult._error) {\r\n                    output = validationResult;\r\n                } else {\r\n                    try {\r\n                        await this.parseVariables(); //make sure that any vault variable is loaded before processing the component\r\n                        //TODO: apply type inference here instead of in the component .process method\r\n                        output = await component.process({ ...this.agentVariables, ..._input }, componentData, this);\r\n                        console.log(output);\r\n                    } catch (error: any) {\r\n                        //this are fatal errors requiring to cancel the execution of this component.\r\n                        console.error('Error on component process: ', { componentId, name: componentData.name, input: _input }, error);\r\n                        if (error?.message) output = { Response: undefined, _error: error.message, _debug: error.message };\r\n                        else output = { Response: undefined, _error: error.toString(), _debug: error.toString() };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const runtimeData = this.agentRuntime.getRuntimeData(componentId);\r\n        agentRuntime.updateComponent(componentId, { output });\r\n\r\n        if (output._in_progress) {\r\n            agentRuntime.updateComponent(componentId, { active: true, status: 'in_progress' });\r\n        }\r\n\r\n        if (output.error || output._error) {\r\n            //TODO : check if we need to keep loop data while clearing runtime data here\r\n            //in fact, output._error might be connected to a next component, in which case we need to keep the loop data\r\n            this.agentRuntime.resetComponent(componentId);\r\n\r\n            if (logId) {\r\n                //update log\r\n                AgentLogger.log(this, logId, { error: output.error || output._error });\r\n            }\r\n            if (output.error)\r\n                return [\r\n                    {\r\n                        id: componentData.id,\r\n                        name: componentData.displayName,\r\n                        result: null,\r\n                        error: output.error || output._error,\r\n                        _debug: output.error || output._error,\r\n                    },\r\n                ];\r\n        }\r\n\r\n        let results: any = [];\r\n        if (output /*&& !component.hasReadOutput*/ && !output._missing_inputs) {\r\n            AgentLogger.logTask(this, 1); //log successful task (non blocking call)\r\n\r\n            //proceed with the next component(s)\r\n            results = await this.callNextComponents(componentId, output).catch((error) => ({\r\n                error,\r\n                id: componentData.id,\r\n                name: componentData.displayName,\r\n            }));\r\n\r\n            //TODO : maybe handle the number of branches inside ForEach component\r\n            if (runtimeData._LoopData && output._in_progress && runtimeData._LoopData.branches == undefined) {\r\n                //handle loop branching\r\n                const branches = Array.isArray(results) ? results.length : 1;\r\n                if (output._in_progress) {\r\n                    runtimeData._LoopData.branches = branches;\r\n                    agentRuntime.updateRuntimeData(componentId, { _LoopData: runtimeData._LoopData });\r\n                }\r\n            }\r\n\r\n            if (results._is_leaf) {\r\n                //we reached the end of the execution tree, we need to check if this branch is a loop\r\n                delete results._is_leaf;\r\n                const _ChildLoopData = runtimeData._ChildLoopData;\r\n                if (_ChildLoopData && _ChildLoopData.parentId) {\r\n                    const parentId = _ChildLoopData.parentId;\r\n                    const _LoopData = this.agentRuntime.getRuntimeData(parentId)._LoopData;\r\n                    if (_LoopData) {\r\n                        if (!_LoopData.result) _LoopData.result = [];\r\n                        //we are in a loop, we need to update loop parent status in order to signal that we can run the next loop cycle\r\n\r\n                        let resultsCopy = JSON.parse(JSON.stringify(results));\r\n                        if (results.result) results.result._exclude = true;\r\n\r\n                        resultsCopy = await component.postProcess(resultsCopy, componentData, this);\r\n\r\n                        _LoopData.result.push(resultsCopy);\r\n                        _LoopData.branches--;\r\n\r\n                        if (_LoopData.branches <= 0) {\r\n                            agentRuntime.updateComponent(parentId, { active: true, status: '' }); //remove _in_progress status after processing all branches\r\n                        }\r\n                        //save the last result so that the loop parent can read it\r\n                        agentRuntime.updateRuntimeData(parentId, { _LoopData });\r\n                    }\r\n                } else {\r\n                    //leaf but no childLoopData, is this a loop component with no children ?\r\n                    const _LoopData = this.agentRuntime.getRuntimeData(componentId)._LoopData;\r\n                    if (_LoopData && _LoopData.loopIndex == 1) {\r\n                        _LoopData._in_progress = false;\r\n                        output._in_progress = false;\r\n                        agentRuntime.updateComponent(componentId, { active: true, status: '' });\r\n                        agentRuntime.updateRuntimeData(componentId, { _LoopData });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //check if the component context is potentially needed in next cycles\r\n        if (!output._missing_inputs && !output._in_progress) {\r\n            //we processed the current component, we can now reset the runtime data and active status\r\n            const inLoop =\r\n                runtimeData?._ChildLoopData?._in_progress && runtimeData._ChildLoopData?.loopIndex < runtimeData._ChildLoopData?.loopLength;\r\n            if (inLoop) {\r\n                // loop children require to keep external runtime data, we only clear the data that was set inside the loop\r\n                this.clearChildLoopRuntimeComponentData(componentId);\r\n                agentRuntime.updateComponent(componentId, { active: true, status: 'waiting' });\r\n            } else {\r\n                this.agentRuntime.resetComponent(componentId); //also sets active to false\r\n            }\r\n        } //if inputs were missing, the output contains error information, not actual component processing output, in this case we keep the runtime data\r\n\r\n        //filter out null results\r\n        if (Array.isArray(results)) results = results.flat(Infinity).filter((r) => r.result != null);\r\n\r\n        if (logId) {\r\n            //update log\r\n            AgentLogger.log(this, logId, { output, outputTimestamp: '' + Date.now() });\r\n        }\r\n\r\n        //return this.agentRuntime.debug ? [results, { id: componentData.id, name: componentData.name, result: output }] : results;\r\n        return [results, { id: componentData.id, name: componentData.displayName, result: output }];\r\n    }\r\n    JSONExpression(obj, propertyString) {\r\n        const properties = propertyString.split(/\\.|\\[|\\]\\.|\\]\\[|\\]/).filter(Boolean);\r\n        let currentProperty = obj;\r\n\r\n        for (let property of properties) {\r\n            if (currentProperty === undefined || currentProperty === null) {\r\n                return undefined;\r\n            }\r\n\r\n            currentProperty = currentProperty[property];\r\n        }\r\n\r\n        return currentProperty;\r\n    }\r\n\r\n    //\r\n    async callNextComponents(componentId, output) {\r\n        const agentRuntime = this.agentRuntime;\r\n        //agentRuntime.incStep();\r\n\r\n        const componentData = this.components[componentId];\r\n        const component: Component = componentInstance[componentData.name];\r\n\r\n        //if (component.hasReadOutput) return [];\r\n\r\n        //get the list of connections for the current component in order to determine the next component(s) to call\r\n        let connections = this.connections\r\n            .filter((c) => c.sourceId == componentId /*|| this.alwaysActiveComponents[c.sourceId]*/)\r\n            .map((c) => ({ ...c, output, componentData }));\r\n\r\n        //also find connections from always active components to components with status 'waiting'\r\n\r\n        const waitingComponents = agentRuntime.getWaitingComponents();\r\n        const waitingComponentIds = waitingComponents.map((e) => e.id);\r\n        const alwaysActiveIds = Object.keys(this.agentRuntime.alwaysActiveComponents);\r\n        const alwaysActiveConnections = this.connections\r\n            .filter((c) => alwaysActiveIds.includes(c.sourceId) && waitingComponentIds.includes(c.targetId))\r\n            .map((c) => {\r\n                const output = {};\r\n                const waitingComponent = waitingComponents.find((e) => e.id == c.targetId);\r\n                const prevComponentData = this.components[c.sourceId];\r\n                const prevComponent: Component = componentInstance[prevComponentData.name];\r\n                const outputEndpoint = prevComponentData.outputs[c.sourceIndex];\r\n                output[outputEndpoint.name] = prevComponent.readOutput(outputEndpoint.name, prevComponentData, this);\r\n\r\n                return { ...c, output, componentData: this.components[c.sourceId] };\r\n            });\r\n        connections = [...connections, ...alwaysActiveConnections];\r\n\r\n        //no more components to call, return the output\r\n        if (!Array.isArray(connections) || connections.length == 0) {\r\n            return { id: componentData.id, name: componentData.name, result: output, _is_leaf: true };\r\n        }\r\n\r\n        const targetComponents = //classify connections by objects\r\n            connections.reduce((acc, obj) => {\r\n                let key = obj.targetId;\r\n                if (!acc[key]) {\r\n                    acc[key] = [];\r\n                }\r\n                acc[key].push(obj);\r\n                return acc;\r\n            }, {});\r\n\r\n        const promises: any = [];\r\n        for (let targetId in targetComponents) {\r\n            const targetComponentData = this.components[targetId];\r\n\r\n            //if we are not inside an async component, we skip async branches\r\n            //Note : we exclude Async component from this rule because it's the one that initiates the async job\r\n            if (!this.async && targetComponentData.async && targetComponentData.name !== 'Async') continue;\r\n\r\n            const targetComponent: Component = componentInstance[targetComponentData.name];\r\n            const connections = targetComponents[targetId];\r\n\r\n            if (Array.isArray(connections) && connections.length > 0) {\r\n                const nextInput = {};\r\n                for (let connection of connections) {\r\n                    const output = connection.output;\r\n                    const componentData = connection.componentData;\r\n                    const outputEndpoint = componentData.outputs[connection.sourceIndex]; //source\r\n                    const inputEndpoint = targetComponentData.inputs[connection.targetIndex]; //target\r\n\r\n                    //outputs can be named (e.g \"user:email\" or \"Req:body:data\") in which case they refer to a path in the output object\r\n                    const outputExpression = outputEndpoint.expression || outputEndpoint.name;\r\n                    const outputParts = outputExpression.split('.');\r\n\r\n                    const defaultOutputs = componentData.outputs.find((c) => c.default);\r\n                    let value: any = undefined;\r\n                    if (outputEndpoint.default) value = output[outputEndpoint.name] /* || null*/;\r\n                    else {\r\n                        if (defaultOutputs /* && output[defaultOutputs.name]?.[outputEndpoint.name]*/) {\r\n                            value = output[defaultOutputs.name]?.[outputEndpoint.name];\r\n                        }\r\n                    }\r\n                    if (/*value === null || */ value === undefined && outputParts.length >= 1) {\r\n                        let val = this.JSONExpression(output, outputExpression);\r\n                        if (val !== undefined) value = val;\r\n                    }\r\n\r\n                    // if (/*value !== null && */ value !== undefined) {\r\n                    //     nextInput[inputEndpoint.name] = [...new Set([[nextInput[inputEndpoint.name], value]].flat(Infinity))].filter(\r\n                    //         (e) => e !== undefined /*&& e !== null*/,\r\n                    //     );\r\n\r\n                    //     if (nextInput[inputEndpoint.name].length == 1) nextInput[inputEndpoint.name] = nextInput[inputEndpoint.name][0];\r\n                    // }\r\n\r\n                    //Fix suggested by Sentinel Agent\r\n                    if (/*value !== null && */ value !== undefined) {\r\n                        let combinedInput = [...[nextInput[inputEndpoint.name]].flat(), ...[value].flat()].filter(\r\n                            (e) => e !== undefined /*&& e !== null*/\r\n                        );\r\n\r\n                        nextInput[inputEndpoint.name] = combinedInput.length === 1 ? combinedInput[0] : combinedInput;\r\n                    }\r\n                }\r\n                if (!nextInput || JSON.stringify(nextInput) == '{}') continue;\r\n\r\n                const input = this.prepareComponentInput(targetId, nextInput);\r\n\r\n                const targetComponent = this.components[targetId];\r\n\r\n                const missingInputs = this.getComponentMissingInputs(targetId, input);\r\n                const status = missingInputs.length > 0 ? 'waiting' : undefined;\r\n\r\n                const sourceRuntimeData = this.agentRuntime.getRuntimeData(componentId); //We read the previous component runtime data\r\n\r\n                let _ChildLoopData = sourceRuntimeData._LoopData; //is the source a loop component ?\r\n\r\n                if (!_ChildLoopData || !_ChildLoopData._in_progress) {\r\n                    //if it's a loop component we need to check if the loop is still in progress\r\n\r\n                    _ChildLoopData = sourceRuntimeData._ChildLoopData; // if the loop is completed, check if the loop component is a nested loop, in which case we pass the parent context to the following component\r\n                }\r\n\r\n                agentRuntime.updateComponent(targetId, { active: true, input: nextInput, sourceId: componentId, status });\r\n                agentRuntime.updateRuntimeData(targetId, { _ChildLoopData, _LoopData: null });\r\n                promises.push(idPromise({ id: targetId, name: targetComponent.name, inputs: nextInput }));\r\n\r\n                if (status) {\r\n                    //if status is set, track the component status update\r\n                    //if not set, it means that the component is active and will be logged upon execution\r\n                    //this can be considered as a fake log step that help us keep track of the execution tree\r\n                    const logId = AgentLogger.log(this, null, {\r\n                        sourceId: componentId,\r\n                        componentId: targetId,\r\n                        step: this.agentRuntime.curStep + 1, //we force to next step because the current step order is updated in the next runCycle()\r\n                        domain: this.domain,\r\n                        workflowID: this.agentRuntime.workflowReqId,\r\n                        processID: this.agentRuntime.processID,\r\n                        input: { __action: 'status_update', __status: status, data: nextInput },\r\n                        inputTimestamp: new Date().toISOString(),\r\n                        sessionID: this.callerSessionId,\r\n                        tags: this.sessionTag,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (promises.length == 0) {\r\n            return { id: componentData.id, name: componentData.name, result: output, _is_leaf: true };\r\n        }\r\n        const results = await Promise.all(promises);\r\n\r\n        //TODO : exclusive components handling\r\n        //in order to run exclusive components first, we need to run them in current cycle\r\n        //then we signal to the caller component that one more run cycle is needed\r\n        return results.length == 1 ? results[0] : results;\r\n    }\r\n    private prepareComponentInput(targetId, inputs) {\r\n        const rData: any = this.agentRuntime.getRuntimeData(targetId);\r\n        const componentData = this.components[targetId];\r\n        const rDataInput = rData?.input || {};\r\n\r\n        let _input = { ...rDataInput };\r\n        if (inputs) {\r\n            // for (let key in inputs) {\r\n            //     let value = inputs[key];\r\n            //     //_input[key] = mergeJsonData(_input[key], value);\r\n\r\n            //     _input[key] = [...new Set([[rDataInput[key]], [value]].flat(Infinity))].filter((e) => e !== undefined /* && e !== null*/);\r\n            //     if (_input[key].length == 1) _input[key] = _input[key][0];\r\n            // }\r\n\r\n            //Fix suggested by Sentinel Agent\r\n            for (let key in inputs) {\r\n                let value = inputs[key];\r\n                // Concatenate the existing value with the new input, without using Set to preserve duplicates\r\n                _input[key] = [rDataInput[key], value].flat(Infinity).filter((e) => e !== undefined);\r\n\r\n                // Simplify the array to a single value if there is only one element after flattening\r\n                if (_input[key].length == 1) _input[key] = _input[key][0];\r\n            }\r\n        }\r\n\r\n        const readablePredecessors = this.findReadablePredecessors(targetId);\r\n        for (let c of readablePredecessors) {\r\n            if (c) {\r\n                const predComponentData = this.components[c.id];\r\n                const value = c.component.readOutput(c.output.name, predComponentData, this);\r\n                if (value && c.input?.name) {\r\n                    if (!_input) _input = {};\r\n                    _input[c.input.name] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        //this.saveRuntimeComponentData(targetId, { input: _input }); //TODO : check if we can use this.agentRuntime.updateRuntimeData instead (need to be carefully tested)\r\n        this.agentRuntime.updateRuntimeData(targetId, { input: _input });\r\n\r\n        for (let input of componentData.inputs) {\r\n            if (input.defaultVal && _input[input.name] === undefined) {\r\n                _input[input.name] = TemplateString(input.defaultVal).parse(this.agentVariables).result;\r\n                //parseTemplate(input.defaultVal, this.agentVariables, { escapeString: false, processUnmatched: false });\r\n            }\r\n        }\r\n        return _input;\r\n    }\r\n\r\n    public getConnectionSource(connection) {\r\n        return this.components[connection.sourceId].inputs.find((e) => e.index === connection.sourceIndex);\r\n    }\r\n\r\n    public getConnectionTarget(connection) {\r\n        return this.components[connection.targetId].inputs.find((e) => e.index === connection.targetIndex);\r\n    }\r\n\r\n    private recursiveTagAsyncComponents(component) {\r\n        const agent = this;\r\n        for (let output of component.outputs) {\r\n            if (component.name == 'Async' && output.name === 'JobID') continue; //'JobID' is a special output\r\n            const connected = agent.connections.filter((c) => c.sourceId === component.id && c.sourceIndex === output.index);\r\n            if (!connected) continue;\r\n            for (let con of connected) {\r\n                const targetComponent = agent.components[con.targetId];\r\n                if (!targetComponent) continue;\r\n                targetComponent.async = true;\r\n                this.recursiveTagAsyncComponents(targetComponent);\r\n            }\r\n        }\r\n    }\r\n    private tagAsyncComponents() {\r\n        const agent = this;\r\n        const componentsList: any[] = Object.values(agent.components);\r\n        const AsyncComponents: any[] = componentsList.filter((c) => c.name === 'Async');\r\n        if (!AsyncComponents || AsyncComponents.length == 0) return;\r\n        for (let AsyncComponent of AsyncComponents) {\r\n            AsyncComponent.async = true;\r\n            this.recursiveTagAsyncComponents(AsyncComponent);\r\n        }\r\n\r\n        //AsyncComponents.async = true;\r\n\r\n        //this.recursiveTagAsyncComponents(AsyncComponent, agent);\r\n    }\r\n}\r\n","import { SREConfig, TConnectorService } from '@sre/types/SRE.types';\r\nimport { ConnectorService } from './ConnectorsService';\r\nimport SystemEvents from './SystemEvents';\r\nimport { Logger } from '../helpers/Log.helper';\r\n\r\nconst logger = Logger('SRE');\r\nconst CInstance = ConnectorService;\r\n\r\nexport default class SmythRuntime {\r\n    public started = false;\r\n\r\n    protected constructor() {\r\n        this.started = true;\r\n    }\r\n\r\n    protected static instance?: SmythRuntime;\r\n    public static get Instance(): SmythRuntime {\r\n        if (!SmythRuntime.instance) {\r\n            SmythRuntime.instance = new SmythRuntime();\r\n        }\r\n        return SmythRuntime.instance;\r\n    }\r\n\r\n    private initialized = false;\r\n    public init(_config: SREConfig): SmythRuntime {\r\n        if (this.initialized) {\r\n            throw new Error('SRE already initialized');\r\n        }\r\n        this.initialized = true;\r\n\r\n        const config = this.autoConf(_config);\r\n\r\n        for (let connectorType in config) {\r\n            for (let configEntry of config[connectorType]) {\r\n                CInstance.init(connectorType as TConnectorService, configEntry.Connector, configEntry.Settings, configEntry.Default);\r\n            }\r\n        }\r\n\r\n        SystemEvents.emit('SRE:Initialized');\r\n        return SmythRuntime.Instance as SmythRuntime;\r\n    }\r\n\r\n    /**\r\n     * This function tries to auto configure, or fixes the provided configuration\r\n     *\r\n     * FIXME: The current version does not actually auto configure SRE, it just fixes the provided configuration for now\r\n     * TODO: Implement auto configuration based on present environment variables and auto-detected configs\r\n     * @param config\r\n     */\r\n    private autoConf(config: SREConfig) {\r\n        const newConfig: SREConfig = {};\r\n        for (let connectorType in config) {\r\n            newConfig[connectorType] = [];\r\n            if (typeof config[connectorType] === 'object') config[connectorType] = [config[connectorType]];\r\n\r\n            let hasDefault = false;\r\n            for (let connector of config[connectorType]) {\r\n                if (!connector.Connector) {\r\n                    console.warn(`Missing Connector Name in ${connectorType} entry ... it will be ignored`);\r\n                    continue;\r\n                }\r\n                if (connector.Default) {\r\n                    if (hasDefault) {\r\n                        console.warn(`Entry ${connectorType} has more than one default Connector ... only the first one will be used`);\r\n                    }\r\n                    hasDefault = true;\r\n                }\r\n                newConfig[connectorType].push(connector);\r\n            }\r\n\r\n            if (!hasDefault && newConfig[connectorType].length > 0) {\r\n                newConfig[connectorType][0].Default = true;\r\n            }\r\n        }\r\n\r\n        return newConfig;\r\n    }\r\n\r\n    public ready(): boolean {\r\n        return this.initialized;\r\n    }\r\n\r\n    public async _stop() {\r\n        logger.info('Shutting Down SmythRuntime ...');\r\n        CInstance._stop();\r\n        SmythRuntime.instance = undefined;\r\n        this.started = false;\r\n    }\r\n}\r\n","import { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, IACL } from '@sre/types/ACL.types';\r\nimport { StorageData, StorageMetadata } from '@sre/types/Storage.types';\r\n\r\nexport interface IStorageRequest {\r\n    read(resourceId: string): Promise<StorageData>;\r\n    write(resourceId: string, value: StorageData, acl?: IACL, metadata?: StorageMetadata): Promise<void>;\r\n    delete(resourceId: string): Promise<void>;\r\n    exists(resourceId: string): Promise<boolean>;\r\n    getMetadata(resourceId: string): Promise<StorageMetadata | undefined>;\r\n    setMetadata(resourceId: string, metadata: StorageMetadata): Promise<void>;\r\n    getACL(resourceId: string): Promise<ACL | undefined>;\r\n    setACL(resourceId: string, acl: IACL): Promise<void>;\r\n}\r\n\r\nexport abstract class StorageConnector extends SecureConnector {\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n\r\n    protected abstract read(acRequest: AccessRequest, resourceId: string): Promise<StorageData>;\r\n    protected abstract write(acRequest: AccessRequest, resourceId: string, value: StorageData, acl?: IACL, metadata?: StorageMetadata): Promise<void>;\r\n    protected abstract delete(acRequest: AccessRequest, resourceId: string): Promise<void>;\r\n    protected abstract exists(acRequest: AccessRequest, resourceId: string): Promise<boolean>;\r\n\r\n    protected abstract getMetadata(acRequest: AccessRequest, resourceId: string): Promise<StorageMetadata | undefined>;\r\n    protected abstract setMetadata(acRequest: AccessRequest, resourceId: string, metadata: StorageMetadata): Promise<void>;\r\n\r\n    protected abstract getACL(acRequest: AccessRequest, resourceId: string): Promise<ACL | undefined>;\r\n    protected abstract setACL(acRequest: AccessRequest, resourceId: string, acl: IACL): Promise<void>;\r\n\r\n    public user(candidate: AccessCandidate): IStorageRequest {\r\n        return {\r\n            write: async (resourceId: string, value: StorageData, acl?: IACL, metadata?: StorageMetadata) => {\r\n                return await this.write(candidate.writeRequest, resourceId, value, acl, metadata);\r\n            },\r\n            read: async (resourceId: string) => {\r\n                return await this.read(candidate.readRequest, resourceId);\r\n            },\r\n            delete: async (resourceId: string) => {\r\n                await this.delete(candidate.readRequest, resourceId);\r\n            },\r\n            exists: async (resourceId: string) => {\r\n                return await this.exists(candidate.readRequest, resourceId);\r\n            },\r\n            getMetadata: async (resourceId: string) => {\r\n                return await this.getMetadata(candidate.readRequest, resourceId);\r\n            },\r\n            setMetadata: async (resourceId: string, metadata: StorageMetadata) => {\r\n                await this.setMetadata(candidate.writeRequest, resourceId, metadata);\r\n            },\r\n            getACL: async (resourceId: string) => {\r\n                return await this.getACL(candidate.readRequest, resourceId);\r\n            },\r\n            setACL: async (resourceId: string, acl: IACL) => {\r\n                return await this.setACL(candidate.writeRequest, resourceId, acl);\r\n            },\r\n        } as IStorageRequest;\r\n    }\r\n}\r\n","//==[ SRE: S3Storage ]======================\r\n\r\nimport { DeleteObjectCommand, GetObjectCommand, HeadObjectCommand, PutObjectCommand, S3Client, S3ClientConfig } from '@aws-sdk/client-s3';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { IStorageRequest, StorageConnector } from '@sre/IO/Storage.service/StorageConnector';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { IAccessCandidate, IACL, TAccessLevel, TAccessResult, TAccessRole } from '@sre/types/ACL.types';\r\nimport { S3Config } from '@sre/types/AWS.types';\r\nimport { StorageData, StorageMetadata } from '@sre/types/Storage.types';\r\nimport { streamToBuffer } from '@sre/utils';\r\nimport type { Readable } from 'stream';\r\n\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\n\r\nconst console = Logger('S3Storage');\r\n\r\nexport class S3Storage extends StorageConnector {\r\n    public name = 'S3Storage';\r\n    private client: S3Client;\r\n    private bucket: string;\r\n\r\n    constructor(config: S3Config & { bucket: string }) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n        this.bucket = config.bucket;\r\n        const clientConfig: S3ClientConfig = {};\r\n        if (config.region) clientConfig.region = config.region;\r\n        if (config.accessKeyId && config.secretAccessKey) {\r\n            clientConfig.credentials = {\r\n                accessKeyId: config.accessKeyId,\r\n                secretAccessKey: config.secretAccessKey,\r\n            };\r\n        }\r\n\r\n        this.client = new S3Client(clientConfig);\r\n    }\r\n\r\n    /**\r\n     * Reads an object from the S3 bucket.\r\n     *\r\n     * @param {string} resourceId - The key of the object to be read.\r\n     * @returns {Promise<any>} - A promise that resolves with the object data.\r\n     */\r\n\r\n    @SecureConnector.AccessControl\r\n    public async read(acRequest: AccessRequest, resourceId: string) {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        const command = new GetObjectCommand({\r\n            Bucket: this.bucket,\r\n            Key: resourceId,\r\n        });\r\n\r\n        try {\r\n            const response = await this.client.send(command);\r\n            //const metadata = response.Metadata;\r\n            return await streamToBuffer(response.Body as Readable);\r\n        } catch (error) {\r\n            if (error.name === 'NotFound' || error.name === 'NoSuchKey') {\r\n                return undefined;\r\n            }\r\n            console.error(`Error reading object from S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async getMetadata(acRequest: AccessRequest, resourceId: string): Promise<StorageMetadata | undefined> {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        try {\r\n            const s3Metadata = await this.getS3Metadata(resourceId);\r\n            return s3Metadata as StorageMetadata;\r\n        } catch (error) {\r\n            console.error(`Error getting access rights in S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async setMetadata(acRequest: AccessRequest, resourceId: string, metadata: StorageMetadata) {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        try {\r\n            let s3Metadata = await this.getS3Metadata(resourceId);\r\n            if (!s3Metadata) s3Metadata = {};\r\n            //s3Metadata['x-amz-meta-data'] = metadata;\r\n            s3Metadata = { ...s3Metadata, ...metadata };\r\n            await this.setS3Metadata(resourceId, s3Metadata);\r\n        } catch (error) {\r\n            console.error(`Error setting access rights in S3`, error);\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Writes an object to the S3 bucket.\r\n     *\r\n     * @param {string} resourceId - The key of the object to be written.\r\n     * @param {any} value - The value of the object to be written.\r\n     * @param {Metadata} metadata - Optional metadata to be associated with the object.\r\n     * @returns {Promise<void>} - A promise that resolves when the object has been written.\r\n     */\r\n    @SecureConnector.AccessControl\r\n    async write(acRequest: AccessRequest, resourceId: string, value: StorageData, acl?: IACL, metadata?: StorageMetadata): Promise<void> {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        const accessCandidate = acRequest.candidate;\r\n\r\n        let amzACL = ACL.from(acl).addAccess(accessCandidate.role, accessCandidate.id, TAccessLevel.Owner).ACL;\r\n        let s3Metadata = {\r\n            ...metadata,\r\n            'x-amz-meta-acl': amzACL,\r\n        };\r\n\r\n        const command = new PutObjectCommand({\r\n            Bucket: this.bucket,\r\n            Key: resourceId,\r\n            Body: value,\r\n            Metadata: this.serializeS3Metadata(s3Metadata),\r\n            ContentType: s3Metadata['ContentType'],\r\n        });\r\n\r\n        try {\r\n            const result: any = await this.client.send(command);\r\n        } catch (error) {\r\n            console.error(`Error writing object to S3`, error.name, error.message);\r\n            //console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an object from the S3 bucket.\r\n     *\r\n     * @param {string} resourceId - The key of the object to be deleted.\r\n     * @returns {Promise<void>} - A promise that resolves when the object has been deleted.\r\n     */\r\n    @SecureConnector.AccessControl\r\n    async delete(acRequest: AccessRequest, resourceId: string): Promise<void> {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        const command = new DeleteObjectCommand({\r\n            Bucket: this.bucket,\r\n            Key: resourceId,\r\n        });\r\n\r\n        try {\r\n            await this.client.send(command);\r\n        } catch (error) {\r\n            console.error(`Error deleting object from S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async exists(acRequest: AccessRequest, resourceId: string): Promise<boolean> {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n        const command = new HeadObjectCommand({\r\n            Bucket: this.bucket,\r\n            Key: resourceId,\r\n        });\r\n\r\n        try {\r\n            await this.client.send(command);\r\n            return true;\r\n        } catch (error) {\r\n            if (error.name === 'NotFound' || error.name === 'NoSuchKey') {\r\n                return false;\r\n            }\r\n\r\n            console.error(`Error checking object existence in S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    //this determines the access rights for the requested resource\r\n    //the connector should check if the resource exists or not\r\n    //if the resource exists we read it's ACL and return it\r\n    //if the resource does not exist we return an write access ACL for the candidate\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate) {\r\n        const s3Metadata = await this.getS3Metadata(resourceId);\r\n        const exists = s3Metadata !== undefined; //undefined metadata means the resource does not exist\r\n        //let acl: ACL = ACL.from(s3Metadata?.['x-amz-meta-acl'] as IACL);\r\n\r\n        if (!exists) {\r\n            //the resource does not exist yet, we grant write access to the candidate in order to allow the resource creation\r\n            return new ACL().addAccess(candidate.role, candidate.id, TAccessLevel.Owner);\r\n        }\r\n        return ACL.from(s3Metadata?.['x-amz-meta-acl'] as IACL);\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async getACL(acRequest: AccessRequest, resourceId: string): Promise<ACL | undefined> {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        try {\r\n            const s3Metadata = await this.getS3Metadata(resourceId);\r\n            return ACL.from(s3Metadata?.['x-amz-meta-acl'] as IACL);\r\n        } catch (error) {\r\n            console.error(`Error getting access rights in S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async setACL(acRequest: AccessRequest, resourceId: string, acl: IACL) {\r\n        // const accessTicket = await this.getAccessTicket(resourceId, acRequest);\r\n        // if (accessTicket.access !== TAccessResult.Granted) throw new Error('Access Denied');\r\n\r\n        try {\r\n            let s3Metadata = await this.getS3Metadata(resourceId);\r\n            if (!s3Metadata) s3Metadata = {};\r\n            //when setting ACL make sure to not lose ownership\r\n            s3Metadata['x-amz-meta-acl'] = ACL.from(acl).addAccess(acRequest.candidate.role, acRequest.candidate.id, TAccessLevel.Owner).ACL;\r\n            await this.setS3Metadata(resourceId, s3Metadata);\r\n        } catch (error) {\r\n            console.error(`Error setting access rights in S3`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private migrateMetadata(metadata: Record<string, string>): Record<string, any> {\r\n        if (!metadata.agentid && !metadata.teamid && !metadata.userid) return metadata as Record<string, any>;\r\n        else {\r\n            const convertibleItems = ['agentid', 'teamid', 'userid'];\r\n            const aclHelper = new ACL();\r\n\r\n            for (let key of convertibleItems) {\r\n                if (!metadata[key]) continue;\r\n                const role = key === 'agentid' ? TAccessRole.Agent : key === 'teamid' ? TAccessRole.Team : TAccessRole.User;\r\n                aclHelper.addAccess(role, metadata[key].toString(), [TAccessLevel.Owner, TAccessLevel.Read, TAccessLevel.Write]);\r\n                delete metadata[key];\r\n            }\r\n            aclHelper.migrated = true;\r\n            const newMetadata: Record<string, any> = {\r\n                'x-amz-meta-acl': aclHelper.ACL,\r\n            };\r\n            //copy remaining metadata\r\n            for (let key in metadata) {\r\n                newMetadata[key] = metadata[key];\r\n            }\r\n\r\n            return newMetadata;\r\n        }\r\n    }\r\n\r\n    private serializeS3Metadata(s3Metadata: Record<string, any>): Record<string, string> {\r\n        let amzMetadata = {};\r\n        if (s3Metadata['x-amz-meta-acl']) {\r\n            //const acl: TACL = s3Metadata['x-amz-meta-acl'];\r\n            if (s3Metadata['x-amz-meta-acl']) {\r\n                amzMetadata['x-amz-meta-acl'] =\r\n                    typeof s3Metadata['x-amz-meta-acl'] == 'string'\r\n                        ? s3Metadata['x-amz-meta-acl']\r\n                        : ACL.from(s3Metadata['x-amz-meta-acl']).serializedACL;\r\n            }\r\n\r\n            delete s3Metadata['x-amz-meta-acl'];\r\n        }\r\n\r\n        for (let key in s3Metadata) {\r\n            if (key == 'ContentType') continue; //skip ContentType as it can only be set when writing the object\r\n            amzMetadata[key] = typeof s3Metadata[key] === 'string' ? s3Metadata[key] : JSON.stringify(s3Metadata[key]);\r\n        }\r\n\r\n        return amzMetadata;\r\n    }\r\n\r\n    private deserializeS3Metadata(amzMetadata: Record<string, string>): Record<string, any> {\r\n        let metadata: Record<string, any> = {};\r\n\r\n        for (let key in amzMetadata) {\r\n            if (key === 'x-amz-meta-acl') {\r\n                metadata[key] = ACL.from(amzMetadata[key]).ACL;\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                metadata[key] = JSON.parse(amzMetadata[key]);\r\n            } catch (error) {\r\n                metadata[key] = amzMetadata[key];\r\n            }\r\n        }\r\n        //TODO : Remove this migration code after all metadata is migrated\r\n        //       Context : an old ACL metadata format was used in initial implementation of Smyth Storage\r\n        //       We need to ensure compatibility with legacy format and seamlessly convert it when reading\r\n        metadata = this.migrateMetadata(metadata) as Record<string, any>;\r\n\r\n        return metadata;\r\n    }\r\n\r\n    private async getS3Metadata(resourceId: string): Promise<Record<string, any> | undefined> {\r\n        try {\r\n            const command = new HeadObjectCommand({\r\n                Bucket: this.bucket,\r\n                Key: resourceId,\r\n            });\r\n            const response = await this.client.send(command);\r\n            const s3RawMetadata = response.Metadata;\r\n            if (!s3RawMetadata || Object.keys(s3RawMetadata).length === 0) return {};\r\n\r\n            let metadata: Record<string, any> = this.deserializeS3Metadata(s3RawMetadata);\r\n\r\n            if (!metadata['ContentType']) metadata['ContentType'] = response.ContentType ? response.ContentType : 'application/octet-stream';\r\n            return metadata;\r\n        } catch (error) {\r\n            if (error.name === 'NotFound' || error.name === 'NoSuchKey') {\r\n                return undefined;\r\n            }\r\n            console.error(`Error reading object metadata from S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async setS3Metadata(resourceId: string, metadata: Record<string, any>): Promise<void> {\r\n        try {\r\n            // Get the current object content\r\n            const getObjectCommand = new GetObjectCommand({\r\n                Bucket: this.bucket,\r\n                Key: resourceId,\r\n            });\r\n            const objectData = await this.client.send(getObjectCommand);\r\n\r\n            // Read the object's content\r\n            const bufferBody = await streamToBuffer(objectData.Body as Readable);\r\n\r\n            const amzMetadata = this.serializeS3Metadata(metadata);\r\n            // Put the object back with the new metadata and the same content\r\n            const putObjectCommand = new PutObjectCommand({\r\n                Bucket: this.bucket,\r\n                Key: resourceId,\r\n                Body: bufferBody,\r\n                Metadata: amzMetadata,\r\n            });\r\n\r\n            await this.client.send(putObjectCommand);\r\n        } catch (error) {\r\n            console.error(`Error setting object metadata in S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","//==[ SRE: Storage ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { S3Storage } from './connectors/S3Storage.class';\r\n\r\nexport class StorageService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.Storage, 'S3', S3Storage);\r\n    }\r\n}\r\n","export default {\r\n    Echo: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop',\r\n        topP: 'top_p',\r\n        frequencyPenalty: 'frequency_penalty',\r\n        presencePenalty: 'presence_penalty',\r\n    },\r\n    OpenAI: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop',\r\n        topP: 'top_p',\r\n        frequencyPenalty: 'frequency_penalty',\r\n        presencePenalty: 'presence_penalty',\r\n    },\r\n    cohere: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop_sequences',\r\n        topP: 'p',\r\n        topK: 'k',\r\n        frequencyPenalty: 'frequency_penalty',\r\n        presencePenalty: 'presence_penalty',\r\n    },\r\n    TogetherAI: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop',\r\n        topP: 'top_p',\r\n        topK: 'top_k',\r\n        frequencyPenalty: 'repetition_penalty',\r\n    },\r\n    AnthropicAI: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop_sequences',\r\n        topP: 'top_p',\r\n        topK: 'top_k',\r\n    },\r\n    GoogleAI: {\r\n        maxTokens: 'maxOutputTokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stopSequences',\r\n        topP: 'topP',\r\n        topK: 'topK',\r\n    },\r\n    Groq: {\r\n        maxTokens: 'max_tokens',\r\n        temperature: 'temperature',\r\n        stopSequences: 'stop',\r\n        topP: 'top_p',\r\n    },\r\n};\r\n","import Agent from '@sre/AgentManager/Agent.class';\r\nimport { Connector } from '@sre/Core/Connector.class';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport models from '@sre/LLMManager/models';\r\nimport paramMappings from '@sre/LLMManager/paramMappings';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { DEFAULT_MAX_TOKENS_FOR_LLM } from '@sre/constants';\r\nimport { JSONContent } from '@sre/helpers/JsonContent.helper';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\nimport { TLLMParams, TLLMMessageBlock, TLLMToolResultMessageBlock, ToolData } from '@sre/types/LLM.types';\r\nimport { isDataUrl, isUrl } from '@sre/utils';\r\nimport axios from 'axios';\r\nimport { encode } from 'gpt-tokenizer';\r\nimport imageSize from 'image-size';\r\nimport EventEmitter from 'events';\r\nimport { Readable } from 'stream';\r\nconst console = Logger('LLMConnector');\r\n\r\nexport interface ILLMConnectorRequest {\r\n    chatRequest(prompt, params: any): Promise<any>;\r\n    visionRequest(prompt, params: any): Promise<any>;\r\n    multimodalRequest(prompt, params: any): Promise<any>;\r\n    toolRequest(params: any): Promise<any>;\r\n    streamToolRequest(params: any): Promise<any>;\r\n    streamRequest(params: any): Promise<EventEmitter>;\r\n    imageGenRequest(prompt, params: any): Promise<any>;\r\n}\r\n\r\nexport type LLMChatResponse = {\r\n    content: string;\r\n    finishReason: string;\r\n};\r\n\r\nexport type ImagesResponse = {\r\n    created: number;\r\n    data: Array<{\r\n        b64_json?: string;\r\n        url?: string;\r\n    }>;\r\n};\r\n\r\nexport class LLMStream extends Readable {\r\n    private dataQueue: any[];\r\n    private toolsData: any[];\r\n    private hasData: boolean;\r\n    isReading: boolean;\r\n    constructor(options?) {\r\n        super(options);\r\n        this.dataQueue = [];\r\n        this.toolsData = [];\r\n        this.isReading = true;\r\n    }\r\n\r\n    _read(size) {\r\n        if (this.dataQueue.length > 0) {\r\n            while (this.dataQueue.length > 0) {\r\n                const chunk = this.dataQueue.shift();\r\n                if (!this.push(chunk)) {\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            this.push(null); // No more data\r\n        }\r\n    }\r\n\r\n    enqueueData(data) {\r\n        this.dataQueue.push(data);\r\n        this.read(0); // Trigger the _read method\r\n    }\r\n\r\n    endStream() {\r\n        this.isReading = false;\r\n        this.push(null); // End the stream\r\n    }\r\n}\r\n\r\nexport abstract class LLMConnector extends Connector {\r\n    public abstract name: string;\r\n    //public abstract user(candidate: AccessCandidate): ILLMConnectorRequest;\r\n    protected abstract chatRequest(acRequest: AccessRequest, prompt, params: any): Promise<LLMChatResponse>;\r\n    protected abstract visionRequest(acRequest: AccessRequest, prompt, params: any, agent: string | Agent): Promise<LLMChatResponse>;\r\n    protected abstract multimodalRequest(acRequest: AccessRequest, prompt, params: any, agent: string | Agent): Promise<LLMChatResponse>;\r\n    protected abstract toolRequest(acRequest: AccessRequest, params: any): Promise<any>;\r\n    protected abstract streamToolRequest(acRequest: AccessRequest, params: any): Promise<any>;\r\n    protected abstract streamRequest(acRequest: AccessRequest, params: any): Promise<EventEmitter>;\r\n    protected abstract imageGenRequest(acRequest: AccessRequest, prompt, params: any): Promise<ImagesResponse>;\r\n\r\n    public user(candidate: AccessCandidate): ILLMConnectorRequest {\r\n        if (candidate.role !== 'agent') throw new Error('Only agents can use LLM connector');\r\n        const vaultConnector = ConnectorService.getVaultConnector();\r\n        if (!vaultConnector) throw new Error('Vault Connector unavailable, cannot proceed');\r\n        return {\r\n            chatRequest: async (prompt, params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.chatRequest(candidate.readRequest, prompt, params);\r\n            },\r\n            visionRequest: async (prompt, params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.visionRequest(candidate.readRequest, prompt, params, candidate.id);\r\n            },\r\n            multimodalRequest: async (prompt, params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.multimodalRequest(candidate.readRequest, prompt, params, candidate.id);\r\n            },\r\n            imageGenRequest: async (prompt, params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.imageGenRequest(candidate.readRequest, prompt, params);\r\n            },\r\n            toolRequest: async (params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.toolRequest(candidate.readRequest, params);\r\n            },\r\n            streamToolRequest: async (params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.streamToolRequest(candidate.readRequest, params);\r\n            },\r\n            streamRequest: async (params: any) => {\r\n                const llm = models[params.model]?.llm;\r\n                if (!llm) throw new Error(`Model ${params.model} not supported`);\r\n                params.apiKey = await vaultConnector\r\n                    .user(candidate)\r\n                    .get(llm)\r\n                    .catch((e) => ''); //if vault access is denied we just return empty key\r\n                return this.streamRequest(candidate.readRequest, params);\r\n            },\r\n        };\r\n    }\r\n\r\n    private async getSafeMaxTokens(givenMaxTokens: number, model: string, hasApiKey: boolean): Promise<number> {\r\n        let allowedTokens = this.getAllowedCompletionTokens(model, hasApiKey);\r\n\r\n        // If the specified max tokens exceed the allowed limit, use the maximum allowed tokens instead.\r\n        let maxTokens = givenMaxTokens > allowedTokens ? allowedTokens : givenMaxTokens;\r\n\r\n        return +maxTokens;\r\n    }\r\n\r\n    protected async countVisionPromptTokens(prompt: any) {\r\n        let tokens = 0;\r\n\r\n        const textObj = prompt?.filter((item) => item.type === 'text');\r\n\r\n        /**\r\n         * encodeChat does not support object like {type: 'text', text: 'some text'}\r\n         * so count tokens of the text separately\r\n         * TODO: try to improve this later\r\n         */\r\n        const textTokens = encode(textObj?.[0]?.text).length;\r\n\r\n        const images = prompt?.filter((item) => item.type === 'image_url');\r\n        let imageTokens = 0;\r\n\r\n        for (const image of images) {\r\n            const image_url = image?.image_url?.url;\r\n            const { width, height } = await _getImageDimensions(image_url);\r\n\r\n            const tokens = _countImageTokens(width, height);\r\n\r\n            imageTokens += tokens;\r\n        }\r\n\r\n        tokens = textTokens + imageTokens;\r\n\r\n        return tokens;\r\n    }\r\n\r\n    public resolveModelName(model: string) {\r\n        return models[model]?.alias || model;\r\n    }\r\n    private getAllowedContextTokens(model: string, hasTeamAPIKey: boolean = false) {\r\n        const alias = this.resolveModelName(model);\r\n\r\n        // Only allow full token limit if the API key is provided by the team\r\n        const maxTokens = hasTeamAPIKey ? models[alias]?.keyOptions?.tokens : models[alias]?.tokens;\r\n\r\n        return +(maxTokens ?? DEFAULT_MAX_TOKENS_FOR_LLM);\r\n    }\r\n\r\n    protected getAllowedCompletionTokens(model: string, hasTeamAPIKey: boolean = false) {\r\n        const alias = models[model]?.alias || model;\r\n\r\n        // Only allow full token limit if the API key is provided by the team\r\n        const maxTokens = hasTeamAPIKey\r\n            ? models[alias]?.keyOptions?.completionTokens || models[alias]?.keyOptions?.tokens\r\n            : models[alias]?.completionTokens || models[alias]?.tokens;\r\n\r\n        return +(maxTokens ?? DEFAULT_MAX_TOKENS_FOR_LLM);\r\n    }\r\n\r\n    // ! DEPRECATED: will be removed in favor of validateTokensLimit\r\n    public checkTokensLimit({\r\n        model,\r\n        promptTokens,\r\n        completionTokens,\r\n        hasTeamAPIKey = false,\r\n    }: {\r\n        model: string;\r\n        promptTokens: number;\r\n        completionTokens: number;\r\n        hasTeamAPIKey?: boolean;\r\n    }): { isExceeded: boolean; error: string } {\r\n        const allowedContextTokens = this.getAllowedContextTokens(model, hasTeamAPIKey);\r\n        const totalTokens = promptTokens + completionTokens;\r\n\r\n        if (totalTokens > allowedContextTokens) {\r\n            return {\r\n                isExceeded: true,\r\n                error: hasTeamAPIKey\r\n                    ? `This models' maximum content length is ${allowedContextTokens} tokens. (This is the sum of your prompt with all variables and the maximum output tokens you've set in Advanced Settings) However, you requested approx ${totalTokens} tokens (${promptTokens} in the prompt, ${completionTokens} in the output). Please reduce the length of either the input prompt or the Maximum output tokens.`\r\n                    : `Input exceeds max tokens limit of ${allowedContextTokens}. Please add your API key to unlock full length.`,\r\n            };\r\n        }\r\n\r\n        return { isExceeded: false, error: '' };\r\n    }\r\n\r\n    /**\r\n     * Validates if the total tokens (prompt input token + maximum output token) exceed the allowed context tokens for a given model.\r\n     *\r\n     * @param {Object} params - The function parameters.\r\n     * @param {string} params.model - The model identifier.\r\n     * @param {number} params.promptTokens - The number of tokens in the input prompt.\r\n     * @param {number} params.completionTokens - The number of tokens in the output completion.\r\n     * @param {boolean} [params.hasTeamAPIKey=false] - Indicates if the user has a team API key.\r\n     * @throws {Error} - Throws an error if the total tokens exceed the allowed context tokens.\r\n     */\r\n    public validateTokensLimit({\r\n        model,\r\n        promptTokens,\r\n        completionTokens,\r\n        hasTeamAPIKey = false,\r\n    }: {\r\n        model: string;\r\n        promptTokens: number;\r\n        completionTokens: number;\r\n        hasTeamAPIKey?: boolean;\r\n    }): void {\r\n        const allowedContextTokens = this.getAllowedContextTokens(model, hasTeamAPIKey);\r\n        const totalTokens = promptTokens + completionTokens;\r\n\r\n        const teamAPIKeyExceededMessage = `This models' maximum content length is ${allowedContextTokens} tokens. (This is the sum of your prompt with all variables and the maximum output tokens you've set in Advanced Settings) However, you requested approx ${totalTokens} tokens (${promptTokens} in the prompt, ${completionTokens} in the output). Please reduce the length of either the input prompt or the Maximum output tokens.`;\r\n        const noAPIKeyExceededMessage = `Input exceeds max tokens limit of ${allowedContextTokens}. Please add your API key to unlock full length.`;\r\n\r\n        if (totalTokens > allowedContextTokens) {\r\n            throw new Error(hasTeamAPIKey ? teamAPIKeyExceededMessage : noAPIKeyExceededMessage);\r\n        }\r\n    }\r\n\r\n    public enhancePrompt(prompt: string, config: any) {\r\n        if (!prompt) return prompt;\r\n        let newPrompt = prompt;\r\n        const outputs = {};\r\n\r\n        if (config?.outputs) {\r\n            for (let con of config.outputs) {\r\n                if (con.default) continue;\r\n                outputs[con.name] = con?.description ? `<${con?.description}>` : '';\r\n            }\r\n        }\r\n\r\n        const excludedKeys = ['_debug', '_error'];\r\n        const outputKeys = Object.keys(outputs).filter((key) => !excludedKeys.includes(key));\r\n\r\n        if (outputKeys.length > 0) {\r\n            const outputFormat = {};\r\n            outputKeys.forEach((key) => (outputFormat[key] = config.name === 'Classifier' ? '<Boolean|String>' : '<value>'));\r\n\r\n            newPrompt +=\r\n                '\\n##\\nExpected output format = ' +\r\n                JSON.stringify(outputFormat) +\r\n                '\\nThe output JSON should only use the entries from the output format.';\r\n\r\n            //console.debug(` Enhanced prompt \\n`, prompt, '\\n');\r\n        }\r\n\r\n        return newPrompt;\r\n    }\r\n\r\n    // TODO [Forhad]: Need to check if we need the params mapping anymore as we set the parameters explicitly now\r\n    public async extractLLMComponentParams(config: any) {\r\n        const params: TLLMParams = {};\r\n        const model: string = config.data.model;\r\n        // Retrieve the API key and include it in the parameters here, as it is required for the max tokens check.\r\n\r\n        const apiKey = '';\r\n        //TODO: implement apiKey extraction from team vault\r\n        //const apiKey = await getLLMApiKey(model, agent?.teamId);\r\n        //if (apiKey) params.apiKey = apiKey;\r\n\r\n        /*** Prepare parameters from config data ***/\r\n\r\n        // * We need to keep the config.data unchanged to avoid any side effects, especially when run components with loop\r\n        const clonedConfigData = JSON.parse(JSON.stringify(config.data || {}));\r\n        const configParams = {};\r\n\r\n        for (const [key, value] of Object.entries(clonedConfigData)) {\r\n            let _value: string | number | string[] | null = value as string;\r\n\r\n            // When we have stopSequences, we need to split it into an array\r\n            if (key === 'stopSequences') {\r\n                _value = _value ? _value?.split(',') : null;\r\n            }\r\n\r\n            // When we have a string that is a number, we need to convert it to a number\r\n            if (typeof _value === 'string' && !isNaN(Number(_value))) {\r\n                _value = +_value;\r\n            }\r\n\r\n            // Always provide safe max tokens based on the model and apiKey\r\n            if (key === 'maxTokens') {\r\n                let maxTokens = Number(_value);\r\n\r\n                if (!maxTokens) {\r\n                    throw new Error('Max output token not provided');\r\n                }\r\n\r\n                maxTokens = await this.getSafeMaxTokens(maxTokens, model, !!apiKey);\r\n                _value = maxTokens;\r\n            }\r\n\r\n            configParams[key] = _value;\r\n        }\r\n\r\n        /*** Prepare LLM specific parameters ***/\r\n\r\n        const alias = models[model]?.alias || model;\r\n        const llm = models[alias]?.llm;\r\n\r\n        for (const [configKey, paramKey] of Object.entries(paramMappings[llm])) {\r\n            // we need to allow 0 as truthy\r\n            if (configParams?.[configKey] !== undefined || configParams?.[configKey] !== null || configParams?.[configKey] !== '') {\r\n                const value = configParams[configKey];\r\n\r\n                if (value !== undefined) {\r\n                    params[paramKey as string] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    // TODO [Forhad]: Need to support other params like temperature, topP, topK, etc.\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params: TLLMParams = {};\r\n        const model: string = config.data.model;\r\n        // Retrieve the API key and include it in the parameters here, as it is required for the max tokens check.\r\n\r\n        const apiKey = '';\r\n        //TODO: implement apiKey extraction from team vault\r\n        //const apiKey = await getLLMApiKey(model, agent?.teamId);\r\n        //if (apiKey) params.apiKey = apiKey;\r\n\r\n        const maxTokens = (await this.getSafeMaxTokens(+config.data.maxTokens, model, !!apiKey)) || 300;\r\n\r\n        const alias = models[model]?.alias || model;\r\n        const llm = models[alias]?.llm;\r\n\r\n        // as max output token prop name differs based on LLM provider, we need to get the actual prop from paramMappings\r\n        params[paramMappings[llm]?.maxTokens] = maxTokens;\r\n\r\n        return params;\r\n    }\r\n    public postProcess(response: string) {\r\n        try {\r\n            return JSONContent(response).tryParse();\r\n        } catch (error) {\r\n            return {\r\n                error: 'Invalid JSON response',\r\n                data: response,\r\n                details: 'The response from the model is not a valid JSON object. Please check the model output and try again.',\r\n            };\r\n        }\r\n    }\r\n    public formatToolsConfig({ type = 'function', toolDefinitions, toolChoice = 'auto' }) {\r\n        throw new Error('This model does not support tools');\r\n    }\r\n\r\n    public transformToolMessageBlocks({\r\n        messageBlock,\r\n        toolsData,\r\n    }: {\r\n        messageBlock: TLLMMessageBlock;\r\n        toolsData: ToolData[];\r\n    }): TLLMToolResultMessageBlock[] {\r\n        throw new Error('This model does not support tools');\r\n    }\r\n\r\n    public hasSystemMessage(messages: any) {\r\n        if (!Array.isArray(messages)) return false;\r\n\r\n        return messages?.some((message) => message.role === 'system');\r\n    }\r\n\r\n    public separateSystemMessages(messages: TLLMMessageBlock[]): {\r\n        systemMessage: TLLMMessageBlock | {};\r\n        otherMessages: TLLMMessageBlock[];\r\n    } {\r\n        const systemMessage = messages.find((message) => message.role === 'system') || {};\r\n        const otherMessages = messages.filter((message) => message.role !== 'system');\r\n\r\n        return { systemMessage, otherMessages };\r\n    }\r\n}\r\n\r\n// Function to calculate tokens from image\r\nfunction _countImageTokens(width: number, height: number, detailMode: string = 'auto') {\r\n    if (detailMode === 'low') return 85;\r\n\r\n    const maxDimension = Math.max(width, height);\r\n    const minDimension = Math.min(width, height);\r\n    let scaledMinDimension = minDimension;\r\n\r\n    if (maxDimension > 2048) {\r\n        scaledMinDimension = (2048 / maxDimension) * minDimension;\r\n    }\r\n\r\n    scaledMinDimension = Math.floor((768 / 1024) * scaledMinDimension);\r\n\r\n    let tileSize = 512;\r\n    let tiles = Math.ceil(scaledMinDimension / tileSize);\r\n    if (minDimension !== scaledMinDimension) {\r\n        tiles *= Math.ceil((scaledMinDimension * (maxDimension / minDimension)) / tileSize);\r\n    }\r\n\r\n    return tiles * 170 + 85;\r\n}\r\n\r\nasync function _getImageDimensions(url: string): Promise<{ width: number; height: number }> {\r\n    try {\r\n        let buffer: Buffer;\r\n\r\n        if (isDataUrl(url)) {\r\n            const base64Data = url.replace(/^data:image\\/\\w+;base64,/, '');\r\n\r\n            // Create a buffer from the base64-encoded string\r\n            buffer = Buffer.from(base64Data, 'base64');\r\n        } else if (isUrl(url)) {\r\n            const response = await axios.get(url, { responseType: 'arraybuffer' });\r\n\r\n            // Convert the response to a buffer\r\n            buffer = Buffer.from(response.data);\r\n        } else {\r\n            throw new Error('Please provide a valid image url!');\r\n        }\r\n\r\n        // Use the imageSize module to get the dimensions\r\n        const dimensions = imageSize(buffer);\r\n\r\n        return {\r\n            width: dimensions?.width || 0,\r\n            height: dimensions?.height || 0,\r\n        };\r\n    } catch (error) {\r\n        console.error('Error getting image dimensions', error);\r\n\r\n        throw new Error('Please provide a valid image url!');\r\n    }\r\n}\r\n","import { JSONContent } from '@sre/helpers/JsonContent.helper';\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport EventEmitter from 'events';\r\nimport { Readable } from 'stream';\r\n\r\nexport class EchoConnector extends LLMConnector {\r\n    public name = 'LLM:Echo';\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        return { content: prompt, finishReason: 'stop' } as LLMChatResponse;\r\n    }\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params) {\r\n        return { content: prompt, finishReason: 'stop' } as LLMChatResponse;\r\n    }\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params) {\r\n        return { content: prompt, finishReason: 'stop' } as LLMChatResponse;\r\n    }\r\n    protected async toolRequest(acRequest: AccessRequest, params) {\r\n        throw new Error('Echo model does not support tool requests');\r\n    }\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any): Promise<ImagesResponse> {\r\n        throw new Error('Image generation request is not supported for Echo.');\r\n    }\r\n    protected async streamToolRequest(acRequest: AccessRequest, params) {\r\n        throw new Error('Echo model does not support tool requests');\r\n    }\r\n    protected async streamRequest(acRequest: AccessRequest, params: any): Promise<Readable> {\r\n        throw new Error('Echo model does not support streaming');\r\n    }\r\n\r\n    public enhancePrompt(prompt: string, config: any) {\r\n        //Echo model does not require enhancements, because we are just echoing the prompt as is.\r\n        return prompt;\r\n    }\r\n\r\n    public postProcess(response: any) {\r\n        try {\r\n            return JSONContent(response).tryParse();\r\n        } catch (error) {\r\n            return response;\r\n        }\r\n    }\r\n}\r\n","import OpenAI from 'openai';\r\nimport Anthropic from '@anthropic-ai/sdk';\r\nimport { FunctionCallingMode } from '@google/generative-ai';\r\n\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\n\r\nexport type TLLMParams = {\r\n    messages?: TLLMMessageBlock[];\r\n    apiKey?: string; // for all\r\n    temperature?: number; // for all\r\n    max_tokens?: number; // for OpenAI, cohere, together.ai, AnthropicAI\r\n    maxOutputTokens?: number; // for GoogleAI\r\n    stop?: string[] | null; // for OpenAI, together.ai\r\n    stop_sequences?: string[] | null; // for cohere, AnthropicAI\r\n    top_p?: number; // for OpenAI, together.ai, AnthropicAI\r\n    top_k?: number; // for together.ai, AnthropicAI\r\n    topP?: number; // for GoogleAI\r\n    topK?: number; // for GoogleAI\r\n    p?: number; // Top P for cohere\r\n    k?: number; // Top K for cohere\r\n    frequency_penalty?: number; // for OpenAI, cohere\r\n    repetition_penalty?: number; // Frequency Penalty for together.ai\r\n    presence_penalty?: number; // for OpenAI, cohere\r\n    sources?: BinaryInput[];\r\n};\r\n\r\nexport type TLLMModelEntry = {\r\n    llm: string;\r\n    tokens?: number;\r\n    completionTokens?: number;\r\n    enabled?: boolean;\r\n    components?: string[];\r\n    alias?: string;\r\n    tags?: string[];\r\n    keyOptions?: {\r\n        tokens: number;\r\n        completionTokens: number;\r\n    };\r\n};\r\n\r\nexport type TLLMModel = {\r\n    llmName: string;\r\n    modelId: string;\r\n    tokens: number;\r\n    completionTokens: number;\r\n    components: string[];\r\n    tags: string[];\r\n};\r\n\r\n//#region === LLM Tools ===========================\r\nexport type ToolData = {\r\n    index: number;\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    arguments: string | Record<string, any>;\r\n    role: 'user' | 'tool' | 'assistant';\r\n    result?: string; // result string from the used tool\r\n};\r\n\r\nexport interface AnthropicToolDefinition {\r\n    name: string;\r\n    description: string;\r\n    input_schema: {\r\n        type: 'object';\r\n        properties: Record<string, unknown>;\r\n        required: string[];\r\n    };\r\n}\r\nexport type ToolDefinition = OpenAI.ChatCompletionTool | AnthropicToolDefinition;\r\nexport type ToolChoice = OpenAI.ChatCompletionToolChoiceOption | FunctionCallingMode;\r\n\r\nexport interface ToolsConfig {\r\n    tools?: ToolDefinition[];\r\n    tool_choice?: ToolChoice;\r\n}\r\n\r\n//#endregion\r\n\r\nexport enum TLLMMessageRole {\r\n    User = 'user',\r\n    Assistant = 'assistant',\r\n    System = 'system',\r\n    Model = 'model',\r\n    Tool = 'tool',\r\n    Function = 'function',\r\n}\r\n\r\nexport type TLLMMessageBlock = {\r\n    role: TLLMMessageRole;\r\n    content?:\r\n        | string\r\n        | { text: string }[]\r\n        | Array<Anthropic.TextBlockParam | Anthropic.ImageBlockParam | Anthropic.ToolUseBlockParam | Anthropic.ToolResultBlockParam>;\r\n    parts?: {\r\n        text?: string;\r\n        functionCall?: { name: string; args: string };\r\n        functionResponse?: { name: string; response: { name: string; content: string } };\r\n    }[]; // for Google Vertex AI\r\n    tool_calls?: ToolData[];\r\n};\r\n\r\nexport type TLLMToolResultMessageBlock = TLLMMessageBlock & {\r\n    tool_call_id?: string; // for tool result message block of OpenAI\r\n    name?: string; // for tool result message block of OpenAI\r\n};\r\n\r\nexport type GenerateImageConfig = {\r\n    size?: '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792';\r\n    quality?: 'standard' | 'hd';\r\n    model: string;\r\n    style?: 'vivid' | 'natural';\r\n    n?: number;\r\n    response_format?: 'url' | 'b64_json';\r\n};\r\n","import EventEmitter from 'events';\r\nimport OpenAI from 'openai';\r\nimport { encodeChat } from 'gpt-tokenizer';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TOOL_USE_DEFAULT_MODEL } from '@sre/constants';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\n\r\nimport { TLLMParams, ToolData, TLLMMessageBlock, TLLMToolResultMessageBlock, TLLMMessageRole, GenerateImageConfig } from '@sre/types/LLM.types';\r\n\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\n\r\nconst console = Logger('OpenAIConnector');\r\n\r\nconst VALID_IMAGE_MIME_TYPES = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/gif'];\r\nconst MODELS_WITH_JSON_RESPONSE = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-3.5-turbo'];\r\n\r\nexport class OpenAIConnector extends LLMConnector {\r\n    public name = 'LLM:OpenAI';\r\n\r\n    private validImageMimeTypes = VALID_IMAGE_MIME_TYPES;\r\n\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        // Open to take system message with params, if no system message found then force to get JSON response in default\r\n        if (!_params.messages) _params.messages = [];\r\n\r\n        const _messages = this.getConsistentMessages(_params.messages);\r\n\r\n        //FIXME: We probably need to separate the json system from default chatRequest\r\n        if (_messages[0]?.role !== 'system') {\r\n            _messages.unshift({\r\n                role: TLLMMessageRole.System,\r\n                content: 'All responses should be in valid json format. The returned json should not be formatted with any newlines or indentations.',\r\n            });\r\n\r\n            if (MODELS_WITH_JSON_RESPONSE.includes(_params.model)) {\r\n                _params.response_format = { type: 'json_object' };\r\n            }\r\n        }\r\n\r\n        if (prompt && _messages.length === 1) {\r\n            _messages.push({ role: TLLMMessageRole.User, content: prompt });\r\n        }\r\n\r\n        // Check if the team has their own API key, then use it\r\n        const apiKey = _params?.apiKey;\r\n\r\n        const openai = new OpenAI({\r\n            //FIXME: use config.env instead of process.env\r\n            apiKey: apiKey || process.env.OPENAI_API_KEY,\r\n        });\r\n\r\n        // Check token limit\r\n        const promptTokens = encodeChat(_messages, 'gpt-4')?.length;\r\n\r\n        const tokensLimit = this.checkTokensLimit({\r\n            model: _params.model,\r\n            promptTokens,\r\n            completionTokens: _params?.max_tokens,\r\n            hasTeamAPIKey: !!apiKey,\r\n        });\r\n\r\n        if (tokensLimit.isExceeded) throw new Error(tokensLimit.error);\r\n\r\n        const chatCompletionArgs: OpenAI.ChatCompletionCreateParams = {\r\n            model: _params.model,\r\n            messages: _messages,\r\n        };\r\n\r\n        if (_params?.max_tokens) chatCompletionArgs.max_tokens = _params.max_tokens;\r\n        if (_params?.temperature) chatCompletionArgs.temperature = _params.temperature;\r\n        if (_params?.stop) chatCompletionArgs.stop = _params.stop;\r\n        if (_params?.top_p) chatCompletionArgs.top_p = _params.top_p;\r\n        if (_params?.frequency_penalty) chatCompletionArgs.frequency_penalty = _params.frequency_penalty;\r\n        if (_params?.presence_penalty) chatCompletionArgs.presence_penalty = _params.presence_penalty;\r\n        if (_params?.response_format) chatCompletionArgs.response_format = _params.response_format;\r\n\r\n        try {\r\n            const response = await openai.chat.completions.create(chatCompletionArgs);\r\n\r\n            const content = response?.choices?.[0]?.message.content;\r\n            const finishReason = response?.choices?.[0]?.finish_reason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params, agent?: string | Agent) {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        // Open to take system message with params, if no system message found then force to get JSON response in default\r\n        if (!_params.messages || _params.messages?.length === 0) _params.messages = [];\r\n        if (_params.messages?.role !== 'system') {\r\n            _params.messages.unshift({\r\n                role: 'system',\r\n                content:\r\n                    'All responses should be in valid json format. The returned json should not be formatted with any newlines, indentations. For example: {\"<guess key from response>\":\"<response>\"}',\r\n            });\r\n\r\n            if (MODELS_WITH_JSON_RESPONSE.includes(_params.model)) {\r\n                _params.response_format = { type: 'json_object' };\r\n            }\r\n        }\r\n\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n\r\n        const fileSources: BinaryInput[] = _params?.fileSources || [];\r\n        const validSources = this.getValidImageFileSources(fileSources);\r\n        const imageData = await this.getImageData(validSources, agentId);\r\n\r\n        // Add user message\r\n        const promptData = [{ type: 'text', text: prompt }, ...imageData];\r\n        _params.messages.push({ role: 'user', content: promptData });\r\n\r\n        try {\r\n            // Check if the team has their own API key, then use it\r\n            const apiKey = _params?.apiKey;\r\n\r\n            const openai = new OpenAI({\r\n                apiKey: apiKey || process.env.OPENAI_API_KEY,\r\n            });\r\n\r\n            // Check token limit\r\n            const promptTokens = await this.countVisionPromptTokens(promptData);\r\n\r\n            const tokenLimit = this.checkTokensLimit({\r\n                model: _params.model,\r\n                promptTokens,\r\n                completionTokens: _params?.max_tokens,\r\n                hasTeamAPIKey: !!apiKey,\r\n            });\r\n\r\n            if (tokenLimit.isExceeded) throw new Error(tokenLimit.error);\r\n\r\n            const chatCompletionArgs: OpenAI.ChatCompletionCreateParams = {\r\n                model: _params.model,\r\n                messages: _params.messages,\r\n            };\r\n\r\n            if (_params?.max_tokens) {\r\n                chatCompletionArgs.max_tokens = _params.max_tokens;\r\n            }\r\n\r\n            const response: any = await openai.chat.completions.create(chatCompletionArgs);\r\n\r\n            const content = response?.choices?.[0]?.message.content;\r\n\r\n            return { content, finishReason: response?.choices?.[0]?.finish_reason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Multimodal request is not supported for OpenAI.');\r\n    }\r\n\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<ImagesResponse> {\r\n        // throw new Error('Image generation request is not supported for OpenAI.');\r\n        try {\r\n            const { model, size, quality, n, response_format, style } = params;\r\n            const args: GenerateImageConfig & { prompt: string } = {\r\n                prompt,\r\n                model,\r\n                size,\r\n                quality,\r\n                n,\r\n                response_format,\r\n            };\r\n\r\n            if (style) {\r\n                args.style = style;\r\n            }\r\n\r\n            const apiKey = params?.apiKey;\r\n\r\n            const openai = new OpenAI({\r\n                apiKey: apiKey || process.env.OPENAI_API_KEY,\r\n            });\r\n\r\n            const response = await openai.images.generate(args);\r\n\r\n            return response;\r\n        } catch (error: any) {\r\n            console.log('Error generating image(s) with DALL·E: ', error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async toolRequest(acRequest: AccessRequest, params): Promise<any> {\r\n        const _params = { ...params };\r\n\r\n        // We provide\r\n        const openai = new OpenAI({\r\n            apiKey: _params.apiKey || process.env.OPENAI_API_KEY,\r\n        });\r\n\r\n        const messages = this.getConsistentMessages(_params.messages);\r\n\r\n        let chatCompletionArgs: OpenAI.ChatCompletionCreateParamsNonStreaming = {\r\n            model: _params.model,\r\n            messages: messages,\r\n            max_tokens: _params.max_tokens,\r\n        };\r\n\r\n        if (_params?.toolsConfig?.tools && _params?.toolsConfig?.tools?.length > 0) chatCompletionArgs.tools = _params?.toolsConfig?.tools;\r\n        if (_params?.toolsConfig?.tool_choice) chatCompletionArgs.tool_choice = _params?.toolsConfig?.tool_choice;\r\n\r\n        try {\r\n            const result = await openai.chat.completions.create(chatCompletionArgs);\r\n            const message = result?.choices?.[0]?.message;\r\n            const finishReason = result?.choices?.[0]?.finish_reason;\r\n\r\n            let toolsData: ToolData[] = [];\r\n            let useTool = false;\r\n\r\n            if (finishReason === 'tool_calls') {\r\n                toolsData =\r\n                    message?.tool_calls?.map((tool, index) => ({\r\n                        index,\r\n                        id: tool?.id,\r\n                        type: tool?.type,\r\n                        name: tool?.function?.name,\r\n                        arguments: tool?.function?.arguments,\r\n                        role: 'tool',\r\n                    })) || [];\r\n\r\n                useTool = true;\r\n            }\r\n\r\n            return {\r\n                data: { useTool, message: message, content: message?.content ?? '', toolsData },\r\n            };\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // ! DEPRECATED: will be removed\r\n    protected async streamToolRequest(\r\n        acRequest: AccessRequest,\r\n        { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    ): Promise<any> {\r\n        try {\r\n            // We provide\r\n            const openai = new OpenAI({\r\n                apiKey: apiKey || process.env.OPENAI_API_KEY,\r\n            });\r\n\r\n            // sanity check\r\n            if (!Array.isArray(messages) || !messages?.length) {\r\n                throw new Error('Invalid messages argument for chat completion.');\r\n            }\r\n\r\n            console.log('model', model);\r\n            console.log('messages', messages);\r\n            let args: OpenAI.ChatCompletionCreateParamsStreaming = {\r\n                model,\r\n                messages,\r\n                stream: true,\r\n            };\r\n\r\n            if (tools && tools.length > 0) args.tools = tools;\r\n            if (tool_choice) args.tool_choice = tool_choice;\r\n\r\n            const stream: any = await openai.chat.completions.create(args);\r\n\r\n            // consumed stream will not be available for further use, so we need to clone it\r\n            const [toolCallsStream, contentStream] = stream.tee();\r\n\r\n            let useTool = false;\r\n            let delta: Record<string, any> = {};\r\n            let toolsData: ToolData[] = [];\r\n            let _stream;\r\n\r\n            let message = {\r\n                role: '',\r\n                content: '',\r\n                tool_calls: [],\r\n            };\r\n\r\n            for await (const part of toolCallsStream) {\r\n                delta = part.choices[0].delta;\r\n\r\n                message.role += delta?.role || '';\r\n                message.content += delta?.content || '';\r\n\r\n                //if it's not a tools call, stop processing the stream immediately in order to allow streaming the text content\r\n                //FIXME: OpenAI API returns empty content as first message for content reply, and null content for tool reply,\r\n                //       this doesn't seem to be a very accurate way but it's the only solution to detect tool calls early enough (without reading the whole stream)\r\n                if (!delta?.tool_calls && delta?.content === '') {\r\n                    _stream = contentStream;\r\n                    break;\r\n                }\r\n                //_stream = toolCallsStream;\r\n                if (delta?.tool_calls) {\r\n                    const toolCall = delta?.tool_calls?.[0];\r\n                    const index = toolCall?.index;\r\n\r\n                    toolsData[index] = {\r\n                        index,\r\n                        role: 'tool',\r\n                        id: (toolsData?.[index]?.id || '') + (toolCall?.id || ''),\r\n                        type: (toolsData?.[index]?.type || '') + (toolCall?.type || ''),\r\n                        name: (toolsData?.[index]?.name || '') + (toolCall?.function?.name || ''),\r\n                        arguments: (toolsData?.[index]?.arguments || '') + (toolCall?.function?.arguments || ''),\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (toolsData?.length > 0) {\r\n                useTool = true;\r\n            }\r\n\r\n            message.tool_calls = toolsData.map((tool) => {\r\n                return {\r\n                    id: tool.id,\r\n                    type: tool.type,\r\n                    function: {\r\n                        name: tool.name,\r\n                        arguments: tool.arguments,\r\n                    },\r\n                };\r\n            });\r\n\r\n            //console.log('result', useTool, message, toolsData);\r\n\r\n            return {\r\n                data: { useTool, message, stream: _stream, toolsData },\r\n            };\r\n        } catch (error: any) {\r\n            console.log('Error on toolUseLLMRequest: ', error);\r\n            return { error };\r\n        }\r\n    }\r\n\r\n    // protected async stremRequest(\r\n    //     acRequest: AccessRequest,\r\n    //     { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    // ): Promise<Readable> {\r\n    //     const stream = new LLMStream();\r\n\r\n    //     const openai = new OpenAI({\r\n    //         apiKey: apiKey || process.env.OPENAI_API_KEY,\r\n    //     });\r\n\r\n    //     console.log('model', model);\r\n    //     console.log('messages', messages);\r\n\r\n    //     let args: OpenAI.ChatCompletionCreateParamsStreaming = {\r\n    //         model,\r\n    //         messages,\r\n    //         stream: true,\r\n    //     };\r\n\r\n    //     if (tools && tools.length > 0) args.tools = tools;\r\n    //     if (tool_choice) args.tool_choice = tool_choice;\r\n\r\n    //     const openaiStream: any = await openai.chat.completions.create(args);\r\n\r\n    //     let toolsData: any = [];\r\n    //     stream.enqueueData({ start: true });\r\n    //     (async () => {\r\n    //         for await (const part of openaiStream) {\r\n    //             const delta = part.choices[0].delta;\r\n    //             //stream.enqueueData(delta);\r\n\r\n    //             if (!delta?.tool_calls && delta?.content) {\r\n    //                 stream.enqueueData({ content: delta.content, role: delta.role });\r\n    //             }\r\n\r\n    //             if (delta?.tool_calls) {\r\n    //                 const toolCall = delta.tool_calls[0];\r\n    //                 const index = toolCall.index;\r\n\r\n    //                 toolsData[index] = {\r\n    //                     index,\r\n    //                     role: 'tool',\r\n    //                     id: (toolsData[index]?.id || '') + (toolCall?.id || ''),\r\n    //                     type: (toolsData[index]?.type || '') + (toolCall?.type || ''),\r\n    //                     name: (toolsData[index]?.name || '') + (toolCall?.function?.name || ''),\r\n    //                     arguments: (toolsData[index]?.arguments || '') + (toolCall?.function?.arguments || ''),\r\n    //                 };\r\n    //             }\r\n    //         }\r\n\r\n    //         stream.enqueueData({ toolsData });\r\n    //         //stream.endStream();\r\n    //     })();\r\n\r\n    //     return stream;\r\n    // }\r\n\r\n    protected async streamRequest(acRequest: AccessRequest, params): Promise<EventEmitter> {\r\n        const _params = { ...params };\r\n\r\n        const emitter = new EventEmitter();\r\n        const openai = new OpenAI({\r\n            apiKey: _params.apiKey || process.env.OPENAI_API_KEY,\r\n        });\r\n\r\n        //TODO: check token limits for non api key users\r\n        console.log('model', _params.model);\r\n        console.log('messages', _params.messages);\r\n        let chatCompletionArgs: OpenAI.ChatCompletionCreateParamsStreaming = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n            max_tokens: _params.max_tokens,\r\n            stream: true,\r\n        };\r\n\r\n        if (_params?.toolsConfig?.tools && _params?.toolsConfig?.tools?.length > 0) chatCompletionArgs.tools = _params?.toolsConfig?.tools;\r\n        if (_params?.toolsConfig?.tool_choice) chatCompletionArgs.tool_choice = _params?.toolsConfig?.tool_choice;\r\n\r\n        try {\r\n            const stream: any = await openai.chat.completions.create(chatCompletionArgs);\r\n\r\n            // Process stream asynchronously while as we need to return emitter immediately\r\n            (async () => {\r\n                let delta: Record<string, any> = {};\r\n\r\n                let toolsData: any = [];\r\n\r\n                for await (const part of stream) {\r\n                    delta = part.choices[0].delta;\r\n                    emitter.emit('data', delta);\r\n\r\n                    if (!delta?.tool_calls && delta?.content) {\r\n                        emitter.emit('content', delta?.content, delta?.role);\r\n                    }\r\n                    //_stream = toolCallsStream;\r\n                    if (delta?.tool_calls) {\r\n                        const toolCall = delta?.tool_calls?.[0];\r\n                        const index = toolCall?.index;\r\n\r\n                        toolsData[index] = {\r\n                            index,\r\n                            role: 'tool',\r\n                            id: (toolsData?.[index]?.id || '') + (toolCall?.id || ''),\r\n                            type: (toolsData?.[index]?.type || '') + (toolCall?.type || ''),\r\n                            name: (toolsData?.[index]?.name || '') + (toolCall?.function?.name || ''),\r\n                            arguments: (toolsData?.[index]?.arguments || '') + (toolCall?.function?.arguments || ''),\r\n                        };\r\n                    }\r\n                }\r\n                if (toolsData?.length > 0) {\r\n                    emitter.emit('toolsData', toolsData);\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    emitter.emit('end', toolsData);\r\n                }, 100);\r\n            })();\r\n            return emitter;\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params: TLLMParams = await super.extractVisionLLMParams(config);\r\n\r\n        return params;\r\n    }\r\n\r\n    public formatToolsConfig({ type = 'function', toolDefinitions, toolChoice = 'auto' }) {\r\n        let tools: OpenAI.ChatCompletionTool[] = [];\r\n\r\n        if (type === 'function') {\r\n            tools = toolDefinitions.map((tool) => {\r\n                const { name, description, properties, requiredFields } = tool;\r\n\r\n                return {\r\n                    type: 'function',\r\n                    function: {\r\n                        name,\r\n                        description,\r\n                        parameters: {\r\n                            type: 'object',\r\n                            properties,\r\n                            required: requiredFields,\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n        }\r\n\r\n        return tools?.length > 0 ? { tools, tool_choice: toolChoice || 'auto' } : {};\r\n    }\r\n\r\n    public transformToolMessageBlocks({\r\n        messageBlock,\r\n        toolsData,\r\n    }: {\r\n        messageBlock: TLLMMessageBlock;\r\n        toolsData: ToolData[];\r\n    }): TLLMToolResultMessageBlock[] {\r\n        const messageBlocks: TLLMToolResultMessageBlock[] = [];\r\n\r\n        if (messageBlock) {\r\n            const transformedMessageBlock = {\r\n                ...messageBlock,\r\n                content: typeof messageBlock.content === 'object' ? JSON.stringify(messageBlock.content) : messageBlock.content,\r\n            };\r\n            messageBlocks.push(transformedMessageBlock);\r\n        }\r\n\r\n        const transformedToolsData = toolsData.map((toolData) => ({\r\n            tool_call_id: toolData.id,\r\n            role: toolData.role as TLLMMessageRole,\r\n            name: toolData.name,\r\n            content: typeof toolData.result === 'string' ? toolData.result : JSON.stringify(toolData.result), // Ensure content is a string\r\n        }));\r\n\r\n        return [...messageBlocks, ...transformedToolsData];\r\n    }\r\n\r\n    private getConsistentMessages(messages) {\r\n        if (messages.length === 0) return [];\r\n\r\n        return messages.map((message) => {\r\n            const _message = { ...message };\r\n            let textContent = '';\r\n\r\n            if (message?.parts) {\r\n                textContent = message.parts.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (Array.isArray(message?.content)) {\r\n                textContent = message.content.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (message?.content) {\r\n                textContent = message.content;\r\n            }\r\n\r\n            _message.content = textContent;\r\n\r\n            return _message;\r\n        });\r\n    }\r\n\r\n    private getValidImageFileSources(fileSources: BinaryInput[]) {\r\n        const validSources = [];\r\n\r\n        for (let fileSource of fileSources) {\r\n            if (this.validImageMimeTypes.includes(fileSource?.mimetype)) {\r\n                validSources.push(fileSource);\r\n            }\r\n        }\r\n\r\n        if (validSources?.length === 0) {\r\n            throw new Error(`Unsupported file(s). Please make sure your file is one of the following types: ${this.validImageMimeTypes.join(', ')}`);\r\n        }\r\n\r\n        return validSources;\r\n    }\r\n\r\n    private async getImageData(\r\n        fileSources: BinaryInput[],\r\n        agentId: string\r\n    ): Promise<\r\n        {\r\n            type: string;\r\n            image_url: { url: string };\r\n        }[]\r\n    > {\r\n        try {\r\n            const imageData = [];\r\n\r\n            for (let fileSource of fileSources) {\r\n                const bufferData = await fileSource.readData(AccessCandidate.agent(agentId));\r\n                const base64Data = bufferData.toString('base64');\r\n                const url = `data:${fileSource.mimetype};base64,${base64Data}`;\r\n\r\n                imageData.push({\r\n                    type: 'image_url',\r\n                    image_url: { url },\r\n                });\r\n            }\r\n\r\n            return imageData;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import os from 'os';\r\nimport path from 'path';\r\nimport EventEmitter from 'events';\r\nimport fs from 'fs';\r\n\r\nimport axios from 'axios';\r\nimport { GoogleGenerativeAI, ModelParams, GenerationConfig, GenerateContentRequest } from '@google/generative-ai';\r\nimport { GoogleAIFileManager, FileState } from '@google/generative-ai/server';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TOOL_USE_DEFAULT_MODEL, JSON_RESPONSE_INSTRUCTION } from '@sre/constants';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { uid } from '@sre/utils';\r\n\r\nimport { processWithConcurrencyLimit, isDataUrl, isUrl, getMimeTypeFromUrl, isRawBase64, parseBase64, isValidString } from '@sre/utils';\r\n\r\nimport { TLLMParams, TLLMMessageBlock, ToolData, TLLMMessageRole, TLLMToolResultMessageBlock } from '@sre/types/LLM.types';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\n\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\n\r\nconst console = Logger('GoogleAIConnector');\r\n\r\ntype FileObject = {\r\n    url: string;\r\n    mimetype: string;\r\n};\r\n\r\nconst DEFAULT_MODEL = 'gemini-1.5-pro';\r\n\r\nconst MODELS_WITH_SYSTEM_MESSAGE = [\r\n    'gemini-1.5-pro-latest',\r\n    'gemini-1.5-pro',\r\n    'gemini-1.5-pro-001',\r\n    'gemini-1.5-flash-latest',\r\n    'gemini-1.5-flash',\r\n    'gemini-1.5-flash-001',\r\n];\r\nconst MODELS_WITH_JSON_RESPONSE = MODELS_WITH_SYSTEM_MESSAGE;\r\n\r\n// Supported file MIME types for Google AI's Gemini models\r\nconst VALID_MIME_TYPES = [\r\n    'video/mp4',\r\n    'video/mpeg',\r\n    'video/mov',\r\n    'video/avi',\r\n    'video/x-flv',\r\n    'video/mpg',\r\n    'video/webm',\r\n    'video/wmv',\r\n    'video/3gpp',\r\n    'image/png',\r\n    'image/jpeg',\r\n    'image/jpg',\r\n    'image/webp',\r\n    'image/heic',\r\n    'image/heif',\r\n    'audio/wav',\r\n    'audio/mp3',\r\n    'audio/aiff',\r\n    'audio/aac',\r\n    'audio/ogg',\r\n    'audio/flac',\r\n    'application/pdf',\r\n    'application/x-javascript',\r\n    'application/x-typescript',\r\n    'application/x-python-code',\r\n    'application/json',\r\n    'application/rtf',\r\n    'text/plain',\r\n    'text/html',\r\n    'text/css',\r\n    'text/javascript',\r\n    'text/x-typescript',\r\n    'text/csv',\r\n    'text/markdown',\r\n    'text/x-python',\r\n    'text/xml',\r\n    'text/rtf',\r\n];\r\n\r\n// Supported image MIME types for Google AI's Gemini models\r\nconst VALID_IMAGE_MIME_TYPES = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/heic', 'image/heif'];\r\n\r\nexport class GoogleAIConnector extends LLMConnector {\r\n    public name = 'LLM:GoogleAI';\r\n\r\n    private validMimeTypes = {\r\n        all: VALID_MIME_TYPES,\r\n        image: VALID_IMAGE_MIME_TYPES,\r\n    };\r\n\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        const model = _params?.model || DEFAULT_MODEL;\r\n\r\n        const apiKey = _params?.apiKey;\r\n\r\n        let messages = _params?.messages || [];\r\n\r\n        let systemInstruction;\r\n        let systemMessage: TLLMMessageBlock | {} = {};\r\n\r\n        if (this.hasSystemMessage(_params?.messages)) {\r\n            const separateMessages = this.separateSystemMessages(messages);\r\n            const systemMessageContent = (separateMessages.systemMessage as TLLMMessageBlock)?.content;\r\n            systemInstruction = typeof systemMessageContent === 'string' ? systemMessageContent : '';\r\n            messages = separateMessages.otherMessages;\r\n        }\r\n\r\n        if (MODELS_WITH_SYSTEM_MESSAGE.includes(model)) {\r\n            systemInstruction = 'content' in systemMessage ? systemMessage.content : '';\r\n        } else {\r\n            prompt = `${prompt}\\n${'content' in systemMessage ? systemMessage.content : ''}`;\r\n        }\r\n\r\n        if (_params?.messages) {\r\n            const messages = this.getConsistentMessages(_params.messages);\r\n            // Concatenate messages with prompt and remove messages from params as it's not supported\r\n            prompt = messages.map((message) => message?.parts?.[0]?.text || '').join('\\n');\r\n        }\r\n\r\n        // Need to return JSON for LLM Prompt component\r\n        const responseFormat = _params?.responseFormat || 'json';\r\n        if (responseFormat === 'json') {\r\n            if (MODELS_WITH_JSON_RESPONSE.includes(model)) _params.responseMimeType = 'application/json';\r\n            else prompt += JSON_RESPONSE_INSTRUCTION;\r\n        }\r\n\r\n        if (!prompt) throw new Error('Prompt is required!');\r\n\r\n        // TODO: implement claude specific token counting to validate token limit\r\n        // this.validateTokenLimit(_params);\r\n\r\n        const modelParams: ModelParams = {\r\n            model,\r\n        };\r\n\r\n        if (systemInstruction) modelParams.systemInstruction = systemInstruction;\r\n\r\n        const generationConfig: GenerationConfig = {};\r\n\r\n        if (_params.maxOutputTokens) generationConfig.maxOutputTokens = _params.maxOutputTokens;\r\n        if (_params.temperature) generationConfig.temperature = _params.temperature;\r\n        if (_params.stopSequences) generationConfig.stopSequences = _params.stopSequences;\r\n        if (_params.topP) generationConfig.topP = _params.topP;\r\n        if (_params.topK) generationConfig.topK = _params.topK;\r\n\r\n        if (Object.keys(generationConfig).length > 0) {\r\n            modelParams.generationConfig = generationConfig;\r\n        }\r\n\r\n        try {\r\n            const genAI = new GoogleGenerativeAI(apiKey || process.env.GOOGLEAI_API_KEY);\r\n            const $model = genAI.getGenerativeModel(modelParams);\r\n\r\n            const { totalTokens: promptTokens } = await $model.countTokens(prompt);\r\n\r\n            // * the function will throw an error if the token limit is exceeded\r\n            this.validateTokensLimit({\r\n                model,\r\n                promptTokens,\r\n                completionTokens: params?.maxOutputTokens,\r\n                hasTeamAPIKey: !!apiKey,\r\n            });\r\n\r\n            const result = await $model.generateContent(prompt);\r\n            const response = await result?.response;\r\n            const content = response?.text();\r\n            const finishReason = response.candidates[0].finishReason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params, agent?: string | Agent) {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n        const model = _params?.model || 'gemini-pro-vision';\r\n        const apiKey = _params?.apiKey;\r\n        const fileSources = _params?.fileSources || [];\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n\r\n        const validFiles = this.getValidFileSources(fileSources, 'image');\r\n\r\n        const fileUploadingTasks = validFiles.map((fileSource) => async () => {\r\n            try {\r\n                const uploadedFile = await this.uploadFile({ fileSource, apiKey, agentId });\r\n\r\n                return { url: uploadedFile.url, mimetype: fileSource.mimetype };\r\n            } catch {\r\n                return null;\r\n            }\r\n        });\r\n\r\n        const uploadedFiles = await processWithConcurrencyLimit(fileUploadingTasks);\r\n\r\n        // We throw error when there are no valid uploaded files,\r\n        if (uploadedFiles?.length === 0) {\r\n            throw new Error(`There is an issue during upload file in Google AI Server!`);\r\n        }\r\n\r\n        const imageData = this.getFileData(uploadedFiles);\r\n\r\n        // Adjust input structure handling for multiple image files to accommodate variations.\r\n        const promptWithFiles = imageData.length === 1 ? [...imageData, { text: prompt }] : [prompt, ...imageData];\r\n\r\n        const modelParams: ModelParams = {\r\n            model,\r\n        };\r\n\r\n        const generationConfig: GenerationConfig = {};\r\n\r\n        if (_params.maxOutputTokens) generationConfig.maxOutputTokens = _params.maxOutputTokens;\r\n        if (_params.temperature) generationConfig.temperature = _params.temperature;\r\n        if (_params.stopSequences) generationConfig.stopSequences = _params.stopSequences;\r\n        if (_params.topP) generationConfig.topP = _params.topP;\r\n        if (_params.topK) generationConfig.topK = _params.topK;\r\n\r\n        if (Object.keys(generationConfig).length > 0) {\r\n            modelParams.generationConfig = generationConfig;\r\n        }\r\n\r\n        try {\r\n            const genAI = new GoogleGenerativeAI(apiKey || process.env.GOOGLEAI_API_KEY);\r\n            const $model = genAI.getGenerativeModel(modelParams);\r\n\r\n            const responseFormat = _params?.responseFormat || 'json';\r\n            if (responseFormat) {\r\n                if (MODELS_WITH_JSON_RESPONSE.includes(model)) _params.responseMimeType = 'application/json';\r\n                else prompt += JSON_RESPONSE_INSTRUCTION;\r\n            }\r\n\r\n            // Check token limit\r\n            const { totalTokens: promptTokens } = await $model.countTokens(promptWithFiles);\r\n\r\n            // * the function will throw an error if the token limit is exceeded\r\n            this.validateTokensLimit({\r\n                model,\r\n                promptTokens,\r\n                completionTokens: _params?.maxOutputTokens,\r\n                hasTeamAPIKey: !!apiKey,\r\n            });\r\n\r\n            const result = await $model.generateContent(promptWithFiles);\r\n            const response = await result?.response;\r\n            const content = response?.text();\r\n            const finishReason = response.candidates[0].finishReason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params, agent: string | Agent) {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n        const model = _params?.model || DEFAULT_MODEL;\r\n        const apiKey = _params?.apiKey;\r\n        const fileSources = _params?.fileSources || [];\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n\r\n        // If user provide mix of valid and invalid files, we will only process the valid files\r\n        const validFiles = this.getValidFileSources(fileSources, 'all');\r\n\r\n        const hasVideo = validFiles.some((file) => file?.mimetype?.includes('video'));\r\n\r\n        // GoogleAI only supports one video file at a time\r\n        if (hasVideo && validFiles.length > 1) {\r\n            throw new Error('Only one video file is supported at a time.');\r\n        }\r\n\r\n        const fileUploadingTasks = validFiles.map((fileSource) => async () => {\r\n            try {\r\n                const uploadedFile = await this.uploadFile({ fileSource, apiKey, agentId });\r\n\r\n                return { url: uploadedFile.url, mimetype: fileSource.mimetype };\r\n            } catch {\r\n                return null;\r\n            }\r\n        });\r\n\r\n        const uploadedFiles = await processWithConcurrencyLimit(fileUploadingTasks);\r\n\r\n        // We throw error when there are no valid uploaded files,\r\n        if (uploadedFiles?.length === 0) {\r\n            throw new Error(`There is an issue during upload file in Google AI Server!`);\r\n        }\r\n\r\n        const fileData = this.getFileData(uploadedFiles);\r\n\r\n        // Adjust input structure handling for multiple image files to accommodate variations.\r\n        const promptWithFiles = fileData.length === 1 ? [...fileData, { text: prompt }] : [prompt, ...fileData];\r\n\r\n        const modelParams: ModelParams = {\r\n            model,\r\n        };\r\n\r\n        const generationConfig: GenerationConfig = {};\r\n\r\n        if (_params.maxOutputTokens) generationConfig.maxOutputTokens = _params.maxOutputTokens;\r\n        if (_params.temperature) generationConfig.temperature = _params.temperature;\r\n        if (_params.stopSequences) generationConfig.stopSequences = _params.stopSequences;\r\n        if (_params.topP) generationConfig.topP = _params.topP;\r\n        if (_params.topK) generationConfig.topK = _params.topK;\r\n\r\n        if (Object.keys(generationConfig).length > 0) {\r\n            modelParams.generationConfig = generationConfig;\r\n        }\r\n\r\n        try {\r\n            const genAI = new GoogleGenerativeAI(apiKey || process.env.GOOGLEAI_API_KEY);\r\n            const $model = genAI.getGenerativeModel(modelParams);\r\n\r\n            const responseFormat = _params?.responseFormat || 'json';\r\n            if (responseFormat) {\r\n                if (MODELS_WITH_JSON_RESPONSE.includes(model)) _params.responseMimeType = 'application/json';\r\n                else prompt += JSON_RESPONSE_INSTRUCTION;\r\n            }\r\n\r\n            // Check token limit\r\n            const { totalTokens: promptTokens } = await $model.countTokens(promptWithFiles);\r\n\r\n            // * the function will throw an error if the token limit is exceeded\r\n            this.validateTokensLimit({\r\n                model,\r\n                promptTokens,\r\n                completionTokens: _params?.maxOutputTokens,\r\n                hasTeamAPIKey: !!apiKey,\r\n            });\r\n\r\n            const result = await $model.generateContent(promptWithFiles);\r\n\r\n            const response = await result?.response;\r\n            const content = response?.text();\r\n            const finishReason = response.candidates[0].finishReason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async toolRequest(acRequest: AccessRequest, params): Promise<any> {\r\n        const _params = { ...params };\r\n\r\n        try {\r\n            let systemInstruction = '';\r\n            let formattedMessages;\r\n\r\n            const messages = this.getConsistentMessages(_params.messages);\r\n\r\n            if (this.hasSystemMessage(messages)) {\r\n                const separateMessages = this.separateSystemMessages(messages);\r\n                const systemMessageContent = (separateMessages.systemMessage as TLLMMessageBlock)?.content;\r\n                systemInstruction = typeof systemMessageContent === 'string' ? systemMessageContent : '';\r\n                formattedMessages = separateMessages.otherMessages;\r\n            } else {\r\n                formattedMessages = messages;\r\n            }\r\n\r\n            const genAI = new GoogleGenerativeAI(_params.apiKey || process.env.GOOGLEAI_API_KEY);\r\n            const $model = genAI.getGenerativeModel({ model: _params.model });\r\n\r\n            const generationConfig: GenerateContentRequest = {\r\n                contents: formattedMessages,\r\n            };\r\n\r\n            if (systemInstruction) {\r\n                generationConfig.systemInstruction = systemInstruction;\r\n            }\r\n\r\n            if (_params?.toolsConfig?.tools) generationConfig.tools = _params?.toolsConfig?.tools;\r\n            if (_params?.toolsConfig?.tool_choice)\r\n                generationConfig.toolConfig = {\r\n                    functionCallingConfig: { mode: _params?.toolsConfig?.tool_choice || 'auto' },\r\n                };\r\n\r\n            const result = await $model.generateContent(generationConfig);\r\n\r\n            const response = await result.response;\r\n            const content = response.text();\r\n            const toolCalls = response.candidates[0]?.content?.parts?.filter((part) => part.functionCall);\r\n\r\n            let toolsData: ToolData[] = [];\r\n            let useTool = false;\r\n\r\n            if (toolCalls && toolCalls.length > 0) {\r\n                toolsData = toolCalls.map((toolCall, index) => ({\r\n                    index,\r\n                    id: `tool-${index}`,\r\n                    type: 'function',\r\n                    name: toolCall.functionCall.name,\r\n                    arguments: JSON.stringify(toolCall.functionCall.args),\r\n                    role: TLLMMessageRole.Assistant,\r\n                }));\r\n                useTool = true;\r\n            }\r\n\r\n            return {\r\n                data: { useTool, message: { content }, content, toolsData },\r\n            };\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<ImagesResponse> {\r\n        throw new Error('Image generation request is not supported for GoogleAI.');\r\n    }\r\n\r\n    // ! DEPRECATED: will be removed\r\n    protected async streamToolRequest(\r\n        acRequest: AccessRequest,\r\n        { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    ): Promise<any> {\r\n        throw new Error('streamToolRequest() is Deprecated!');\r\n    }\r\n\r\n    protected async streamRequest(acRequest: AccessRequest, params): Promise<EventEmitter> {\r\n        const _params = { ...params };\r\n\r\n        const emitter = new EventEmitter();\r\n        const genAI = new GoogleGenerativeAI(_params.apiKey || process.env.GOOGLEAI_API_KEY);\r\n        const $model = genAI.getGenerativeModel({ model: _params.model });\r\n\r\n        let systemInstruction = '';\r\n        let formattedMessages;\r\n        const messages = this.getConsistentMessages(_params.messages);\r\n\r\n        if (this.hasSystemMessage(messages)) {\r\n            const separateMessages = this.separateSystemMessages(messages);\r\n            const systemMessageContent = (separateMessages.systemMessage as TLLMMessageBlock)?.content;\r\n            systemInstruction = typeof systemMessageContent === 'string' ? systemMessageContent : '';\r\n            formattedMessages = this.getConsistentMessages(separateMessages.otherMessages);\r\n        } else {\r\n            formattedMessages = this.getConsistentMessages(messages);\r\n        }\r\n\r\n        const generationConfig: GenerateContentRequest = {\r\n            contents: formattedMessages,\r\n        };\r\n\r\n        if (systemInstruction) {\r\n            generationConfig.systemInstruction = systemInstruction;\r\n        }\r\n\r\n        if (_params?.toolsConfig?.tools) generationConfig.tools = _params?.toolsConfig?.tools;\r\n        if (_params?.toolsConfig?.tool_choice)\r\n            generationConfig.toolConfig = {\r\n                functionCallingConfig: { mode: _params?.toolsConfig?.tool_choice || 'auto' },\r\n            };\r\n\r\n        try {\r\n            const result = await $model.generateContentStream(generationConfig);\r\n\r\n            let toolsData: ToolData[] = [];\r\n\r\n            // Process stream asynchronously while as we need to return emitter immediately\r\n            (async () => {\r\n                for await (const chunk of result.stream) {\r\n                    const chunkText = chunk.text();\r\n                    emitter.emit('content', chunkText);\r\n\r\n                    if (chunk.candidates[0]?.content?.parts) {\r\n                        const toolCalls = chunk.candidates[0].content.parts.filter((part) => part.functionCall);\r\n                        if (toolCalls.length > 0) {\r\n                            toolsData = toolCalls.map((toolCall, index) => ({\r\n                                index,\r\n                                id: `tool-${index}`,\r\n                                type: 'function',\r\n                                name: toolCall.functionCall.name,\r\n                                arguments: JSON.stringify(toolCall.functionCall.args),\r\n                                role: TLLMMessageRole.Assistant,\r\n                            }));\r\n                            emitter.emit('toolsData', toolsData);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    emitter.emit('end', toolsData);\r\n                }, 100);\r\n            })();\r\n\r\n            return emitter;\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params: TLLMParams = await super.extractVisionLLMParams(config);\r\n\r\n        return params;\r\n    }\r\n\r\n    public formatToolsConfig({ toolDefinitions, toolChoice = 'auto' }) {\r\n        const tools = toolDefinitions.map((tool) => {\r\n            const { name, description, properties, requiredFields } = tool;\r\n\r\n            // Ensure the function name is valid\r\n            const validName = this.sanitizeFunctionName(name);\r\n\r\n            // Ensure properties are non-empty for OBJECT type\r\n            const validProperties = properties && Object.keys(properties).length > 0 ? properties : { dummy: { type: 'string' } };\r\n\r\n            return {\r\n                functionDeclarations: [\r\n                    {\r\n                        name: validName,\r\n                        description: description || '',\r\n                        parameters: {\r\n                            type: 'OBJECT',\r\n                            properties: validProperties,\r\n                            required: requiredFields || [],\r\n                        },\r\n                    },\r\n                ],\r\n            };\r\n        });\r\n\r\n        return {\r\n            tools,\r\n            toolChoice: {\r\n                type: toolChoice,\r\n            },\r\n        };\r\n    }\r\n\r\n    // Add this helper method to sanitize function names\r\n    private sanitizeFunctionName(name: string): string {\r\n        // Check if name is undefined or null\r\n        if (name == null) {\r\n            return '_unnamed_function';\r\n        }\r\n\r\n        // Remove any characters that are not alphanumeric, underscore, dot, or dash\r\n        let sanitized = name.replace(/[^a-zA-Z0-9_.-]/g, '');\r\n\r\n        // Ensure the name starts with a letter or underscore\r\n        if (!/^[a-zA-Z_]/.test(sanitized)) {\r\n            sanitized = '_' + sanitized;\r\n        }\r\n\r\n        // If sanitized is empty after removing invalid characters, use a default name\r\n        if (sanitized === '') {\r\n            sanitized = '_unnamed_function';\r\n        }\r\n\r\n        // Truncate to 64 characters if longer\r\n        sanitized = sanitized.slice(0, 64);\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    private async uploadFile({\r\n        fileSource,\r\n        apiKey,\r\n        agentId,\r\n    }: {\r\n        fileSource: BinaryInput;\r\n        apiKey: string;\r\n        agentId: string;\r\n    }): Promise<{ url: string }> {\r\n        try {\r\n            if (!apiKey || !fileSource?.mimetype) {\r\n                throw new Error('Missing required parameters to save file for Google AI!');\r\n            }\r\n\r\n            // Create a temporary directory\r\n            const tempDir = os.tmpdir();\r\n            const fileName = uid();\r\n            const tempFilePath = path.join(tempDir, fileName);\r\n\r\n            const bufferData = await fileSource.readData(AccessCandidate.agent(agentId));\r\n\r\n            // Write buffer data to temp file\r\n            await fs.promises.writeFile(tempFilePath, bufferData);\r\n\r\n            // Upload the file to the Google File Manager\r\n            const fileManager = new GoogleAIFileManager(apiKey);\r\n\r\n            const uploadResponse = await fileManager.uploadFile(tempFilePath, {\r\n                mimeType: fileSource.mimetype,\r\n                displayName: fileName,\r\n            });\r\n\r\n            const name = uploadResponse.file.name;\r\n\r\n            // Poll getFile() on a set interval (10 seconds here) to check file state.\r\n            let uploadedFile = await fileManager.getFile(name);\r\n            while (uploadedFile.state === FileState.PROCESSING) {\r\n                process.stdout.write('.');\r\n                // Sleep for 10 seconds\r\n                await new Promise((resolve) => setTimeout(resolve, 10_000));\r\n                // Fetch the file from the API again\r\n                uploadedFile = await fileManager.getFile(name);\r\n            }\r\n\r\n            if (uploadedFile.state === FileState.FAILED) {\r\n                throw new Error('File processing failed.');\r\n            }\r\n\r\n            // Clean up temp file\r\n            await fs.promises.unlink(tempFilePath);\r\n\r\n            return {\r\n                url: uploadResponse.file.uri || '',\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Error uploading file for Google AI: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    private getConsistentMessages(messages: TLLMMessageBlock[]): TLLMMessageBlock[] {\r\n        if (messages.length === 0) return messages;\r\n\r\n        return messages.map((message) => {\r\n            const _message = { ...message };\r\n            let textContent = '';\r\n\r\n            // Map roles to valid Google AI roles\r\n            switch (_message.role) {\r\n                case TLLMMessageRole.Assistant:\r\n                case TLLMMessageRole.System:\r\n                    _message.role = TLLMMessageRole.Model;\r\n                    break;\r\n                case TLLMMessageRole.User:\r\n                    // User role is already valid\r\n                    break;\r\n                default:\r\n                    _message.role = TLLMMessageRole.User; // Default to user for unknown roles\r\n            }\r\n\r\n            if (_message?.parts) {\r\n                textContent = _message.parts.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (Array.isArray(_message?.content)) {\r\n                textContent = _message.content.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (_message?.content) {\r\n                textContent = _message.content as string;\r\n            }\r\n\r\n            _message.parts = [{ text: textContent }];\r\n\r\n            delete _message.content; // Remove content to avoid error\r\n\r\n            return _message;\r\n        });\r\n    }\r\n\r\n    private getValidFileSources(fileSources: BinaryInput[], type: 'image' | 'all') {\r\n        const validSources = [];\r\n\r\n        for (let fileSource of fileSources) {\r\n            if (this.validMimeTypes[type].includes(fileSource?.mimetype)) {\r\n                validSources.push(fileSource);\r\n            }\r\n        }\r\n\r\n        if (validSources?.length === 0) {\r\n            throw new Error(`Unsupported file(s). Please make sure your file is one of the following types: ${this.validMimeTypes[type].join(', ')}`);\r\n        }\r\n\r\n        return validSources;\r\n    }\r\n\r\n    private getFileData(\r\n        fileSources: {\r\n            url: string;\r\n            mimetype: string;\r\n        }[]\r\n    ): {\r\n        fileData: {\r\n            mimeType: string;\r\n            fileUri: string;\r\n        };\r\n    }[] {\r\n        try {\r\n            const imageData = [];\r\n\r\n            for (let fileSource of fileSources) {\r\n                imageData.push({\r\n                    fileData: {\r\n                        mimeType: fileSource.mimetype,\r\n                        fileUri: fileSource.url,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return imageData;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public transformToolMessageBlocks({\r\n        messageBlock,\r\n        toolsData,\r\n    }: {\r\n        messageBlock: TLLMMessageBlock;\r\n        toolsData: ToolData[];\r\n    }): TLLMToolResultMessageBlock[] {\r\n        const messageBlocks: TLLMToolResultMessageBlock[] = [];\r\n\r\n        if (messageBlock) {\r\n            const content = [];\r\n            if (typeof messageBlock.content === 'string') {\r\n                content.push({ text: messageBlock.content });\r\n            } else if (Array.isArray(messageBlock.content)) {\r\n                content.push(...messageBlock.content);\r\n            }\r\n\r\n            if (messageBlock.parts) {\r\n                const functionCalls = messageBlock.parts.filter((part) => part.functionCall);\r\n                if (functionCalls.length > 0) {\r\n                    content.push(\r\n                        ...functionCalls.map((call) => ({\r\n                            functionCall: {\r\n                                name: call.functionCall.name,\r\n                                args: JSON.parse(call.functionCall.args),\r\n                            },\r\n                        }))\r\n                    );\r\n                }\r\n            }\r\n\r\n            messageBlocks.push({\r\n                role: messageBlock.role,\r\n                parts: content,\r\n            });\r\n        }\r\n\r\n        const transformedToolsData = toolsData.map(\r\n            (toolData): TLLMToolResultMessageBlock => ({\r\n                role: TLLMMessageRole.Function,\r\n                parts: [\r\n                    {\r\n                        functionResponse: {\r\n                            name: toolData.name,\r\n                            response: {\r\n                                name: toolData.name,\r\n                                content: typeof toolData.result === 'string' ? toolData.result : JSON.stringify(toolData.result),\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            })\r\n        );\r\n\r\n        return [...messageBlocks, ...transformedToolsData];\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\nimport Anthropic from '@anthropic-ai/sdk';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { JSON_RESPONSE_INSTRUCTION } from '@sre/constants';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { BinaryInput } from '@sre/helpers/BinaryInput.helper';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { TLLMParams, ToolData, TLLMMessageBlock, TLLMToolResultMessageBlock, TLLMMessageRole } from '@sre/types/LLM.types';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\nimport { processWithConcurrencyLimit, isDataUrl, isUrl, getMimeTypeFromUrl, isRawBase64, parseBase64, isValidString } from '@sre/utils';\r\n\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\n\r\nconst console = Logger('AnthropicAIConnector');\r\n\r\nconst VALID_IMAGE_MIME_TYPES = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/gif'];\r\nconst PREFILL_TEXT_FOR_JSON_RESPONSE = '{';\r\nconst TOOL_USE_DEFAULT_MODEL = 'claude-3-5-sonnet-20240620';\r\n\r\nexport class AnthropicAIConnector extends LLMConnector {\r\n    public name = 'LLM:AnthropicAI';\r\n\r\n    private validImageMimeTypes = VALID_IMAGE_MIME_TYPES;\r\n\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        _params.messages = this.getConsistentMessages(_params?.messages) || [];\r\n\r\n        // set prompt as user message if provided\r\n        if (prompt) {\r\n            _params.messages.push({\r\n                role: TLLMMessageRole.User,\r\n                content: prompt,\r\n            });\r\n        }\r\n\r\n        if (this.hasSystemMessage(_params.messages)) {\r\n            // in AnthropicAI we need to provide system message separately\r\n            const { systemMessage, otherMessages } = this.separateSystemMessages(_params.messages);\r\n\r\n            _params.messages = this.getConsistentMessages(otherMessages);\r\n\r\n            _params.system = (systemMessage as TLLMMessageBlock)?.content;\r\n        }\r\n\r\n        const responseFormat = _params?.responseFormat || 'json';\r\n        if (responseFormat === 'json') {\r\n            _params.system += JSON_RESPONSE_INSTRUCTION;\r\n            _params.messages.push({ role: TLLMMessageRole.Assistant, content: PREFILL_TEXT_FOR_JSON_RESPONSE });\r\n        }\r\n\r\n        const apiKey = _params?.apiKey;\r\n\r\n        // We do not provide default API key for claude, so user/team must provide their own API key\r\n        if (!apiKey) throw new Error('Please provide an API key for AnthropicAI');\r\n\r\n        const anthropic = new Anthropic({ apiKey });\r\n\r\n        // TODO: implement claude specific token counting to validate token limit\r\n        // this.validateTokenLimit(_params);\r\n\r\n        const messageCreateArgs: Anthropic.MessageCreateParamsNonStreaming = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n            max_tokens: _params?.max_tokens || this.getAllowedCompletionTokens(_params.model, !!apiKey),\r\n        };\r\n\r\n        if (_params?.temperature) messageCreateArgs.temperature = _params.temperature;\r\n        if (_params?.stop_sequences) messageCreateArgs.stop_sequences = _params.stop_sequences;\r\n        if (_params?.top_p) messageCreateArgs.top_p = _params.top_p;\r\n        if (_params?.top_k) messageCreateArgs.top_k = _params.top_k;\r\n\r\n        try {\r\n            const response = await anthropic.messages.create(messageCreateArgs);\r\n            let content = (response.content?.[0] as Anthropic.TextBlock)?.text;\r\n            const finishReason = response?.stop_reason;\r\n\r\n            if (responseFormat === 'json') {\r\n                content = `${PREFILL_TEXT_FOR_JSON_RESPONSE}${content}`;\r\n            }\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params, agent?: string | Agent) {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        _params.messages = this.getConsistentMessages(_params?.messages) || [];\r\n\r\n        const agentId = agent instanceof Agent ? agent.id : agent;\r\n\r\n        const fileSources: BinaryInput[] = _params?.fileSources || [];\r\n        const validSources = this.getValidImageFileSources(fileSources);\r\n        const imageData = await this.getImageData(validSources, agentId);\r\n\r\n        const content = [{ type: 'text', text: prompt }, ...imageData];\r\n        _params.messages.push({ role: TLLMMessageRole.User, content });\r\n\r\n        const apiKey = _params?.apiKey;\r\n\r\n        // We do not provide default API key for claude, so user/team must provide their own API key\r\n        if (!apiKey) throw new Error('Please provide an API key for AnthropicAI');\r\n\r\n        const anthropic = new Anthropic({ apiKey });\r\n\r\n        // TODO (Forhad): implement claude specific token counting properly\r\n        // this.validateTokenLimit(params);\r\n\r\n        const messageCreateArgs: Anthropic.MessageCreateParamsNonStreaming = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n            max_tokens: _params?.max_tokens || this.getAllowedCompletionTokens(_params.model, !!apiKey),\r\n        };\r\n\r\n        try {\r\n            const response = await anthropic.messages.create(messageCreateArgs);\r\n            let content = (response?.content?.[0] as Anthropic.TextBlock)?.text;\r\n            const finishReason = response?.stop_reason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Multimodal request is not supported for OpenAI.');\r\n    }\r\n\r\n    protected async toolRequest(acRequest: AccessRequest, params): Promise<any> {\r\n        const _params = { ...params };\r\n\r\n        try {\r\n            // We do not provide default API key for claude, so user/team must provide their own API key\r\n            if (!_params?.apiKey) throw new Error('Please provide an API key for AnthropicAI');\r\n\r\n            const anthropic = new Anthropic({ apiKey: _params?.apiKey });\r\n\r\n            const messageCreateArgs: Anthropic.MessageCreateParamsNonStreaming = {\r\n                model: _params?.model,\r\n                messages: [],\r\n                max_tokens: _params?.max_tokens || this.getAllowedCompletionTokens(_params.model, !!_params?.apiKey), // * max token is required\r\n            };\r\n\r\n            const messages = this.getConsistentMessages(_params?.messages);\r\n\r\n            if (this.hasSystemMessage(messages)) {\r\n                // in AnthropicAI we need to provide system message separately\r\n                const { systemMessage, otherMessages } = this.separateSystemMessages(messages);\r\n\r\n                messageCreateArgs.system = ((systemMessage as TLLMMessageBlock)?.content as string) || '';\r\n\r\n                messageCreateArgs.messages = otherMessages as Anthropic.MessageParam[];\r\n            } else {\r\n                messageCreateArgs.messages = messages as Anthropic.MessageParam[];\r\n            }\r\n\r\n            if (_params?.toolsConfig?.tools && _params?.toolsConfig?.tools.length > 0) messageCreateArgs.tools = _params?.toolsConfig?.tools;\r\n\r\n            // TODO (Forhad): implement claude specific token counting properly\r\n            // this.validateTokenLimit(params);\r\n\r\n            const result = await anthropic.messages.create(messageCreateArgs);\r\n            const message = {\r\n                role: result?.role || TLLMMessageRole.User,\r\n                content: result?.content || '',\r\n            };\r\n            const stopReason = result?.stop_reason;\r\n\r\n            let toolsData: ToolData[] = [];\r\n            let useTool = false;\r\n\r\n            if ((stopReason as 'tool_use') === 'tool_use') {\r\n                const toolUseContentBlocks = result?.content?.filter((c) => (c.type as 'tool_use') === 'tool_use');\r\n\r\n                if (toolUseContentBlocks?.length === 0) return;\r\n\r\n                message.content = toolUseContentBlocks;\r\n\r\n                toolUseContentBlocks.forEach((toolUseBlock: Anthropic.Messages.ToolUseBlock, index) => {\r\n                    toolsData.push({\r\n                        index,\r\n                        id: toolUseBlock?.id,\r\n                        type: 'function', // We call API only when the tool type is 'function' in `src/helpers/Conversation.helper.ts`. Even though Anthropic AI returns the type as 'tool_use', it should be interpreted as 'function'.\r\n                        name: toolUseBlock?.name,\r\n                        arguments: toolUseBlock?.input,\r\n                        role: TLLMMessageRole.User,\r\n                    });\r\n                });\r\n\r\n                useTool = true;\r\n            }\r\n\r\n            const content = (result?.content?.[0] as Anthropic.TextBlock)?.text;\r\n\r\n            return {\r\n                data: {\r\n                    useTool,\r\n                    message,\r\n                    content,\r\n                    toolsData,\r\n                },\r\n            };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<ImagesResponse> {\r\n        throw new Error('Image generation request is not supported for AnthropicAI.');\r\n    }\r\n\r\n    // ! DEPRECATED METHOD\r\n    protected async streamToolRequest(\r\n        acRequest: AccessRequest,\r\n        { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    ): Promise<any> {\r\n        throw new Error('streamToolRequest() is Deprecated!');\r\n    }\r\n\r\n    protected async streamRequest(acRequest: AccessRequest, params): Promise<EventEmitter> {\r\n        const _params = { ...params };\r\n        try {\r\n            const emitter = new EventEmitter();\r\n\r\n            // We do not provide default API key for claude, so user/team must provide their own API key\r\n            if (!_params?.apiKey) throw new Error('Please provide an API key for AnthropicAI');\r\n\r\n            const anthropic = new Anthropic({ apiKey: _params?.apiKey });\r\n\r\n            const messageCreateArgs: Anthropic.Messages.MessageStreamParams = {\r\n                model: _params?.model,\r\n                messages: [],\r\n                max_tokens: _params?.max_tokens || this.getAllowedCompletionTokens(_params.model, !!_params?.apiKey), // * max token is required\r\n            };\r\n\r\n            const messages = this.getConsistentMessages(_params?.messages);\r\n\r\n            if (this.hasSystemMessage(messages)) {\r\n                // in Anthropic AI we need to provide system message separately\r\n                const { systemMessage, otherMessages } = this.separateSystemMessages(messages);\r\n\r\n                messageCreateArgs.system = ((systemMessage as TLLMMessageBlock)?.content as string) || '';\r\n\r\n                messageCreateArgs.messages = otherMessages as Anthropic.MessageParam[];\r\n            } else {\r\n                messageCreateArgs.messages = messages as Anthropic.MessageParam[];\r\n            }\r\n\r\n            if (_params?.toolsConfig?.tools && _params?.toolsConfig?.tools.length > 0) messageCreateArgs.tools = _params?.toolsConfig?.tools;\r\n\r\n            const stream = anthropic.messages.stream(messageCreateArgs);\r\n\r\n            stream.on('error', (error) => {\r\n                emitter.emit('error', error);\r\n            });\r\n\r\n            let toolsData: ToolData[] = [];\r\n\r\n            stream.on('text', (text: string) => {\r\n                emitter.emit('content', text);\r\n            });\r\n\r\n            stream.on('finalMessage', (finalMessage) => {\r\n                const toolUseContentBlocks = finalMessage?.content?.filter((c) => (c.type as 'tool_use') === 'tool_use');\r\n\r\n                if (toolUseContentBlocks?.length > 0) {\r\n                    toolUseContentBlocks.forEach((toolUseBlock: Anthropic.Messages.ToolUseBlock, index) => {\r\n                        toolsData.push({\r\n                            index,\r\n                            id: toolUseBlock?.id,\r\n                            type: 'function', // We call API only when the tool type is 'function' in `src/helpers/Conversation.helper.ts`. Even though Anthropic AI returns the type as 'tool_use', it should be interpreted as 'function'.\r\n                            name: toolUseBlock?.name,\r\n                            arguments: toolUseBlock?.input,\r\n                            role: TLLMMessageRole.User,\r\n                        });\r\n                    });\r\n\r\n                    emitter.emit('toolsData', toolsData);\r\n                }\r\n\r\n                //only emit end event after processing the final message\r\n                setTimeout(() => {\r\n                    emitter.emit('end', toolsData);\r\n                }, 100);\r\n            });\r\n\r\n            return emitter;\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params: TLLMParams = await super.extractVisionLLMParams(config);\r\n\r\n        return params;\r\n    }\r\n\r\n    public formatToolsConfig({ type = 'function', toolDefinitions, toolChoice = 'auto' }) {\r\n        let tools: {\r\n            name: string;\r\n            description: string;\r\n            input_schema: {\r\n                type: 'object';\r\n                properties: Record<string, unknown>;\r\n                required: string[];\r\n            };\r\n        }[] = [];\r\n\r\n        if (type === 'function') {\r\n            tools = toolDefinitions.map((tool) => {\r\n                const { name, description, properties, requiredFields } = tool;\r\n\r\n                return {\r\n                    name,\r\n                    description,\r\n                    input_schema: {\r\n                        type: 'object',\r\n                        properties,\r\n                        required: requiredFields,\r\n                    },\r\n                };\r\n            });\r\n        }\r\n\r\n        return tools?.length > 0 ? { tools } : {};\r\n    }\r\n\r\n    public transformToolMessageBlocks({\r\n        messageBlock,\r\n        toolsData,\r\n    }: {\r\n        messageBlock: TLLMMessageBlock;\r\n        toolsData: ToolData[];\r\n    }): TLLMToolResultMessageBlock[] {\r\n        const messageBlocks: TLLMToolResultMessageBlock[] = [];\r\n\r\n        if (messageBlock) {\r\n            const content = [];\r\n            if (Array.isArray(messageBlock.content)) {\r\n                content.push(...messageBlock.content);\r\n            } else {\r\n                content.push({ type: 'text', text: messageBlock.content });\r\n            }\r\n            if (messageBlock.tool_calls) {\r\n                const calls = messageBlock.tool_calls.map((toolCall: any) => ({\r\n                    type: 'tool_use',\r\n                    id: toolCall.id,\r\n                    name: toolCall?.function?.name,\r\n                    input: toolCall?.function?.arguments,\r\n                }));\r\n\r\n                content.push(...calls);\r\n            }\r\n\r\n            messageBlocks.push({\r\n                role: messageBlock.role,\r\n                content: content,\r\n            });\r\n        }\r\n\r\n        const transformedToolsData = toolsData.map(\r\n            (toolData): TLLMToolResultMessageBlock => ({\r\n                role: TLLMMessageRole.User,\r\n                content: [\r\n                    {\r\n                        type: 'tool_result',\r\n                        tool_use_id: toolData.id,\r\n                        content: toolData.result,\r\n                    },\r\n                ],\r\n            })\r\n        );\r\n\r\n        return [...messageBlocks, ...transformedToolsData];\r\n    }\r\n\r\n    private getConsistentMessages(messages: TLLMMessageBlock[]): TLLMMessageBlock[] {\r\n        if (messages.length === 0) return messages;\r\n\r\n        let _messages = [...messages];\r\n\r\n        _messages = _messages.map((message) => {\r\n            let content;\r\n\r\n            if (message?.parts) {\r\n                content = message.parts.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (Array.isArray(message?.content)) {\r\n                if (Array.isArray(message.content)) {\r\n                    const toolBlocks = message.content.filter(\r\n                        (item) => typeof item === 'object' && 'type' in item && (item.type === 'tool_use' || item.type === 'tool_result')\r\n                    );\r\n\r\n                    if (toolBlocks?.length > 0) {\r\n                        content = message.content;\r\n                    } else {\r\n                        content = message.content\r\n                            .map((block) => block?.text || '')\r\n                            .join(' ')\r\n                            .trim();\r\n                    }\r\n                } else {\r\n                    content = message.content;\r\n                }\r\n            } else if (message?.content) {\r\n                content = message.content as string;\r\n            }\r\n\r\n            message.content = content;\r\n\r\n            return message;\r\n        });\r\n\r\n        //[FIXED] - `tool_result` block(s) provided when previous message does not contain any `tool_use` blocks\" (handler)\r\n        /* if (messages[0].role === TLLMMessageRole.User && Array.isArray(messages[0].content)) {\r\n            const hasToolResult = messages[0].content.find((content) => 'type' in content && content.type === 'tool_result');\r\n\r\n            //we found a tool result in the first message, so we need to remove the user message\r\n            if (hasToolResult) {\r\n                messages.shift();\r\n            }\r\n        } */\r\n\r\n        //   - Error: 400 {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"messages: first message must use the \\\"user\\\" role\"}}\r\n        if (messages[0].role !== TLLMMessageRole.User && messages[0].role !== TLLMMessageRole.System) {\r\n            messages.unshift({ role: TLLMMessageRole.User, content: 'continue' }); //add an empty user message to keep the consistency\r\n        }\r\n\r\n        return messages;\r\n    }\r\n\r\n    private getValidImageFileSources(fileSources: BinaryInput[]) {\r\n        const validSources = [];\r\n\r\n        for (let fileSource of fileSources) {\r\n            if (this.validImageMimeTypes.includes(fileSource?.mimetype)) {\r\n                validSources.push(fileSource);\r\n            }\r\n        }\r\n\r\n        if (validSources?.length === 0) {\r\n            throw new Error(`Unsupported file(s). Please make sure your file is one of the following types: ${this.validImageMimeTypes.join(', ')}`);\r\n        }\r\n\r\n        return validSources;\r\n    }\r\n\r\n    private async getImageData(\r\n        fileSources: BinaryInput[],\r\n        agentId: string\r\n    ): Promise<\r\n        {\r\n            type: string;\r\n            source: { type: 'base64'; data: string; media_type: string };\r\n        }[]\r\n    > {\r\n        try {\r\n            const imageData = [];\r\n\r\n            for (let fileSource of fileSources) {\r\n                const bufferData = await fileSource.readData(AccessCandidate.agent(agentId));\r\n                const base64Data = bufferData.toString('base64');\r\n\r\n                imageData.push({\r\n                    type: 'image',\r\n                    source: {\r\n                        type: 'base64',\r\n                        data: base64Data,\r\n                        media_type: fileSource.mimetype,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return imageData;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import Groq from 'groq-sdk';\r\nimport EventEmitter from 'events';\r\n\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { TOOL_USE_DEFAULT_MODEL, JSON_RESPONSE_INSTRUCTION } from '@sre/constants';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { TLLMMessageBlock, ToolData, TLLMMessageRole } from '@sre/types/LLM.types';\r\n\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\n\r\nconst console = Logger('GroqConnector');\r\n\r\ntype ChatCompletionCreateParams = {\r\n    model: string;\r\n    messages: any;\r\n    max_tokens?: number;\r\n    temperature?: number;\r\n    stop?: string[];\r\n    top_p?: number;\r\n    tools?: any;\r\n    tool_choice?: 'none' | 'auto' | { type: 'function'; function: { name: string } };\r\n    stream?: boolean;\r\n};\r\n\r\ntype ToolRequestParams = {\r\n    model: string;\r\n    messages: TLLMMessageBlock[];\r\n    toolsConfig: { tools: ToolData[]; tool_choice: string };\r\n    apiKey: string;\r\n};\r\n\r\n// TODO [Forhad]: Apply proper types at for function params and return value\r\n\r\nexport class GroqConnector extends LLMConnector {\r\n    public name = 'LLM:Groq';\r\n\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        const _params = { ...params };\r\n\r\n        _params.messages = _params?.messages || [];\r\n\r\n        if (this.hasSystemMessage(_params.messages)) {\r\n            const { systemMessage, otherMessages } = this.separateSystemMessages(_params.messages);\r\n            _params.messages = [systemMessage, ...otherMessages];\r\n        } else {\r\n            _params.messages.unshift({\r\n                role: 'system',\r\n                content: JSON_RESPONSE_INSTRUCTION,\r\n            });\r\n        }\r\n\r\n        if (prompt) {\r\n            _params.messages.push({ role: TLLMMessageRole.User, content: prompt });\r\n        }\r\n\r\n        const apiKey = _params?.apiKey;\r\n        if (!apiKey) throw new Error('Please provide an API key for Groq');\r\n\r\n        const groq = new Groq({ apiKey });\r\n\r\n        // TODO: implement groq specific token counting\r\n        // this.validateTokensLimit(_params);\r\n\r\n        const chatCompletionArgs: ChatCompletionCreateParams = {\r\n            model: _params.model,\r\n            messages: this.getConsistentMessages(_params.messages),\r\n        };\r\n\r\n        if (_params.max_tokens) chatCompletionArgs.max_tokens = _params.max_tokens;\r\n        if (_params.temperature) chatCompletionArgs.temperature = _params.temperature;\r\n        if (_params.stop) chatCompletionArgs.stop = _params.stop;\r\n        if (_params.top_p) chatCompletionArgs.top_p = _params.top_p;\r\n\r\n        try {\r\n            const response: any = await groq.chat.completions.create(chatCompletionArgs);\r\n            const content = response.choices[0]?.message?.content;\r\n            const finishReason = response.choices[0]?.finish_reason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Vision requests are not supported by Groq');\r\n    }\r\n\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Multimodal request is not supported for OpenAI.');\r\n    }\r\n\r\n    protected async toolRequest(acRequest: AccessRequest, params: ToolRequestParams): Promise<any> {\r\n        const _params = { ...params };\r\n\r\n        try {\r\n            const groq = new Groq({ apiKey: _params.apiKey || process.env.GROQ_API_KEY });\r\n\r\n            const _messages = this.getConsistentMessages(_params.messages);\r\n\r\n            let args = {\r\n                model: _params.model,\r\n                messages: _messages,\r\n                tools: _params.toolsConfig.tools,\r\n                tool_choice: _params.toolsConfig.tool_choice,\r\n            };\r\n\r\n            const result = await groq.chat.completions.create(args as any);\r\n            const message = result?.choices?.[0]?.message;\r\n            const toolCalls = message?.tool_calls;\r\n\r\n            let toolsData: ToolData[] = [];\r\n            let useTool = false;\r\n\r\n            if (toolCalls) {\r\n                toolsData = toolCalls.map((tool, index) => ({\r\n                    index,\r\n                    id: tool.id,\r\n                    type: tool.type,\r\n                    name: tool.function.name,\r\n                    arguments: tool.function.arguments,\r\n                    role: TLLMMessageRole.Assistant,\r\n                }));\r\n                useTool = true;\r\n            }\r\n\r\n            return {\r\n                data: { useTool, message, content: message?.content ?? '', toolsData },\r\n            };\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<ImagesResponse> {\r\n        throw new Error('Image generation request is not supported for Groq.');\r\n    }\r\n\r\n    protected async streamToolRequest(\r\n        acRequest: AccessRequest,\r\n        { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    ): Promise<any> {\r\n        throw new Error('streamToolRequest() is Deprecated!');\r\n    }\r\n\r\n    protected async streamRequest(acRequest: AccessRequest, params): Promise<EventEmitter> {\r\n        const _params = { ...params };\r\n        const emitter = new EventEmitter();\r\n        const groq = new Groq({ apiKey: _params.apiKey || process.env.GROQ_API_KEY });\r\n\r\n        let chatCompletionArgs: ChatCompletionCreateParams = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n            stream: true,\r\n        };\r\n\r\n        if (_params.toolsConfig?.tools) chatCompletionArgs.tools = _params.toolsConfig?.tools;\r\n        if (_params.toolsConfig?.tool_choice) chatCompletionArgs.tool_choice = _params.toolsConfig?.tool_choice;\r\n\r\n        try {\r\n            const stream = await groq.chat.completions.create(chatCompletionArgs);\r\n\r\n            let toolsData: ToolData[] = [];\r\n\r\n            (async () => {\r\n                for await (const chunk of stream as any) {\r\n                    const delta = chunk.choices[0]?.delta;\r\n                    emitter.emit('data', delta);\r\n\r\n                    if (delta?.content) {\r\n                        emitter.emit('content', delta.content);\r\n                    }\r\n\r\n                    if (delta?.tool_calls) {\r\n                        delta.tool_calls.forEach((toolCall, index) => {\r\n                            if (!toolsData[index]) {\r\n                                toolsData[index] = {\r\n                                    index,\r\n                                    id: toolCall.id,\r\n                                    type: toolCall.type,\r\n                                    name: toolCall.function?.name,\r\n                                    arguments: toolCall.function?.arguments,\r\n                                    role: 'assistant',\r\n                                };\r\n                            } else {\r\n                                toolsData[index].arguments += toolCall.function?.arguments || '';\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (toolsData.length > 0) {\r\n                    emitter.emit('toolsData', toolsData);\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    emitter.emit('end', toolsData);\r\n                }, 100);\r\n            })();\r\n\r\n            return emitter;\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params = await super.extractVisionLLMParams(config);\r\n\r\n        return params;\r\n    }\r\n\r\n    public formatToolsConfig({ type = 'function', toolDefinitions, toolChoice = 'auto' }) {\r\n        let tools = [];\r\n\r\n        if (type === 'function') {\r\n            tools = toolDefinitions.map((tool) => {\r\n                const { name, description, properties, requiredFields } = tool;\r\n\r\n                return {\r\n                    type: 'function',\r\n                    function: {\r\n                        name,\r\n                        description,\r\n                        parameters: {\r\n                            type: 'object',\r\n                            properties,\r\n                            required: requiredFields,\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n        }\r\n\r\n        return tools?.length > 0 ? { tools, tool_choice: toolChoice } : {};\r\n    }\r\n\r\n    private getConsistentMessages(messages: TLLMMessageBlock[]): TLLMMessageBlock[] {\r\n        if (messages.length === 0) return messages;\r\n\r\n        return messages.map((message) => {\r\n            const _message = { ...message };\r\n            let textContent = '';\r\n\r\n            if (message?.parts) {\r\n                textContent = message.parts.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (Array.isArray(message?.content)) {\r\n                textContent = message.content.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (message?.content) {\r\n                textContent = message.content as string;\r\n            }\r\n\r\n            _message.content = textContent;\r\n\r\n            return _message;\r\n        });\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\nimport OpenAI from 'openai';\r\nimport { encodeChat } from 'gpt-tokenizer';\r\n\r\nimport config from '@sre/config';\r\nimport Agent from '@sre/AgentManager/Agent.class';\r\nimport { JSON_RESPONSE_INSTRUCTION, TOOL_USE_DEFAULT_MODEL } from '@sre/constants';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { TLLMParams, TLLMMessageBlock, ToolData } from '@sre/types/LLM.types';\r\n\r\nimport { ImagesResponse, LLMChatResponse, LLMConnector } from '../LLMConnector';\r\n\r\nconst console = Logger('TogetherAIConnector');\r\n\r\nconst TOGETHER_AI_API_URL = 'https://api.together.xyz/v1';\r\n\r\nexport class TogetherAIConnector extends LLMConnector {\r\n    public name = 'LLM:TogetherAI';\r\n\r\n    protected async chatRequest(acRequest: AccessRequest, prompt, params): Promise<LLMChatResponse> {\r\n        const _params = { ...params }; // Avoid mutation of the original params object\r\n\r\n        // Open to take system message with params, if no system message found then force to get JSON response in default\r\n        if (!_params.messages) _params.messages = [];\r\n\r\n        const _messages = this.getConsistentMessages(_params.messages);\r\n\r\n        //FIXME: We probably need to separate the json system from default chatRequest\r\n        if (_messages[0]?.role !== 'system') {\r\n            _messages.unshift({\r\n                role: 'system',\r\n                content: 'All responses should be in valid json format. The returned json should not be formatted with any newlines or indentations.',\r\n            });\r\n        }\r\n\r\n        if (prompt && _messages.length === 1) {\r\n            _messages.push({ role: 'user', content: prompt });\r\n        }\r\n\r\n        // Check if the team has their own API key, then use it\r\n        const apiKey = _params?.apiKey;\r\n\r\n        const openai = new OpenAI({\r\n            apiKey: apiKey || process.env.TOGETHER_AI_API_KEY,\r\n            baseURL: config.env.TOGETHER_AI_API_URL || TOGETHER_AI_API_URL,\r\n        });\r\n\r\n        // Check token limit\r\n        const promptTokens = encodeChat(_messages, 'gpt-4')?.length;\r\n\r\n        const tokensLimit = this.checkTokensLimit({\r\n            model: _params.model,\r\n            promptTokens,\r\n            completionTokens: _params?.max_tokens,\r\n            hasTeamAPIKey: !!apiKey,\r\n        });\r\n\r\n        if (tokensLimit.isExceeded) throw new Error(tokensLimit.error);\r\n\r\n        const chatCompletionArgs: OpenAI.ChatCompletionCreateParams & {\r\n            top_k?: number;\r\n            repetition_penalty?: number;\r\n        } = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n        };\r\n\r\n        if (_params?.max_tokens) chatCompletionArgs.max_tokens = _params.max_tokens;\r\n        if (_params?.temperature) chatCompletionArgs.temperature = _params.temperature;\r\n        if (_params?.stop) chatCompletionArgs.stop = _params.stop;\r\n        if (_params?.top_p) chatCompletionArgs.top_p = _params.top_p;\r\n        if (_params?.top_k) chatCompletionArgs.top_k = _params.top_k;\r\n        if (_params?.repetition_penalty) chatCompletionArgs.repetition_penalty = _params.presence_penalty;\r\n        if (_params?.response_format) chatCompletionArgs.response_format = _params.response_format;\r\n\r\n        try {\r\n            const response = await openai.chat.completions.create(chatCompletionArgs);\r\n\r\n            const content = response?.choices?.[0]?.message.content;\r\n            const finishReason = response?.choices?.[0]?.finish_reason;\r\n\r\n            return { content, finishReason };\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async visionRequest(acRequest: AccessRequest, prompt, params, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Vision requests are not supported by TogetherAI');\r\n    }\r\n\r\n    protected async multimodalRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<LLMChatResponse> {\r\n        throw new Error('Multimodal request is not supported for OpenAI.');\r\n    }\r\n\r\n    protected async imageGenRequest(acRequest: AccessRequest, prompt, params: any, agent?: string | Agent): Promise<ImagesResponse> {\r\n        throw new Error('Image generation request is not supported for TogetherAI.');\r\n    }\r\n\r\n    protected async toolRequest(acRequest: AccessRequest, params): Promise<any> {\r\n        const _params = { ...params };\r\n\r\n        try {\r\n            const openai = new OpenAI({\r\n                apiKey: _params.apiKey || process.env.TOGETHER_AI_API_KEY,\r\n                baseURL: config.env.TOGETHER_AI_API_URL || TOGETHER_AI_API_URL,\r\n            });\r\n\r\n            const messages = this.getConsistentMessages(_params.messages);\r\n\r\n            let chatCompletionArgs: OpenAI.ChatCompletionCreateParamsNonStreaming = {\r\n                model: _params.model,\r\n                messages,\r\n            };\r\n\r\n            if (_params.toolsConfig?.tools) chatCompletionArgs.tools = _params.toolsConfig?.tools;\r\n            if (_params.toolsConfig?.tool_choice) chatCompletionArgs.tool_choice = _params.toolsConfig?.tool_choice;\r\n\r\n            const result = await openai.chat.completions.create(chatCompletionArgs);\r\n            const message = result?.choices?.[0]?.message;\r\n            const finishReason = result?.choices?.[0]?.finish_reason;\r\n\r\n            let toolsData: ToolData[] = [];\r\n            let useTool = false;\r\n\r\n            if (finishReason === 'tool_calls') {\r\n                toolsData =\r\n                    message?.tool_calls?.map((tool, index) => ({\r\n                        index,\r\n                        id: tool?.id,\r\n                        type: tool?.type,\r\n                        name: tool?.function?.name,\r\n                        arguments: tool?.function?.arguments,\r\n                        role: 'tool',\r\n                    })) || [];\r\n\r\n                useTool = true;\r\n            }\r\n\r\n            return {\r\n                data: { useTool, message: message, content: message?.content ?? '', toolsData },\r\n            };\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected async streamToolRequest(\r\n        acRequest: AccessRequest,\r\n        { model = TOOL_USE_DEFAULT_MODEL, messages, toolsConfig: { tools, tool_choice }, apiKey = '' }\r\n    ): Promise<any> {\r\n        throw new Error('streamToolRequest() is Deprecated!');\r\n    }\r\n\r\n    protected async streamRequest(acRequest: AccessRequest, params): Promise<EventEmitter> {\r\n        const _params = { ...params };\r\n        const emitter = new EventEmitter();\r\n        const openai = new OpenAI({\r\n            apiKey: _params.apiKey || process.env.TOGETHER_AI_API_KEY,\r\n            baseURL: config.env.TOGETHER_AI_API_URL || TOGETHER_AI_API_URL,\r\n        });\r\n\r\n        let chatCompletionArgs: OpenAI.ChatCompletionCreateParamsStreaming = {\r\n            model: _params.model,\r\n            messages: _params.messages,\r\n            stream: true,\r\n        };\r\n\r\n        if (_params.toolsConfig?.tools) chatCompletionArgs.tools = _params.toolsConfig?.tools;\r\n        if (_params.toolsConfig?.tool_choice) chatCompletionArgs.tool_choice = _params.toolsConfig?.tool_choice;\r\n\r\n        try {\r\n            const stream: any = await openai.chat.completions.create(chatCompletionArgs);\r\n\r\n            let toolsData: ToolData[] = [];\r\n\r\n            (async () => {\r\n                for await (const part of stream) {\r\n                    const delta = part.choices[0].delta;\r\n                    emitter.emit('data', delta);\r\n\r\n                    if (!delta?.tool_calls && delta?.content) {\r\n                        emitter.emit('content', delta.content, delta.role);\r\n                    }\r\n\r\n                    if (delta?.tool_calls) {\r\n                        const toolCall = delta?.tool_calls?.[0];\r\n                        const index = toolCall?.index;\r\n\r\n                        toolsData[index] = {\r\n                            index,\r\n                            role: 'tool',\r\n                            id: (toolsData?.[index]?.id || '') + (toolCall?.id || ''),\r\n                            type: (toolsData?.[index]?.type || '') + (toolCall?.type || ''),\r\n                            name: (toolsData?.[index]?.name || '') + (toolCall?.function?.name || ''),\r\n                            arguments: (toolsData?.[index]?.arguments || '') + (toolCall?.function?.arguments || ''),\r\n                        };\r\n                    }\r\n                }\r\n\r\n                if (toolsData?.length > 0) {\r\n                    emitter.emit('toolsData', toolsData);\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    emitter.emit('end', toolsData);\r\n                }, 100);\r\n            })();\r\n\r\n            return emitter;\r\n        } catch (error: any) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async extractVisionLLMParams(config: any) {\r\n        const params: TLLMParams = await super.extractVisionLLMParams(config);\r\n\r\n        return params;\r\n    }\r\n\r\n    public formatToolsConfig({ type = 'function', toolDefinitions, toolChoice = 'auto' }) {\r\n        let tools: OpenAI.ChatCompletionTool[] = [];\r\n\r\n        if (type === 'function') {\r\n            tools = toolDefinitions.map((tool) => {\r\n                const { name, description, properties, requiredFields } = tool;\r\n\r\n                return {\r\n                    type: 'function',\r\n                    function: {\r\n                        name,\r\n                        description,\r\n                        parameters: {\r\n                            type: 'object',\r\n                            properties,\r\n                            required: requiredFields,\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n        }\r\n\r\n        return tools?.length > 0 ? { tools, tool_choice: toolChoice || 'auto' } : {};\r\n    }\r\n\r\n    private getConsistentMessages(messages) {\r\n        if (messages.length === 0) return messages;\r\n\r\n        return messages.map((message) => {\r\n            const _message = { ...message };\r\n            let textContent = '';\r\n\r\n            if (message?.parts) {\r\n                textContent = message.parts.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (Array.isArray(message?.content)) {\r\n                textContent = message.content.map((textBlock) => textBlock?.text || '').join(' ');\r\n            } else if (message?.content) {\r\n                textContent = message.content as string;\r\n            }\r\n\r\n            _message.content = textContent;\r\n\r\n            return _message;\r\n        });\r\n    }\r\n}\r\n","//==[ SRE: LLM ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { EchoConnector } from './connectors/Echo.class';\r\nimport { OpenAIConnector } from './connectors/OpenAI.class';\r\nimport { GoogleAIConnector } from './connectors/GoogleAI.class';\r\nimport { AnthropicAIConnector } from './connectors/AnthropicAI.class';\r\nimport { GroqConnector } from './connectors/Groq.class';\r\nimport { TogetherAIConnector } from './connectors/TogetherAI.class';\r\n\r\nexport class LLMService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.LLM, 'Echo', EchoConnector);\r\n        ConnectorService.register(TConnectorService.LLM, 'OpenAI', OpenAIConnector);\r\n        ConnectorService.register(TConnectorService.LLM, 'GoogleAI', GoogleAIConnector);\r\n        ConnectorService.register(TConnectorService.LLM, 'AnthropicAI', AnthropicAIConnector);\r\n        ConnectorService.register(TConnectorService.LLM, 'Groq', GroqConnector);\r\n        ConnectorService.register(TConnectorService.LLM, 'TogetherAI', TogetherAIConnector);\r\n    }\r\n\r\n    public init() {\r\n        //auto initialize builting models\r\n        ConnectorService.init(TConnectorService.LLM, 'Echo');\r\n        ConnectorService.init(TConnectorService.LLM, 'OpenAI');\r\n        ConnectorService.init(TConnectorService.LLM, 'GoogleAI');\r\n        ConnectorService.init(TConnectorService.LLM, 'AnthropicAI');\r\n        ConnectorService.init(TConnectorService.LLM, 'Groq');\r\n        ConnectorService.init(TConnectorService.LLM, 'TogetherAI');\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IACL, IAccessCandidate, IAccessRequest } from '@sre/types/ACL.types';\r\nimport { CacheMetadata } from '@sre/types/Cache.types';\r\n\r\nexport interface ICacheRequest {\r\n    get: (key: string) => Promise<any>;\r\n\r\n    /**\r\n     * Set a value in the cache\r\n     * @param key\r\n     * @param data\r\n     * @param acl\r\n     * @param metadata\r\n     * @param ttl Cache time to live in seconds\r\n     * @returns\r\n     */\r\n    set: (key: string, data: any, acl?: IACL, metadata?: CacheMetadata, ttl?: number) => Promise<boolean>;\r\n    delete: (key: string) => Promise<void>;\r\n    exists: (key: string) => Promise<boolean>;\r\n\r\n    getMetadata: (key: string) => Promise<CacheMetadata | undefined>;\r\n    setMetadata: (key: string, metadata: CacheMetadata) => Promise<void>;\r\n\r\n    updateTTL: (key: string, ttl?: number) => Promise<void>;\r\n    getTTL: (key: string) => Promise<number>;\r\n\r\n    getACL: (key: string) => Promise<IACL | undefined>;\r\n    setACL: (key: string, acl: IACL) => Promise<void>;\r\n}\r\n\r\nexport abstract class CacheConnector extends SecureConnector {\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n    public user(candidate: AccessCandidate): ICacheRequest {\r\n        return {\r\n            get: async (key: string) => {\r\n                return await this.get(candidate.readRequest, key);\r\n            },\r\n            set: async (key: string, data: any, acl?: IACL, metadata?: CacheMetadata, ttl?: number) => {\r\n                return await this.set(candidate.writeRequest, key, data, acl, metadata, ttl);\r\n            },\r\n            delete: async (key: string) => {\r\n                await this.delete(candidate.writeRequest, key);\r\n            },\r\n            exists: async (key: string) => {\r\n                return await this.exists(candidate.readRequest, key);\r\n            },\r\n\r\n            getMetadata: async (key: string) => {\r\n                return await this.getMetadata(candidate.readRequest, key);\r\n            },\r\n            setMetadata: async (key: string, metadata: CacheMetadata) => {\r\n                await this.setMetadata(candidate.writeRequest, key, metadata);\r\n            },\r\n            updateTTL: async (key: string, ttl?: number) => {\r\n                await this.updateTTL(candidate.writeRequest, key, ttl);\r\n            },\r\n            getTTL: async (key: string) => {\r\n                return await this.getTTL(candidate.readRequest, key);\r\n            },\r\n            getACL: async (key: string) => {\r\n                return await this.getACL(candidate.readRequest, key);\r\n            },\r\n            setACL: async (key: string, acl: IACL) => {\r\n                await this.setACL(candidate.writeRequest, key, acl);\r\n            },\r\n        };\r\n    }\r\n\r\n    abstract get(acRequest: AccessRequest, key: string): Promise<any>;\r\n    abstract set(acRequest: AccessRequest, key: string, data: any, acl?: IACL, metadata?: CacheMetadata, ttl?: number): Promise<boolean>;\r\n    abstract delete(acRequest: AccessRequest, key: string): Promise<void>;\r\n    abstract exists(acRequest: AccessRequest, key: string): Promise<boolean>;\r\n\r\n    abstract getMetadata(acRequest: AccessRequest, key: string): Promise<CacheMetadata | undefined>;\r\n    abstract setMetadata(acRequest: AccessRequest, key: string, metadata: CacheMetadata): Promise<void>;\r\n\r\n    abstract updateTTL(acRequest: AccessRequest, key: string, ttl?: number): Promise<void>;\r\n    abstract getTTL(acRequest: AccessRequest, key: string): Promise<number>;\r\n\r\n    abstract getACL(acRequest: AccessRequest, key: string): Promise<IACL | undefined>;\r\n    abstract setACL(acRequest: AccessRequest, key: string, acl: IACL): Promise<void>;\r\n}\r\n","import { Logger } from '@sre/helpers/Log.helper';\r\nimport { IAccessCandidate, IACL, TAccessLevel } from '@sre/types/ACL.types';\r\nimport { CacheMetadata } from '@sre/types/Cache.types';\r\nimport IORedis from 'ioredis';\r\nimport { CacheConnector } from '../CacheConnector';\r\n\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { RedisConfig } from '@sre/types/Redis.types';\r\n\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { AccountConnector } from '@sre/Security/Account.service/AccountConnector';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\n\r\nconst console = Logger('RedisCache');\r\n\r\nexport class RedisCache extends CacheConnector {\r\n    public name: string = 'RedisCache';\r\n    private redis: IORedis;\r\n    private _prefix: string = 'smyth:cache';\r\n    private _mdPrefix: string = 'smyth:metadata';\r\n\r\n    constructor(settings: RedisConfig) {\r\n        super();\r\n        const sentinels = parseSentinelHosts(settings.hosts);\r\n\r\n        this.redis = new IORedis({\r\n            sentinels,\r\n            name: settings.name,\r\n            password: settings.password,\r\n        });\r\n\r\n        this.redis.on('error', (error) => {\r\n            console.error('Redis Error:', error);\r\n        });\r\n\r\n        this.redis.on('connect', () => {\r\n            console.log('Redis connected!');\r\n        });\r\n    }\r\n\r\n    public get client() {\r\n        return this.redis;\r\n    }\r\n\r\n    public get prefix() {\r\n        return this._prefix;\r\n    }\r\n\r\n    public get mdPrefix() {\r\n        return this._mdPrefix;\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async get(acRequest: AccessRequest, key: string): Promise<string | null> {\r\n        const value = await this.redis.get(`${this._prefix}:${key}`);\r\n        return value;\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async set(acRequest: AccessRequest, key: string, data: any, acl?: IACL, metadata?: CacheMetadata, ttl?: number): Promise<boolean> {\r\n        const accessCandidate = acRequest.candidate;\r\n        const promises: any[] = [];\r\n\r\n        promises.push(this.redis.set(`${this._prefix}:${key}`, data));\r\n\r\n        const newMetadata: CacheMetadata = metadata || {};\r\n        newMetadata.acl = ACL.from(acl).addAccess(accessCandidate.role, accessCandidate.id, TAccessLevel.Owner).ACL;\r\n        promises.push(this.setMetadata(acRequest, key, newMetadata));\r\n\r\n        if (ttl) {\r\n            promises.push(this.updateTTL(acRequest, key, ttl));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n        return true;\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async delete(acRequest: AccessRequest, key: string): Promise<void> {\r\n        //delete both the key and its metadata\r\n        await Promise.all([this.redis.del(`${this._prefix}:${key}`), this.redis.del(`${this._mdPrefix}:${key}`)]);\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async exists(acRequest: AccessRequest, key: string): Promise<boolean> {\r\n        return !!(await this.redis.exists(`${this._prefix}:${key}`));\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async getMetadata(acRequest: AccessRequest, key: string): Promise<CacheMetadata> {\r\n        if (!this.exists(acRequest, key)) return undefined;\r\n        try {\r\n            const metadata = await this.redis.get(`${this._mdPrefix}:${key}`);\r\n            return metadata ? (this.deserializeRedisMetadata(metadata) as CacheMetadata) : {};\r\n        } catch (error) {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async setMetadata(acRequest: AccessRequest, key: string, metadata: CacheMetadata): Promise<void> {\r\n        await this.redis.set(`${this._mdPrefix}:${key}`, this.serializeRedisMetadata(metadata));\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async updateTTL(acRequest: AccessRequest, key: string, ttl?: number): Promise<void> {\r\n        if (ttl) {\r\n            await Promise.all([this.redis.expire(`${this._prefix}:${key}`, ttl), this.redis.expire(`${this._mdPrefix}:${key}`, ttl)]);\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    public async getTTL(acRequest: AccessRequest, key: string): Promise<number> {\r\n        return this.redis.ttl(`${this._prefix}:${key}`);\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL> {\r\n        const _metadata: any = await this.redis.get(`${this._mdPrefix}:${resourceId}`).catch((error) => {});\r\n        const exists = _metadata !== undefined && _metadata !== null; //null or undefined metadata means the resource does not exist\r\n        const metadata = exists ? this.deserializeRedisMetadata(_metadata) : {};\r\n\r\n        if (!exists) {\r\n            //the resource does not exist yet, we grant write access to the candidate in order to allow the resource creation\r\n            return new ACL().addAccess(candidate.role, candidate.id, TAccessLevel.Owner);\r\n        }\r\n        return ACL.from(metadata?.acl as IACL);\r\n    }\r\n\r\n    // async hasAccess(request: IAccessRequest): Promise<boolean> {\r\n    //     try {\r\n    //         const metadata = await this.getMetadata(request.resourceId);\r\n    //         const acl: IACL = metadata?.acl as IACL;\r\n    //         return ACL.from(acl).checkExactAccess(request);\r\n    //     } catch (error) {\r\n    //         if (error.name === 'NotFound') {\r\n    //             return false;\r\n    //         }\r\n    //         console.error(`Error checking access rights in S3`, error.name, error.message);\r\n    //         throw error;\r\n    //     }\r\n    // }\r\n\r\n    @SecureConnector.AccessControl\r\n    async getACL(acRequest: AccessRequest, key: string): Promise<IACL> {\r\n        try {\r\n            const metadata = await this.getMetadata(acRequest, key);\r\n            return (metadata?.acl as IACL) || {};\r\n        } catch (error) {\r\n            console.error(`Error getting access rights in S3`, error.name, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    async setACL(acRequest: AccessRequest, key: string, acl: IACL) {\r\n        try {\r\n            let metadata = await this.getMetadata(acRequest, key);\r\n            if (!metadata) metadata = {};\r\n            //when setting ACL make sure to not lose ownership\r\n            metadata.acl = ACL.from(acl).addAccess(acRequest.candidate.role, acRequest.candidate.id, TAccessLevel.Owner).ACL;\r\n            await this.setMetadata(acRequest, key, metadata);\r\n        } catch (error) {\r\n            console.error(`Error setting access rights in S3`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private serializeRedisMetadata(redisMetadata: Record<string, any> | undefined): string {\r\n        if (!redisMetadata) return '';\r\n        if (redisMetadata.acl) {\r\n            const acl: IACL = redisMetadata.acl;\r\n            if (acl) {\r\n                redisMetadata.acl = ACL.from(acl).serializedACL;\r\n            }\r\n        }\r\n\r\n        return JSON.stringify(redisMetadata);\r\n    }\r\n\r\n    private deserializeRedisMetadata(strMetadata: string): Record<string, any> {\r\n        try {\r\n            const redisMetadata = JSON.parse(strMetadata);\r\n            if (redisMetadata.acl) {\r\n                const acl: IACL = ACL.from(redisMetadata.acl).ACL;\r\n                redisMetadata.acl = acl;\r\n            }\r\n\r\n            return redisMetadata;\r\n        } catch (error) {\r\n            console.warn(`Error deserializing metadata`, strMetadata);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    public async stop() {\r\n        super.stop();\r\n        await this.redis.quit();\r\n    }\r\n}\r\n\r\n/**\r\n * hosts can take any of the following formats:\r\n * 1. A string with comma-separated host:port pairs\r\n * 2. An array of strings with host:port pairs\r\n * 3. An array of objects with host and port properties\r\n * @param hosts\r\n */\r\nfunction parseSentinelHosts(hosts: string | string[] | any[]) {\r\n    //handle all possible formats of hosts\r\n    if (typeof hosts === 'string') {\r\n        return hosts.split(',').map((host) => {\r\n            const [hostName, port] = host.split(':');\r\n            return {\r\n                host: hostName,\r\n                port: Number(port),\r\n            };\r\n        });\r\n    } else if (Array.isArray(hosts)) {\r\n        return hosts.map((host) => {\r\n            if (typeof host === 'string') {\r\n                const [hostName, port] = host.split(':');\r\n                return {\r\n                    host: hostName,\r\n                    port: Number(port),\r\n                };\r\n            } else {\r\n                return host;\r\n            }\r\n        });\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n","//==[ SRE: Cache ]======================\r\nexport * from './CacheConnector';\r\nimport { ConnectorServiceProvider, ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { ICacheConnector } from './CacheConnector';\r\nimport { RedisCache } from './connectors/RedisCache.class';\r\n\r\nexport class CacheService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.Cache, 'Redis', RedisCache);\r\n    }\r\n}\r\n","import { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, IACL } from '@sre/types/ACL.types';\r\n\r\nexport interface IVaultRequest {\r\n    get(keyId: string): Promise<string>;\r\n    set(keyId: string, value: string): Promise<void>;\r\n    delete(keyId: string): Promise<void>;\r\n    exists(keyId: string): Promise<boolean>;\r\n}\r\n\r\nexport abstract class VaultConnector extends SecureConnector {\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n    public abstract user(candidate: AccessCandidate): IVaultRequest;\r\n    protected abstract get(acRequest: AccessRequest, keyId: string): Promise<string>;\r\n    protected abstract set(acRequest: AccessRequest, keyId: string, value: string): Promise<void>;\r\n    protected abstract delete(acRequest: AccessRequest, keyId: string): Promise<void>;\r\n    protected abstract exists(acRequest: AccessRequest, keyId: string): Promise<boolean>;\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { JSONFileVaultConfig } from '@sre/types/Security.types';\r\nimport fs from 'fs';\r\nimport { IVaultRequest, VaultConnector } from '../VaultConnector';\r\n\r\nconst console = Logger('JSONFileVault');\r\nexport class JSONFileVault extends VaultConnector {\r\n    public name: string = 'JSONFileVault';\r\n    private vaultData: any;\r\n    private index: any;\r\n\r\n    constructor(private config: JSONFileVaultConfig) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n\r\n        if (fs.existsSync(config.file)) {\r\n            try {\r\n                this.vaultData = JSON.parse(fs.readFileSync(config.file).toString());\r\n            } catch (e) {\r\n                this.vaultData = {};\r\n            }\r\n\r\n            for (let teamId in this.vaultData) {\r\n                for (let resourceId in this.vaultData[teamId]) {\r\n                    if (!this.index) this.index = {};\r\n                    if (!this.index[resourceId]) this.index[resourceId] = {};\r\n                    const value = this.vaultData[teamId][resourceId];\r\n                    this.index[resourceId][teamId] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    user(candidate: AccessCandidate): IVaultRequest {\r\n        return {\r\n            get: async (keyId: string) => this.get(candidate.readRequest, keyId),\r\n            set: async (keyId: string, value: string) => this.set(candidate.writeRequest, keyId, value),\r\n            delete: async (keyId: string) => this.delete(candidate.writeRequest, keyId),\r\n            exists: async (keyId: string) => this.exists(candidate.readRequest, keyId),\r\n        };\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async get(acRequest: AccessRequest, keyId: string) {\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const teamId = await accountConnector.getCandidateTeam(acRequest.candidate);\r\n\r\n        return this.vaultData?.[teamId]?.[keyId];\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async set(acRequest: AccessRequest, keyId: string, value: string) {\r\n        throw new Error('JSONFileVault.set not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async delete(acRequest: AccessRequest, keyId: string) {\r\n        throw new Error('JSONFileVault.delete not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async exists(acRequest: AccessRequest, keyId: string) {\r\n        return false;\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate) {\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const teamId = await accountConnector.getCandidateTeam(candidate);\r\n\r\n        const acl = new ACL();\r\n\r\n        if (!this.vaultData?.[teamId]?.[resourceId]) return acl;\r\n\r\n        acl.addAccess(TAccessRole.Team, teamId, TAccessLevel.Owner)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Read)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Write);\r\n\r\n        return acl;\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport qs from 'qs';\r\n\r\nexport async function getM2MToken(configs: {\r\n    oauthAppId: string;\r\n    oauthAppSecret: string;\r\n    resource: string;\r\n    scope: string;\r\n    baseUrl: string;\r\n}): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const base64Credentials = Buffer.from(\r\n            `${configs.oauthAppId}:${configs.oauthAppSecret}`,\r\n            'utf8',\r\n        ).toString('base64');\r\n\r\n        const body = {\r\n            grant_type: 'client_credentials',\r\n            resource: configs.resource,\r\n            scope: configs.scope || '',\r\n        };\r\n        axios({\r\n            method: 'post',\r\n            // url: `${config.env.LOGTO_SERVER}/oidc/token`,\r\n            url: configs.baseUrl,\r\n            headers: {\r\n                Authorization: 'Basic ' + base64Credentials,\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            data: qs.stringify(body),\r\n        })\r\n            .then((response) => {\r\n                resolve(response.data.access_token);\r\n            })\r\n            .catch((error) => {\r\n                reject({ error: error.response.data });\r\n            });\r\n    });\r\n}","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { OAuthConfig, SmythVaultConfig } from '@sre/types/Security.types';\r\nimport { IVaultRequest, VaultConnector } from '../VaultConnector';\r\nimport { getM2MToken } from '@sre/utils/oauth.utils';\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\nconst console = Logger('SmythVault');\r\nexport class SmythVault extends VaultConnector {\r\n    public name: string = 'SmythVault';\r\n    private oAuthAppId: string;\r\n    private oAuthAppSecret: string;\r\n    private oAuthBaseUrl: string;\r\n    private oAuthResource?: string;\r\n    private oAuthScope?: string;\r\n    private vaultAPI: AxiosInstance;\r\n\r\n\r\n    constructor(private config: SmythVaultConfig & OAuthConfig) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n\r\n        this.oAuthAppId = config.oAuthAppID;\r\n        this.oAuthAppSecret = config.oAuthAppSecret;\r\n        this.oAuthBaseUrl = config.oAuthBaseUrl;\r\n        this.oAuthResource = config.oAuthResource || '';\r\n        this.oAuthScope = config.oAuthScope || '';\r\n        this.vaultAPI = axios.create({\r\n            baseURL: `${config.vaultAPIBaseUrl}/v1/api`,\r\n        });\r\n\r\n    }\r\n\r\n    user(candidate: AccessCandidate): IVaultRequest {\r\n        return {\r\n            get: async (keyId: string) => this.get(candidate.readRequest, keyId),\r\n            set: async (keyId: string, value: string) => this.set(candidate.writeRequest, keyId, value),\r\n            delete: async (keyId: string) => this.delete(candidate.writeRequest, keyId),\r\n            exists: async (keyId: string) => this.exists(candidate.readRequest, keyId),\r\n        };\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async get(acRequest: AccessRequest, keyId: string) {\r\n        const accountConnector = ConnectorService.getAccountConnector('SmythAccount');\r\n        const teamId = await accountConnector.getCandidateTeam(acRequest.candidate);\r\n        const vaultAPIHeaders = await this.getVaultRequestHeaders();\r\n        const vaultResponse = await this.vaultAPI.get(`/vault/${teamId}/secrets/${keyId}`, { headers: vaultAPIHeaders });\r\n        return vaultResponse?.data?.secret?.value;\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async set(acRequest: AccessRequest, keyId: string, value: string) {\r\n        throw new Error('SmythVault.set not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async delete(acRequest: AccessRequest, keyId: string) {\r\n        throw new Error('SmythVault.delete not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async exists(acRequest: AccessRequest, keyId: string) {\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const teamId = await accountConnector.getCandidateTeam(acRequest.candidate);\r\n        const vaultAPIHeaders = await this.getVaultRequestHeaders();\r\n        const vaultResponse = await this.vaultAPI.get(`/vault/${teamId}/secrets/${keyId}`, { headers: vaultAPIHeaders });\r\n        return vaultResponse?.data?.secret ? true : false;\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate) {\r\n        const accountConnector = ConnectorService.getAccountConnector('SmythAccount');\r\n        const teamId = await accountConnector.getCandidateTeam(candidate);\r\n\r\n        const acl = new ACL();\r\n\r\n        acl.addAccess(TAccessRole.Team, teamId, TAccessLevel.Owner)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Read)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Write);\r\n\r\n        return acl;\r\n    }\r\n\r\n    private async getVaultRequestHeaders() {\r\n        return {\r\n            Authorization: `Bearer ${await getM2MToken({\r\n                baseUrl: this.oAuthBaseUrl,\r\n                oauthAppId: this.oAuthAppId,\r\n                oauthAppSecret: this.oAuthAppSecret,\r\n                resource: this.oAuthResource,\r\n                scope: this.oAuthScope,\r\n            })}`\r\n        };\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { SecretsManagerConfig } from '@sre/types/Security.types';\r\nimport { IVaultRequest, VaultConnector } from '../VaultConnector';\r\nimport { SecretsManagerClient, GetSecretValueCommand, PutSecretValueCommand } from '@aws-sdk/client-secrets-manager';\r\n\r\nconst console = Logger('SecretsManager');\r\nexport class SecretsManager extends VaultConnector {\r\n    public name: string = 'SecretsManager';\r\n    private secretsManager: SecretsManagerClient;\r\n\r\n    constructor(private config: SecretsManagerConfig) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n\r\n        this.secretsManager = new SecretsManagerClient({\r\n            region: config.region,\r\n            ...(config.awsAccessKeyId && config.awsSecretAccessKey ? {\r\n                accessKeyId: config.awsAccessKeyId,\r\n                secretAccessKey: config.awsSecretAccessKey,\r\n            } : {}),\r\n        });\r\n    }\r\n\r\n    user(candidate: AccessCandidate): IVaultRequest {\r\n        return {\r\n            get: async (keyId: string) => this.get(candidate.readRequest, keyId),\r\n            set: async (keyId: string, value: string) => this.set(candidate.writeRequest, keyId, value),\r\n            delete: async (keyId: string) => this.delete(candidate.writeRequest, keyId),\r\n            exists: async (keyId: string) => this.exists(candidate.readRequest, keyId),\r\n        };\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async get(acRequest: AccessRequest, secretId: string) {\r\n        try {\r\n            const accountConnector = ConnectorService.getAccountConnector();\r\n            const teamId = await accountConnector.getCandidateTeam(acRequest.candidate);\r\n            const secret = await this.secretsManager.send(new GetSecretValueCommand({ SecretId: `${teamId}/${secretId}` }));\r\n            return secret.SecretString;\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async set(acRequest: AccessRequest, secretId: string, value: string) {\r\n        throw new Error('SecretsManager.set not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async delete(acRequest: AccessRequest, keyId: string) {\r\n        throw new Error('SecretsManager.delete not allowed');\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async exists(acRequest: AccessRequest, keyId: string) {\r\n        const secret = await this.get(acRequest, keyId);\r\n        return !!secret;\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate) {\r\n        const accountConnector = ConnectorService.getAccountConnector();\r\n        const teamId = await accountConnector.getCandidateTeam(candidate);\r\n\r\n        const acl = new ACL();\r\n\r\n        acl.addAccess(TAccessRole.Team, teamId, TAccessLevel.Owner)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Read)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Write);\r\n\r\n        return acl;\r\n    }\r\n\r\n}\r\n","import { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { JSONFileVault } from './connectors/JSONFileVault.class';\r\nimport { SmythVault } from './connectors/SmythVault.class';\r\nimport { SecretsManager } from './connectors/SecretsManager.class';\r\n\r\nexport class VaultService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.Vault, 'JSONFileVault', JSONFileVault);\r\n        ConnectorService.register(TConnectorService.Vault, 'SmythVault', SmythVault);\r\n        ConnectorService.register(TConnectorService.Vault, 'SecretsManager', SecretsManager);\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\nimport { AccessCandidate } from '../AccessControl/AccessCandidate.class';\r\nimport { KeyValueObject } from '@sre/types/Common.types';\r\nimport { ACL } from '../AccessControl/ACL.class';\r\n\r\nexport interface ISmythAccountRequest {\r\n    isTeamMember(teamId: string): Promise<boolean>;\r\n    getCandidateTeam(): Promise<string | undefined>;\r\n    getAllTeamSettings(): Promise<KeyValueObject[]>;\r\n    getAllUserSettings(): Promise<KeyValueObject[]>;\r\n    getTeamSetting(settingKey: string): Promise<KeyValueObject>;\r\n    getUserSetting(settingKey: string): Promise<KeyValueObject>;\r\n}\r\n\r\nexport abstract class AccountConnector extends Connector {\r\n    public user(candidate: AccessCandidate): ISmythAccountRequest {\r\n        return {\r\n            getAllUserSettings: async () => this.getAllUserSettings(candidate.readRequest, candidate.id),\r\n            getUserSetting: async (settingKey: string) => this.getUserSetting(candidate.readRequest, candidate.id, settingKey),\r\n            getAllTeamSettings: async () => this.getAllTeamSettings(candidate.readRequest, candidate.id),\r\n            getTeamSetting: async (settingKey: string) => this.getTeamSetting(candidate.readRequest, candidate.id, settingKey),\r\n            isTeamMember: async (teamId: string) => this.isTeamMember(teamId, candidate),\r\n            getCandidateTeam: async () => this.getCandidateTeam(candidate),\r\n        };\r\n    }\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n    public abstract isTeamMember(teamId: string, candidate: IAccessCandidate): Promise<boolean>;\r\n    public abstract getCandidateTeam(candidate: IAccessCandidate): Promise<string | undefined>;\r\n    public abstract getAllTeamSettings(acRequest: AccessRequest, teamId: string): Promise<KeyValueObject[]>;\r\n    public abstract getAllUserSettings(acRequest: AccessRequest, accountId: string): Promise<KeyValueObject[]>;\r\n    public abstract getTeamSetting(acRequest: AccessRequest, teamId: string, settingKey: string): Promise<KeyValueObject>;\r\n    public abstract getUserSetting(acRequest: AccessRequest, accountId: string, settingKey: string): Promise<KeyValueObject>;\r\n}\r\n","import { Logger } from '@sre/helpers/Log.helper';\r\nimport { ISmythAccountRequest, AccountConnector } from '../AccountConnector';\r\nimport { IAccessCandidate, TAccessLevel, TAccessRole } from '@sre/types/ACL.types';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { OAuthConfig, SmythConfigs } from '@sre/types/Security.types';\r\nimport axios, { AxiosInstance } from 'axios';\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { getM2MToken } from '@sre/utils/oauth.utils';\r\nimport { KeyValueObject } from '@sre/types/Common.types';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\n\r\nconst console = Logger('SmythAccount');\r\nexport class SmythAccount extends AccountConnector {\r\n    public name: string = 'SmythAccount';\r\n    private oAuthAppId: string;\r\n    private oAuthAppSecret: string;\r\n    private oAuthBaseUrl: string;\r\n    private oAuthResource?: string;\r\n    private oAuthScope?: string;\r\n    private smythAPI: AxiosInstance;\r\n\r\n    constructor(private config: SmythConfigs & OAuthConfig) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n\r\n        this.oAuthAppId = config.oAuthAppID;\r\n        this.oAuthAppSecret = config.oAuthAppSecret;\r\n        this.oAuthBaseUrl = config.oAuthBaseUrl;\r\n        this.oAuthResource = config.oAuthResource || '';\r\n        this.oAuthScope = config.oAuthScope || '';\r\n        this.smythAPI = axios.create({\r\n            baseURL: `${config.smythAPIBaseUrl}`,\r\n        });\r\n    }\r\n\r\n    public async isTeamMember(teamId: string, candidate: IAccessCandidate): Promise<boolean> {\r\n        try {\r\n            const candidateTeamId = await this.getCandidateTeam(candidate);\r\n            if (teamId === candidateTeamId) {\r\n                return true;\r\n            }\r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async getCandidateTeam(candidate: IAccessCandidate): Promise<string | undefined> {\r\n        if (candidate.role === TAccessRole.Team) {\r\n            return candidate.id;\r\n        }\r\n        if (candidate.role === TAccessRole.User) {\r\n            const response = await this.smythAPI.get(`/v1/user/${candidate.id}`, { headers: await this.getSmythRequestHeaders() });\r\n            return response?.data?.user?.teamId;\r\n        }\r\n        if (candidate.role === TAccessRole.Agent) {\r\n            const response = await this.smythAPI.get(`/v1/ai-agent/${candidate.id}`, { headers: await this.getSmythRequestHeaders() });\r\n            return response?.data?.agent?.teamId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public async getAllTeamSettings(acRequest: AccessRequest, teamId: string): Promise<KeyValueObject[] | null> {\r\n        try {\r\n            const response = await this.smythAPI.get(`/v1/teams/${teamId}/settings`, { headers: await this.getSmythRequestHeaders() });\r\n            return response?.data?.settings;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async getAllUserSettings(acRequest: AccessRequest, accountId: string): Promise<KeyValueObject[] | null> {\r\n        try {\r\n            const response = await this.smythAPI.get(`/v1/user/${accountId}/settings`, { headers: await this.getSmythRequestHeaders() });\r\n            return response?.data?.settings;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async getTeamSetting(acRequest: AccessRequest, teamId: string, settingKey: string): Promise<KeyValueObject> {\r\n        try {\r\n            const response = await this.smythAPI.get(`/v1/teams/${teamId}/settings/${settingKey}`, { headers: await this.getSmythRequestHeaders() });\r\n            return response?.data?.setting;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async getUserSetting(acRequest: AccessRequest, accountId: string, settingKey: string): Promise<KeyValueObject> {\r\n        try {\r\n            const response = await this.smythAPI.get(`/v1/user/${accountId}/settings/${settingKey}`, {\r\n                headers: await this.getSmythRequestHeaders(),\r\n            });\r\n            return response?.data?.setting;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate) {\r\n        const accountConnector = ConnectorService.getAccountConnector('SmythAccount');\r\n        const teamId = await accountConnector.getCandidateTeam(candidate);\r\n\r\n        const acl = new ACL();\r\n\r\n        acl.addAccess(TAccessRole.Team, teamId, TAccessLevel.Owner)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Read)\r\n            .addAccess(TAccessRole.Team, teamId, TAccessLevel.Write);\r\n\r\n        return acl;\r\n    }\r\n\r\n    private async getSmythRequestHeaders() {\r\n        return {\r\n            Authorization: `Bearer ${await getM2MToken({\r\n                baseUrl: this.oAuthBaseUrl,\r\n                oauthAppId: this.oAuthAppId,\r\n                oauthAppSecret: this.oAuthAppSecret,\r\n                resource: this.oAuthResource,\r\n                scope: this.oAuthScope,\r\n            })}`,\r\n        };\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, IACL, TAccessRole } from '@sre/types/ACL.types';\r\nimport { StorageData, StorageMetadata } from '@sre/types/Storage.types';\r\nimport { AccountConnector } from '../AccountConnector';\r\nimport { KeyValueObject } from '@sre/types/Common.types';\r\n\r\nexport class DummyAccount extends AccountConnector {\r\n    public name = 'DummyAccount';\r\n    public isTeamMember(team: string, candidate: IAccessCandidate): Promise<boolean> {\r\n        return Promise.resolve(true);\r\n    }\r\n    public getCandidateTeam(candidate: IAccessCandidate): Promise<string | undefined> {\r\n        if (candidate.role === TAccessRole.Team) {\r\n            return Promise.resolve(candidate.id);\r\n        }\r\n\r\n        return Promise.resolve('default');\r\n    }\r\n\r\n    public getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL> {\r\n        throw new Error('getResourceACL Method not implemented.');\r\n    }\r\n    public getAllTeamSettings(acRequest: AccessRequest, teamId: string): Promise<KeyValueObject[]> {\r\n        throw new Error('getAllTeamSettings Method not implemented.');\r\n    }\r\n    public getAllUserSettings(acRequest: AccessRequest, accountId: string): Promise<KeyValueObject[]> {\r\n        throw new Error('getAllUserSettings Method not implemented.');\r\n    }\r\n    public getTeamSetting(acRequest: AccessRequest, teamId: string, settingKey: string): Promise<KeyValueObject> {\r\n        throw new Error('getTeamSetting Method not implemented.');\r\n    }\r\n    public getUserSetting(acRequest: AccessRequest, accountId: string, settingKey: string): Promise<KeyValueObject> {\r\n        throw new Error('getUserSetting Method not implemented.');\r\n    }\r\n}\r\n","//==[ SRE: LLM ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { SmythAccount } from './connectors/SmythAccount.class';\r\nimport { DummyAccount } from './connectors/DummyAccount.class';\r\n\r\nexport class AccountService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.Account, 'SmythAccount', SmythAccount);\r\n        ConnectorService.register(TConnectorService.Account, 'DummyAccount', DummyAccount);\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { IAccessCandidate } from '@sre/types/ACL.types';\r\nimport config from '@sre/config';\r\nimport { escapeString, TemplateString } from '@sre/helpers/TemplateString.helper';\r\n\r\nexport interface IAgentDataConnector {\r\n    getAgentData(agentId: string, version?: string): Promise<any>;\r\n    getAgentIdByDomain(domain: string): Promise<string>;\r\n    getAgentSettings(agentId: string, version?: string): Promise<any>;\r\n}\r\n\r\nconst openapiTemplate = JSON.stringify({\r\n    openapi: '3.0.1',\r\n    info: {\r\n        title: '{{model_name}}',\r\n        description: '{{model_description}}',\r\n        version: '{{version}}',\r\n    },\r\n    servers: [\r\n        {\r\n            url: '{{server_url}}',\r\n        },\r\n    ],\r\n    paths: {},\r\n    components: {\r\n        schemas: {},\r\n    },\r\n});\r\n\r\nconst openapiEndpointTemplate = JSON.stringify({\r\n    summary: '{{summary}}',\r\n    operationId: '{{operationId}}',\r\n    'x-openai-isConsequential': false,\r\n    requestBody: {\r\n        required: true,\r\n        content: {},\r\n    },\r\n    responses: {\r\n        '200': {\r\n            description: 'response',\r\n            content: {\r\n                'text/plain': {\r\n                    schema: {\r\n                        type: 'string',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n});\r\nexport abstract class AgentDataConnector extends Connector implements IAgentDataConnector {\r\n    public name = 'AgentDataConnector';\r\n    public abstract getAgentData(agentId: string, version?: string): Promise<any>;\r\n    public abstract getAgentIdByDomain(domain: string): Promise<string>;\r\n    public abstract getAgentSettings(agentId: string, version?: string): Promise<any>;\r\n    public abstract isDeployed(agentId: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Loads openAPI JSON for the agent\r\n     * @param source this represents either the agentId or the agent data\r\n     * @param domain\r\n     * @param version\r\n     * @param aiOnly\r\n     * @returns\r\n     */\r\n    public async getOpenAPIJSON(source: string | Record<string, any>, server_url, version, aiOnly: boolean = false) {\r\n        if (!source) {\r\n            throw new Error('Agent not found');\r\n        }\r\n\r\n        const apiBasePath = version && version != 'latest' ? `/v${version}/api` : '/api';\r\n\r\n        const agentData: any = typeof source === 'object' ? source : await this.getAgentData(source, version);\r\n        const name = agentData.name;\r\n\r\n        let description = aiOnly ? agentData.data.behavior : agentData.data.shortDescription;\r\n        if (!description) description = agentData.data.description; //data.description is deprecated, we just use it as a fallback for now\r\n\r\n        const _version = agentData.data.version || '1.0.0';\r\n        //replace all non printable characters with spaces\r\n        //description = description.replace(/[^\\x20-\\x7E]+/g, ' ');\r\n        //const version = '1.0.0';\r\n\r\n        // const server_url_scheme =\r\n        //     config.env.NODE_ENV === 'DEV' && config.env.AGENT_DOMAIN_PORT && domain.includes(config.env.AGENT_DOMAIN) ? 'http' : 'https';\r\n        // const server_url_port =\r\n        //     config.env.NODE_ENV === 'DEV' && config.env.AGENT_DOMAIN_PORT && domain.includes(config.env.AGENT_DOMAIN)\r\n        //         ? `:${config.env.AGENT_DOMAIN_PORT}`\r\n        //         : '';\r\n        // const server_url = `${server_url_scheme}://${domain}${server_url_port}`;\r\n\r\n        const openAPITpl = TemplateString(openapiTemplate)\r\n            .parse({\r\n                model_name: escapeString(name),\r\n                model_description: escapeString(description),\r\n                server_url,\r\n                version: _version,\r\n            })\r\n            .clean().result;\r\n        const openAPIObj = JSON.parse(openAPITpl);\r\n\r\n        const components = agentData.data.components.filter((component: any) => component.name === 'APIEndpoint');\r\n        for (let component of components) {\r\n            const ai_exposed = component.data.ai_exposed || typeof component.data.ai_exposed === 'undefined';\r\n            if (aiOnly && !ai_exposed) continue;\r\n            let method = (component.data.method || 'post').toLowerCase();\r\n            let summary = aiOnly ? component.data.description || component.data.doc : component.data.doc || component.data.description;\r\n\r\n            const openAPIEntry = JSON.parse(\r\n                TemplateString(openapiEndpointTemplate)\r\n                    .parse({\r\n                        summary,\r\n                        operationId: component.data.endpoint,\r\n                    })\r\n                    .clean().result\r\n            );\r\n            if (!openAPIObj.paths[apiBasePath + '/' + component.data.endpoint]) openAPIObj.paths[apiBasePath + '/' + component.data.endpoint] = {};\r\n            //const componentsSchemas = openAPIObj.components.schemas;\r\n\r\n            openAPIObj.paths[apiBasePath + '/' + component.data.endpoint][method] = openAPIEntry;\r\n\r\n            if (component.inputs.length > 0) {\r\n                if (method === 'get') {\r\n                    delete openAPIEntry.requestBody;\r\n\r\n                    openAPIEntry.parameters = [];\r\n\r\n                    for (let input of component.inputs) {\r\n                        const parameter: {\r\n                            name: string;\r\n                            in: string;\r\n                            description: string;\r\n                            required: boolean;\r\n                            schema: { type: string };\r\n                            style?: string;\r\n                            explode?: boolean;\r\n                        } = {\r\n                            name: input.name,\r\n                            in: 'query',\r\n                            description: input.description,\r\n                            required: !input.optional,\r\n                            schema: getOpenAPIInputSchema(input.type),\r\n                        };\r\n\r\n                        // for array and object types\r\n                        const { style, explode } = getOpenAPIParameterStyle(input.type);\r\n                        if (style) {\r\n                            parameter.style = style;\r\n                            parameter.explode = explode;\r\n                        }\r\n\r\n                        openAPIEntry.parameters.push(parameter);\r\n                    }\r\n                } else {\r\n                    const requiredProps: any = [];\r\n\r\n                    const hasBinaryType = !aiOnly && component.inputs.some((input) => input.type.toLowerCase().trim() === 'binary');\r\n                    //if it's an AI format, we force application/json format, becauwe we want to receive binary data as a url\r\n                    const mimetype = hasBinaryType ? 'multipart/form-data' : 'application/json';\r\n                    openAPIEntry.requestBody.content[mimetype] = {};\r\n                    for (let input of component.inputs) {\r\n                        if (!input.optional) requiredProps.push(input.name);\r\n\r\n                        if (!openAPIEntry.requestBody.content[mimetype].schema)\r\n                            openAPIEntry.requestBody.content[mimetype].schema = { type: 'object' };\r\n\r\n                        const schema: any = openAPIEntry.requestBody.content[mimetype].schema || {\r\n                            type: 'object',\r\n                        };\r\n\r\n                        if (!schema.properties) schema.properties = {};\r\n                        schema.properties[input.name] = {\r\n                            ...getOpenAPIInputSchema(input.type),\r\n                            format: !aiOnly && input.type.toLowerCase().trim() === 'binary' ? 'binary' : undefined,\r\n                            description: input.description,\r\n                            default: input.defaultVal,\r\n                        };\r\n                        schema.required = requiredProps;\r\n\r\n                        if (!openAPIEntry.requestBody.content[mimetype].schema) openAPIEntry.requestBody.content['application/json'].schema = schema;\r\n                    }\r\n                }\r\n            } else {\r\n                delete openAPIEntry.requestBody;\r\n            }\r\n        }\r\n\r\n        return openAPIObj;\r\n    }\r\n}\r\n\r\nfunction getOpenAPIInputSchema(input_type) {\r\n    switch (input_type?.toLowerCase()) {\r\n        case 'binary':\r\n        case 'string':\r\n        case 'any':\r\n            return { type: 'string' };\r\n        case 'number':\r\n        case 'float':\r\n            return { type: 'number' };\r\n        case 'integer':\r\n            return { type: 'integer' };\r\n        case 'boolean':\r\n            return { type: 'boolean' };\r\n        case 'array':\r\n            return { type: 'array', items: {} };\r\n        case 'object':\r\n            return { type: 'object', additionalProperties: {} };\r\n        default:\r\n            return { type: 'string' };\r\n    }\r\n}\r\n\r\nfunction getOpenAPIParameterStyle(input_type) {\r\n    switch (input_type.toLowerCase()) {\r\n        case 'array':\r\n            return {\r\n                style: 'form',\r\n                explode: false, // results in `ids=1,2,3`\r\n            };\r\n        case 'object':\r\n            return {\r\n                style: 'deepObject',\r\n                explode: true, // results in `lat=value1&long=value2`\r\n            };\r\n        default:\r\n            return { style: '', explode: false };\r\n    }\r\n}\r\n","import { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { CLIConnector } from '@sre/IO/CLI.service/CLIConnector';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { AgentDataConnector } from '../AgentDataConnector';\r\n\r\ntype TArgs = { args: Record<string, any> };\r\nexport class CLIAgentDataConnector extends AgentDataConnector {\r\n    public name: string = 'CLIAgentDataConnector';\r\n    private argv;\r\n    constructor(settings: TArgs) {\r\n        super();\r\n        this.argv = settings.args || process.argv;\r\n    }\r\n    public async getAgentData(agentId: string, version?: string) {\r\n        const cliConnector: CLIConnector = ConnectorService.getCLIConnector();\r\n\r\n        const params: any = cliConnector.get('agent');\r\n\r\n        //get current directory\r\n        const __dirname = fs.realpathSync(process.cwd());\r\n        const filePath = path.join(__dirname, params.agent);\r\n\r\n        if (fs.existsSync(filePath)) {\r\n            const data = fs.readFileSync(filePath, 'utf8');\r\n\r\n            return { data: JSON.parse(data), version: version || '1.0' };\r\n        }\r\n    }\r\n\r\n    public getAgentIdByDomain(domain: string): Promise<string> {\r\n        return Promise.resolve('');\r\n    }\r\n    public async getAgentSettings(agentId: string, version?: string) {\r\n        const cliConnector: CLIConnector = ConnectorService.getCLIConnector();\r\n\r\n        const params: any = cliConnector.get('settings');\r\n        let settings: any;\r\n\r\n        if (typeof params.settings === 'string') {\r\n            if (fs.existsSync(params.settings)) {\r\n                settings = JSON.parse(fs.readFileSync(params.settings, 'utf8'));\r\n            }\r\n        } else {\r\n            settings = params.settings;\r\n        }\r\n        return settings;\r\n    }\r\n    public async isDeployed(agentId: string): Promise<boolean> {\r\n        return true;\r\n    }\r\n}\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport { AgentDataConnector } from '../AgentDataConnector';\r\nimport { uid } from '@sre/utils/general.utils';\r\n\r\nexport type LocalAgentDataSettings = { devDir: string; prodDir: string };\r\n\r\n/**\r\n * This connector loads Agent data and settings from a provided directory, it then indexes the loaded agents and settings by agent IDs.\r\n * Agent data files should be in JSON format and contain an 'id' field with the agent ID and at least a 'components' field.\r\n * Settings files should be in JSON format and contain an 'id' field with the agent ID and the settings in a 'settings' field.\r\n *     'settings' field is a key-value object with the Agent settings.\r\n */\r\nexport class LocalAgentDataConnector extends AgentDataConnector {\r\n    public name: string = 'LocalAgentDataConnector';\r\n    private devDir;\r\n    private prodDir;\r\n    private agentsData = { dev: {}, prod: {} };\r\n    private agentSettings = { dev: {}, prod: {} };\r\n\r\n    constructor(settings: LocalAgentDataSettings) {\r\n        super();\r\n        this.devDir = settings.devDir;\r\n        this.prodDir = settings.prodDir;\r\n    }\r\n\r\n    private indexDir(dir: string) {\r\n        const agents = fs.readdirSync(dir);\r\n\r\n        const agentsData = {};\r\n        const agentSettings = {};\r\n        for (const agent of agents) {\r\n            const agentData = fs.readFileSync(path.join(dir, agent), 'utf8');\r\n            let jsonData;\r\n            try {\r\n                jsonData = JSON.parse(agentData);\r\n\r\n                if (!jsonData.id) {\r\n                    console.warn(`Agent data for ${agent} does not contain an id, generating one...`);\r\n                    jsonData.id = 'tmp-' + uid();\r\n                }\r\n            } catch (e) {\r\n                console.warn(`Error parsing agent data for ${agent}: ${e.message}`);\r\n            }\r\n\r\n            //is this an agent data file?\r\n            if (jsonData.components) agentsData[jsonData.id] = jsonData;\r\n\r\n            //does this file contain settings?\r\n            if (jsonData.settings) agentSettings[jsonData.id] = jsonData.settings;\r\n        }\r\n\r\n        return { agentsData, agentSettings };\r\n    }\r\n    private indexAgentsData() {\r\n        const { agentsData: devAgentsData, agentSettings: devAgentSettings } = this.indexDir(this.devDir);\r\n        const { agentsData: prodAgentsData, agentSettings: prodAgentSettings } = this.indexDir(this.prodDir);\r\n        this.agentsData = { dev: devAgentsData, prod: prodAgentsData };\r\n        this.agentSettings = { dev: devAgentSettings, prod: prodAgentSettings };\r\n    }\r\n\r\n    public async start() {\r\n        super.start();\r\n        this.started = false;\r\n        this.indexAgentsData();\r\n        this.started = true;\r\n    }\r\n\r\n    /**\r\n     * returns the agent data for the provided agent ID\r\n     * if the version is not provided, it defaults to the dev version\r\n     * otherwise it loads the corresponding prod version\r\n     * @param agentId\r\n     * @param version\r\n     * @returns\r\n     */\r\n    public async getAgentData(agentId: string, version?: string) {\r\n        const ready = await this.ready();\r\n        if (!ready) {\r\n            throw new Error('Connector not ready');\r\n        }\r\n\r\n        const data = version ? this.agentsData.prod[agentId] : this.agentsData.dev[agentId];\r\n\r\n        if (data) {\r\n            return { data, version: version || '1.0' };\r\n        } else {\r\n            throw new Error(`Agent with id ${agentId} not found`);\r\n        }\r\n    }\r\n\r\n    public getAgentIdByDomain(domain: string): Promise<string> {\r\n        return Promise.resolve('');\r\n    }\r\n\r\n    /**\r\n     * returns the agent settings for the provided agent ID\r\n     * if the version is not provided, it defaults to the dev version\r\n     * otherwise it loads the corresponding prod version\r\n     * @param agentId\r\n     * @param version\r\n     * @returns\r\n     */\r\n    public async getAgentSettings(agentId: string, version?: string) {\r\n        const ready = await this.ready();\r\n        if (!ready) {\r\n            throw new Error('Connector not ready');\r\n        }\r\n\r\n        const settings = version ? this.agentSettings.prod[agentId] : this.agentSettings.dev[agentId];\r\n\r\n        if (settings) {\r\n            return settings;\r\n        } else {\r\n            throw new Error(`Settings for agent with id ${agentId} not found`);\r\n        }\r\n    }\r\n\r\n    public async isDeployed(agentId: string): Promise<boolean> {\r\n        return !!this.agentsData.prod[agentId];\r\n    }\r\n}\r\n","//==[ SRE: LLM ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { CLIAgentDataConnector } from './connectors/CLIAgentDataConnector.class';\r\nimport { AgentDataConnector } from './AgentDataConnector';\r\nimport { LocalAgentDataConnector } from './connectors/LocalAgentDataConnector.class';\r\n\r\nexport class AgentDataService extends ConnectorServiceProvider {\r\n    public register() {\r\n        //FIXME : register an actual account connector, not the abstract one\r\n        ConnectorService.register(TConnectorService.AgentData, 'AgentData', AgentDataConnector);\r\n        ConnectorService.register(TConnectorService.AgentData, 'CLI', CLIAgentDataConnector);\r\n        ConnectorService.register(TConnectorService.AgentData, 'Local', LocalAgentDataConnector);\r\n    }\r\n}\r\n","//==[ SRE: S3Storage ]======================\r\n\r\nimport { IStorageRequest, StorageConnector } from '@sre/IO/Storage.service/StorageConnector';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { IAccessCandidate, IACL, TAccessLevel, TAccessResult, TAccessRole } from '@sre/types/ACL.types';\r\n\r\nimport SmythRuntime from '@sre/Core/SmythRuntime.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IVectorDBRequest, VectorDBConnector } from '../VectorDBConnector';\r\nimport {\r\n    IStorageVectorNamespace,\r\n    IVectorDataSourceDto,\r\n    PineconeConfig,\r\n    QueryOptions,\r\n    Source,\r\n    VectorDBMetadata,\r\n    VectorsResultData,\r\n} from '@sre/types/VectorDB.types';\r\nimport { Pinecone } from '@pinecone-database/pinecone';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { OpenAIEmbeddings } from '@langchain/openai';\r\nimport { VectorsHelper } from '../Vectors.helper';\r\nimport { isUrl } from '@sre/utils/data.utils';\r\nimport { Logger } from '@sre/helpers/Log.helper';\r\nimport { NKVConnector } from '@sre/IO/NKV.service/NKVConnector';\r\nimport { AccountConnector } from '@sre/Security/Account.service/AccountConnector';\r\nimport { JSONContentHelper } from '@sre/helpers/JsonContent.helper';\r\nimport { CacheConnector } from '@sre/MemoryManager/Cache.service';\r\n\r\nconst console = Logger('Pinecone VectorDB');\r\n\r\ntype SupportedSources = 'text' | 'vector' | 'url';\r\n\r\n// TODO: add a teamId prefix  to the namespace to avoid namespace conflicts between teams\r\nexport class PineconeVectorDB extends VectorDBConnector {\r\n    public name = 'PineconeVectorDB';\r\n    private _client: Pinecone;\r\n    private indexName: string;\r\n    private nkv: NKVConnector;\r\n    private redisCache: CacheConnector;\r\n    private accountConnector: AccountConnector;\r\n\r\n    constructor(private config: PineconeConfig) {\r\n        super();\r\n        if (!SmythRuntime.Instance) throw new Error('SRE not initialized');\r\n        if (!config.pineconeApiKey) throw new Error('Pinecone API key is required');\r\n        if (!config.indexName) throw new Error('Pinecone index name is required');\r\n\r\n        this._client = new Pinecone({\r\n            apiKey: config.pineconeApiKey,\r\n        });\r\n        console.info('Pinecone client initialized');\r\n        console.info('Pinecone index name:', config.indexName);\r\n        this.indexName = config.indexName;\r\n        this.nkv = ConnectorService.getNKVConnector();\r\n        this.accountConnector = ConnectorService.getAccountConnector();\r\n        this.redisCache = ConnectorService.getCacheConnector('Redis');\r\n    }\r\n\r\n    public get client() {\r\n        return this._client;\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(AccessCandidate.clone(candidate));\r\n        const preparedNs = VectorDBConnector.constructNsName(teamId, resourceId);\r\n        const acl = await this.getACL(AccessCandidate.clone(candidate), preparedNs);\r\n        const exists = !!acl;\r\n\r\n        if (!exists) {\r\n            //the resource does not exist yet, we grant write access to the candidate in order to allow the resource creation\r\n            return new ACL().addAccess(candidate.role, candidate.id, TAccessLevel.Owner);\r\n        }\r\n        return ACL.from(acl);\r\n    }\r\n\r\n    public user(candidate: AccessCandidate): IVectorDBRequest {\r\n        return {\r\n            search: async (namespace: string, query: string | number[], options: QueryOptions) => {\r\n                return await this.search(candidate.readRequest, namespace, query, this.indexName, options);\r\n            },\r\n\r\n            insert: async (namespace: string, source: IVectorDataSourceDto | IVectorDataSourceDto[]) => {\r\n                return this.insert(candidate.writeRequest, namespace, source, this.indexName);\r\n            },\r\n\r\n            delete: async (namespace: string, id: string | string[]) => {\r\n                await this.delete(candidate.writeRequest, namespace, id, this.indexName);\r\n            },\r\n            createNamespace: async (namespace: string) => {\r\n                await this.createNamespace(candidate.writeRequest, namespace, this.indexName);\r\n            },\r\n            deleteNamespace: async (namespace: string) => {\r\n                await this.deleteNamespace(candidate.writeRequest, namespace, this.indexName);\r\n            },\r\n            listNamespaces: async () => {\r\n                return await this.listNamespaces(candidate.readRequest);\r\n            },\r\n            namespaceExists: async (namespace: string) => {\r\n                return await this.namespaceExists(candidate.readRequest, namespace);\r\n            },\r\n        };\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async createNamespace(acRequest: AccessRequest, namespace: string, indexName: string): Promise<void> {\r\n        //* Pinecone does not need explicit namespace creation, instead, it creates the namespace when the first vector is inserted\r\n\r\n        // save namespace for listing\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        const preparedNs = VectorDBConnector.constructNsName(teamId, namespace);\r\n\r\n        const candidate = AccessCandidate.clone(acRequest.candidate);\r\n        const nsExists = await this.nkv.user(candidate).exists('vectorDB:pinecone', `namespace:${preparedNs}`);\r\n        if (!nsExists) {\r\n            const nsData: IStorageVectorNamespace = {\r\n                namespace: preparedNs,\r\n                displayName: namespace,\r\n                indexName,\r\n                teamId,\r\n            };\r\n            await this.nkv.user(candidate).set('vectorDB:pinecone:namespaces', preparedNs, JSON.stringify(nsData));\r\n        }\r\n\r\n        const acl = new ACL().addAccess(acRequest.candidate.role, acRequest.candidate.id, TAccessLevel.Owner).ACL;\r\n        await this.setACL(acRequest, preparedNs, acl);\r\n\r\n        return new Promise<void>((resolve) => resolve());\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async namespaceExists(acRequest: AccessRequest, namespace: string): Promise<boolean> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        return await this.nkv\r\n            .user(AccessCandidate.clone(acRequest.candidate))\r\n            .exists('vectorDB:pinecone:namespaces', VectorDBConnector.constructNsName(teamId, namespace));\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async listNamespaces(acRequest: AccessRequest): Promise<string[]> {\r\n        const candidate = AccessCandidate.clone(acRequest.candidate);\r\n        const nsKeys = await this.nkv.user(candidate).list('vectorDB:pinecone:namespaces');\r\n        return nsKeys.map((k) => {\r\n            const nsData = JSONContentHelper.create(k.data?.toString()).tryParse() as IStorageVectorNamespace;\r\n            return nsData?.displayName;\r\n        });\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async deleteNamespace(acRequest: AccessRequest, namespace: string, indexName: string): Promise<void> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        await this._client\r\n            .Index(indexName)\r\n            .namespace(VectorDBConnector.constructNsName(teamId, namespace))\r\n            .deleteAll()\r\n            .catch((e) => {\r\n                if (e?.name == 'PineconeNotFoundError') {\r\n                    console.warn(`Namespace ${namespace} does not exist and was requested to be deleted`);\r\n                    return;\r\n                }\r\n                throw e;\r\n            });\r\n\r\n        const candidate = AccessCandidate.clone(acRequest.candidate);\r\n        const preparedNs = VectorDBConnector.constructNsName(teamId, namespace);\r\n        await this.nkv.user(candidate).delete('vectorDB:pinecone:namespaces', preparedNs);\r\n\r\n        await this.deleteACL(AccessCandidate.clone(acRequest.candidate), namespace);\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async search(\r\n        acRequest: AccessRequest,\r\n        namespace: string,\r\n        query: string | number[],\r\n        indexName: string,\r\n        options: QueryOptions = {}\r\n    ): Promise<VectorsResultData> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        const nsExists = await this.nkv\r\n            .user(AccessCandidate.clone(acRequest.candidate))\r\n            .exists('vectorDB:pinecone:namespaces', VectorDBConnector.constructNsName(teamId, namespace));\r\n        if (!nsExists) {\r\n            throw new Error('Namespace does not exist');\r\n        }\r\n\r\n        const pineconeIndex = this.client.Index(indexName).namespace(VectorDBConnector.constructNsName(teamId, namespace));\r\n        let _vector = query;\r\n        if (typeof query === 'string') {\r\n            _vector = await VectorsHelper.load().embedText(query);\r\n        }\r\n\r\n        const results = await pineconeIndex.query({\r\n            topK: options?.topK || 10,\r\n            vector: _vector as number[],\r\n            includeMetadata: true,\r\n            includeValues: true,\r\n        });\r\n\r\n        return results.matches.map((match) => ({\r\n            id: match.id,\r\n            values: match.values,\r\n            metadata: match.metadata,\r\n        }));\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async insert(\r\n        acRequest: AccessRequest,\r\n        namespace: string,\r\n        sourceWrapper: IVectorDataSourceDto | IVectorDataSourceDto[],\r\n        indexName: string\r\n    ): Promise<string[]> {\r\n        sourceWrapper = Array.isArray(sourceWrapper) ? sourceWrapper : [sourceWrapper];\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n\r\n        const nsExists = await this.nkv\r\n            .user(AccessCandidate.clone(acRequest.candidate))\r\n            .exists('vectorDB:pinecone:namespaces', VectorDBConnector.constructNsName(teamId, namespace));\r\n        if (!nsExists) {\r\n            throw new Error('Namespace does not exist');\r\n        }\r\n\r\n        // make sure that all sources are of the same type (source.source)\r\n        if (sourceWrapper.some((s) => this.detectSourceType(s.source) !== this.detectSourceType(sourceWrapper[0].source))) {\r\n            throw new Error('All sources must be of the same type');\r\n        }\r\n\r\n        const sourceType = this.detectSourceType(sourceWrapper[0].source);\r\n        if (sourceType === 'unknown' || sourceType === 'url') throw new Error('Invalid source type');\r\n        const transformedSource = await this.transformSource(sourceWrapper, sourceType);\r\n        const preparedSource = transformedSource.map((s) => ({\r\n            id: s.id,\r\n            values: s.source as number[],\r\n            metadata: s.metadata,\r\n        }));\r\n\r\n        // await pineconeStore.addDocuments(chunks, ids);\r\n        await this._client.Index(indexName).namespace(VectorDBConnector.constructNsName(teamId, namespace)).upsert(preparedSource);\r\n\r\n        const accessCandidate = acRequest.candidate;\r\n\r\n        const isNewNs = await this.isNewNs(AccessCandidate.clone(accessCandidate), namespace);\r\n        if (isNewNs) {\r\n            let acl = new ACL().addAccess(accessCandidate.role, accessCandidate.id, TAccessLevel.Owner).ACL;\r\n            await this.setACL(acRequest, namespace, acl);\r\n        }\r\n\r\n        return preparedSource.map((s) => s.id);\r\n    }\r\n\r\n    @SecureConnector.AccessControl\r\n    protected async delete(acRequest: AccessRequest, namespace: string, id: string | string[], indexName: string): Promise<void> {\r\n        const _ids = Array.isArray(id) ? id : [id];\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n\r\n        const nsExists = await this.nkv\r\n            .user(AccessCandidate.clone(acRequest.candidate))\r\n            .exists('vectorDB:pinecone:namespaces', VectorDBConnector.constructNsName(teamId, namespace));\r\n        if (!nsExists) {\r\n            throw new Error('Namespace does not exist');\r\n        }\r\n\r\n        const res = await this._client.Index(indexName).namespace(VectorDBConnector.constructNsName(teamId, namespace)).deleteMany(_ids);\r\n    }\r\n\r\n    private detectSourceType(source: Source): SupportedSources | 'unknown' {\r\n        if (typeof source === 'string') {\r\n            return isUrl(source) ? 'url' : 'text';\r\n        } else if (Array.isArray(source) && source.every((v) => typeof v === 'number')) {\r\n            return 'vector';\r\n        } else {\r\n            return 'unknown';\r\n        }\r\n    }\r\n\r\n    private transformSource(source: IVectorDataSourceDto[], sourceType: SupportedSources) {\r\n        //* as the accepted sources increases, you will need to implement the strategy pattern instead of a switch case\r\n        switch (sourceType) {\r\n            case 'text': {\r\n                const texts = source.map((s) => s.source as string);\r\n\r\n                return VectorsHelper.load()\r\n                    .embedTexts(texts)\r\n                    .then((vectors) => {\r\n                        return source.map((s, i) => ({\r\n                            ...s,\r\n                            source: vectors[i],\r\n                            metadata: { ...s.metadata, text: texts[i] },\r\n                        }));\r\n                    });\r\n            }\r\n            case 'vector': {\r\n                return source;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async setACL(acRequest: AccessRequest, namespace: string, acl: IACL): Promise<void> {\r\n        await this.redisCache\r\n            .user(AccessCandidate.clone(acRequest.candidate))\r\n            .set(`vectorDB:pinecone:namespace:${namespace}:acl`, JSON.stringify(acl));\r\n    }\r\n\r\n    private async getACL(ac: AccessCandidate, namespace: string): Promise<ACL | null | undefined> {\r\n        let aclRes = await this.redisCache.user(ac).get(`vectorDB:pinecone:namespace:${namespace}:acl`);\r\n        const acl = JSONContentHelper.create(aclRes?.toString?.()).tryParse();\r\n        return acl;\r\n    }\r\n\r\n    private async deleteACL(ac: AccessCandidate, namespace: string): Promise<void> {\r\n        this.redisCache.user(AccessCandidate.clone(ac)).delete(`vectorDB:pinecone:namespace:${namespace}:acl`);\r\n    }\r\n\r\n    private async isNewNs(ac: AccessCandidate, namespace: string): Promise<boolean> {\r\n        return !(await this.nkv.user(AccessCandidate.clone(ac)).exists('vectorDB:pinecone', `namespace:${namespace}:acl`));\r\n    }\r\n}\r\n","//==[ SRE: Storage ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { PineconeVectorDB } from './connectors/PineconeVectorDB.class';\r\n\r\nexport class VectorDBService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.VectorDB, 'Pinecone', PineconeVectorDB);\r\n    }\r\n}\r\n","import { Connector } from '@sre/Core/Connector.class';\r\nimport { getMainArgs, parseCLIArgs } from '@sre/utils/cli.utils';\r\n\r\nexport class CLIConnector extends Connector {\r\n    public name = 'CLI';\r\n    public params: any;\r\n    constructor() {\r\n        super();\r\n        this.params = this.parse(process.argv);\r\n    }\r\n\r\n    /**\r\n     * Parses the command line arguments, and returns the parsed arguments object\r\n     * if args is provided, it will only parse the provided args\r\n     * @param argv The command line arguments, usually process.argv\r\n     * @param args The arguments to parse\r\n     * @returns\r\n     */\r\n    public parse(argv: string[], args?: string | string[]) {\r\n        let _keys = args;\r\n        if (_keys && !Array.isArray(_keys)) _keys = [_keys];\r\n\r\n        const argsList = _keys || getMainArgs(argv);\r\n        const params = parseCLIArgs(argsList, argv);\r\n\r\n        return params;\r\n    }\r\n\r\n    /**\r\n     * Get the parsed arguments as an object\r\n     * @param args The arguments to get\r\n     * @returns\r\n     */\r\n    public get(args: string | string[]) {\r\n        let _keys = args;\r\n        if (!Array.isArray(_keys)) _keys = [_keys];\r\n\r\n        const result = {};\r\n        _keys.forEach((key) => {\r\n            if (this.params[key]) {\r\n                result[key] = this.params[key];\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { CLIConnector } from './CLIConnector';\r\n\r\nexport class CLIService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.CLI, 'CLI', CLIConnector);\r\n    }\r\n}\r\n","import { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { IAccessCandidate, IACL } from '@sre/types/ACL.types';\r\nimport { StorageData, StorageMetadata } from '@sre/types/Storage.types';\r\n\r\nexport interface INKVRequest {\r\n    get(namespace: string, key: string): Promise<StorageData>;\r\n    set(namespace: string, key: string, value: StorageData): Promise<void>;\r\n    delete(namespace: string, key: string): Promise<void>;\r\n    exists(namespace: string, key: string): Promise<boolean>;\r\n    deleteAll(namespace: string): Promise<void>;\r\n    list(namespace: string): Promise<{ key: string; data: StorageData }[]>;\r\n}\r\n\r\n/**\r\n * NKV = Namespace-Key-Value Connector\r\n */\r\nexport abstract class NKVConnector extends SecureConnector {\r\n    public user(candidate: AccessCandidate): INKVRequest {\r\n        return {\r\n            get: async (namespace: string, key: string) => this.get(candidate.readRequest, namespace, key),\r\n            set: async (namespace: string, key: string, value: StorageData) => this.set(candidate.writeRequest, namespace, key, value),\r\n            delete: async (namespace: string, key: string) => this.delete(candidate.writeRequest, namespace, key),\r\n            exists: async (namespace: string, key: string) => this.exists(candidate.readRequest, namespace, key),\r\n            deleteAll: async (namespace: string) => this.deleteAll(candidate.writeRequest, namespace),\r\n            list: async (namespace: string) => this.list(candidate.readRequest, namespace),\r\n        };\r\n    }\r\n\r\n    public abstract getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL>;\r\n\r\n    protected abstract get(acRequest: AccessRequest, namespace: string, key: string): Promise<StorageData>;\r\n    protected abstract set(acRequest: AccessRequest, namespace: string, key: string, value: StorageData): Promise<void>;\r\n\r\n    protected abstract delete(acRequest: AccessRequest, namespace: string, key: string): Promise<void>;\r\n    protected abstract exists(acRequest: AccessRequest, namespace: string, key: string): Promise<boolean>;\r\n    protected abstract deleteAll(acRequest: AccessRequest, namespace: string): Promise<void>;\r\n    protected abstract list(acRequest: AccessRequest, namespace: string): Promise<{ key: string; data: StorageData }[]>;\r\n}\r\n","import { AccessRequest } from '@sre/Security/AccessControl/AccessRequest.class';\r\nimport { INKVRequest, NKVConnector } from '../NKVConnector';\r\nimport { ACLAccessDeniedError, IAccessCandidate, TAccessLevel, TAccessResult } from '@sre/types/ACL.types';\r\nimport { ACL } from '@sre/Security/AccessControl/ACL.class';\r\nimport { CacheConnector } from '@sre/MemoryManager/Cache.service/CacheConnector';\r\nimport { ConnectorService } from '@sre/Core/ConnectorsService';\r\nimport { SecureConnector } from '@sre/Security/SecureConnector.class';\r\nimport { AccessCandidate } from '@sre/Security/AccessControl/AccessCandidate.class';\r\nimport { StorageData } from '@sre/types/Storage.types';\r\nimport { RedisCache } from '@sre/MemoryManager/Cache.service/connectors/RedisCache.class';\r\nimport { AccountConnector } from '@sre/Security/Account.service/AccountConnector';\r\nimport Joi from 'joi';\r\n\r\nexport class NKVRedis extends NKVConnector {\r\n    public name = 'Redis';\r\n    private redisCacheConnector: RedisCache;\r\n    private accountConnector: AccountConnector;\r\n    constructor() {\r\n        super();\r\n        this.redisCacheConnector = ConnectorService.getCacheConnector('Redis') as RedisCache;\r\n        this.accountConnector = ConnectorService.getAccountConnector();\r\n    }\r\n\r\n    public key(...parts: string[]) {\r\n        return parts.join(':');\r\n    }\r\n\r\n    public mdKey(...parts: string[]) {\r\n        return parts.join(':');\r\n    }\r\n\r\n    @NKVRedis.Validate\r\n    @NKVRedis.NamespaceAccessControl\r\n    protected async get(acRequest: AccessRequest, namespace: string, key: string): Promise<StorageData> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        return await this.redisCacheConnector.user(AccessCandidate.team(teamId)).get(this.key(`team_${teamId}`, namespace, key));\r\n    }\r\n\r\n    @NKVRedis.Validate\r\n    @NKVRedis.NamespaceAccessControl\r\n    protected async set(acRequest: AccessRequest, namespace: string, key: string, value: any) {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n\r\n        const setKey = this.key(`team_${teamId}`, namespace, key);\r\n        await this.redisCacheConnector.user(AccessCandidate.team(teamId)).set(setKey, value);\r\n        // to set namespace ownership\r\n        const isNewNs = !(await this.redisCacheConnector.user(AccessCandidate.team(teamId)).exists(namespace));\r\n        if (isNewNs) {\r\n            await this.redisCacheConnector.user(AccessCandidate.team(teamId)).set(this.key(`team_${teamId}`, namespace), '', undefined, { ns: true });\r\n        }\r\n    }\r\n\r\n    @NKVRedis.Validate\r\n    @NKVRedis.NamespaceAccessControl\r\n    protected async delete(acRequest: AccessRequest, namespace: string, key: string): Promise<void> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        await this.redisCacheConnector.user(AccessCandidate.team(teamId)).delete(this.key(`team_${teamId}`, namespace, key));\r\n    }\r\n\r\n    @NKVRedis.Validate\r\n    @NKVRedis.NamespaceAccessControl\r\n    protected async exists(acRequest: AccessRequest, namespace: string, key: string): Promise<boolean> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        return await this.redisCacheConnector.user(AccessCandidate.team(teamId)).exists(this.key(`team_${teamId}`, namespace, key));\r\n    }\r\n\r\n    @NKVRedis.NamespaceAccessControl\r\n    public async list(acRequest: AccessRequest, namespace: string): Promise<{ key: string; data: StorageData }[]> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        let keys = await this.fetchKeysByPrefix(this.key(this.redisCacheConnector.prefix, `team_${teamId}`, namespace));\r\n\r\n        // filter out metadata keys & namespace sentinel keys\r\n        keys = keys.filter(\r\n            (key) => key !== this.key(this.redisCacheConnector.prefix, `team_${teamId}`, namespace) // if not the namespace sentinel key\r\n        );\r\n\r\n        if (keys.length <= 0) return [];\r\n        // Start a transaction\r\n        const pipeline = this.redisCacheConnector.client.pipeline();\r\n\r\n        // Add get commands for all keys to the transaction\r\n        keys.forEach((key) => {\r\n            pipeline.get(key);\r\n        });\r\n\r\n        // Execute the transaction\r\n        const results = await pipeline.exec();\r\n\r\n        // Combine the keys and their corresponding values\r\n        return keys.map((key, index) => {\r\n            return {\r\n                key: key.replace(`${this.key(this.redisCacheConnector.prefix, `team_${teamId}`, namespace)}:`, ''),\r\n                data: results[index][1] as StorageData,\r\n            };\r\n        });\r\n    }\r\n\r\n    @NKVRedis.NamespaceAccessControl\r\n    public async deleteAll(acRequest: AccessRequest, namespace: string): Promise<void> {\r\n        const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n        let keys = await this.fetchKeysByPrefix(this.key(this.redisCacheConnector.prefix, `team_${teamId}`, namespace));\r\n        // filter out namespace sentinel key + namespace metadata key metadata key\r\n        keys = keys.filter((key) => {\r\n            return ![this.key(this.redisCacheConnector.prefix, `team_${teamId}`, namespace)].includes(key);\r\n        });\r\n        await this.redisCacheConnector.client.del(keys);\r\n    }\r\n\r\n    public async getResourceACL(resourceId: string, candidate: IAccessCandidate): Promise<ACL> {\r\n        return this.redisCacheConnector.getResourceACL(resourceId, candidate);\r\n    }\r\n\r\n    private async fetchKeysByPrefix(prefix: string): Promise<string[]> {\r\n        let cursor = '0';\r\n        const keys = [];\r\n\r\n        do {\r\n            // SCAN with match for the prefix and count for batch size (optional)\r\n            const result = await this.redisCacheConnector.client.scan(cursor, 'MATCH', `${prefix}*`, 'COUNT', 10000);\r\n            cursor = result[0];\r\n            keys.push(...result[1]);\r\n        } while (cursor !== '0');\r\n\r\n        return keys;\r\n    }\r\n\r\n    static NamespaceAccessControl(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n        // Store the original method in a variable\r\n        const originalMethod = descriptor.value;\r\n\r\n        // Modify the descriptor's value to wrap the original method\r\n        descriptor.value = async function (...args: any[]) {\r\n            // Extract the method arguments\r\n            let [acRequest, namespace, key] = args;\r\n            const isNamespaceSearch = key === undefined;\r\n\r\n            // Inject the access control logic\r\n            const teamId = await this.accountConnector.getCandidateTeam(acRequest.candidate);\r\n            const resourceId = isNamespaceSearch ? namespace : `${namespace}:${key}`;\r\n            const finalKey = this.key(this.redisCacheConnector.prefix, `team_${teamId}`, resourceId);\r\n            const accessTicket = await this.getAccessTicket(finalKey, acRequest);\r\n\r\n            if (accessTicket.access !== TAccessResult.Granted) throw new ACLAccessDeniedError('Access Denied');\r\n\r\n            // Call the original method with the original arguments\r\n            return originalMethod.apply(this, args);\r\n        };\r\n\r\n        // Return the modified descriptor\r\n        return descriptor;\r\n    }\r\n\r\n    static Validate(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n        // Store the original method in a variable\r\n        const originalMethod = descriptor.value;\r\n\r\n        // Modify the descriptor's value to wrap the original method\r\n        descriptor.value = async function (...args: any[]) {\r\n            // Extract the method arguments\r\n            let [acRequest, namespace, key] = args;\r\n\r\n            // Validate the arguments\r\n            const schemaValidator = Joi.object().keys({\r\n                namespace: Joi.string().min(1).required(),\r\n                key: Joi.string().min(1).required(),\r\n            });\r\n            const validationResult = schemaValidator.validate({ namespace, key });\r\n\r\n            if (validationResult.error) {\r\n                throw new Error(`Validation Error: ${validationResult.error.message}`);\r\n            }\r\n\r\n            // Call the original method with the original arguments\r\n            return originalMethod.apply(this, args);\r\n        };\r\n\r\n        // Return the modified descriptor\r\n        return descriptor;\r\n    }\r\n}\r\n","//==[ SRE: Storage ]======================\r\n\r\nimport { ConnectorService, ConnectorServiceProvider } from '@sre/Core/ConnectorsService';\r\nimport { TConnectorService } from '@sre/types/SRE.types';\r\nimport { NKVRedis } from './connectors/NKVRedis.class';\r\n\r\nexport class NKVService extends ConnectorServiceProvider {\r\n    public register() {\r\n        ConnectorService.register(TConnectorService.NKV, 'Redis', NKVRedis);\r\n    }\r\n}\r\n","import { StorageService } from '@sre/IO/Storage.service';\r\nimport { LLMService } from '@sre/LLMManager/LLM.service';\r\nimport SystemEvents from './SystemEvents';\r\nimport { CacheService } from '@sre/MemoryManager/Cache.service';\r\nimport { Logger } from '../helpers/Log.helper';\r\nimport { TServiceRegistry } from '@sre/types/SRE.types';\r\nimport { VaultService } from '@sre/Security/Vault.service';\r\nimport { AccountService } from '@sre/Security/Account.service';\r\nimport { AgentDataService } from '@sre/AgentManager/AgentData.service';\r\nimport { VectorDBService } from '@sre/IO/VectorDB.service';\r\nimport { CLIService } from '@sre/IO/CLI.service';\r\nimport { NKVService } from '@sre/IO/NKV.service';\r\nconst console = Logger('Boot');\r\n\r\nexport function boot() {\r\n    console.debug('SRE Boot sequence started');\r\n    const service: TServiceRegistry = {};\r\n    service.NKV = new NKVService();\r\n    service.Account = new AccountService();\r\n    service.Storage = new StorageService();\r\n    service.Cache = new CacheService();\r\n    service.LLM = new LLMService();\r\n    service.Vault = new VaultService();\r\n    service.AgentData = new AgentDataService();\r\n    service.CLI = new CLIService();\r\n    service.VectorDB = new VectorDBService();\r\n\r\n    SystemEvents.on('SRE:Initialized', () => {\r\n        console.debug('SRE Initialized');\r\n        for (let key in service) {\r\n            service[key].init();\r\n        }\r\n\r\n        SystemEvents.emit('SRE:Booted', service);\r\n\r\n        console.debug('SRE Boot sequence completed');\r\n    });\r\n}\r\n","import 'source-map-support/register.js';\r\nimport AgentRequest from './subsystems/AgentManager/AgentRequest.class';\r\nimport AgentSettings from './subsystems/AgentManager/AgentSettings.class';\r\n//import SRE from './Core/SRE.class';\r\nimport Agent from './subsystems/AgentManager/Agent.class';\r\nimport SmythRuntime from './Core/SmythRuntime.class';\r\nimport { boot } from './Core/boot';\r\nimport { ConnectorService } from './Core/ConnectorsService';\r\nimport { CLIAgentDataConnector } from './subsystems/AgentManager/AgentData.service/connectors/CLIAgentDataConnector.class';\r\nimport { AgentProcess } from './Core/AgentProcess.helper';\r\nimport { Conversation } from './helpers/Conversation.helper';\r\nimport config from './config';\r\n\r\nboot();\r\n\r\nexport { Agent, AgentRequest, AgentSettings, AgentProcess, SmythRuntime, Conversation, ConnectorService, CLIAgentDataConnector, config };\r\n"],"names":["__publicField","TConnectorService","TOOL_USE_DEFAULT_MODEL","validateInteger","logger","console","TAccessLevel","TAccessRole","TAccessResult","ext","e","input","file","LLMHelper","_error","obj","path","error","EventEmitter","content","spec","cacheConnector","config","_config","validateAndParseJson","componentInstance","dbgActiveWaitingComponents","inputEntry","component","output","connections","componentData","targetComponent","__decorateClass","tokens","TLLMMessageRole","VALID_IMAGE_MIME_TYPES","MODELS_WITH_JSON_RESPONSE","messages"],"mappings":"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"}