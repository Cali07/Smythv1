//!!! DO NOT EDIT THIS FILE, IT IS AUTO-GENERATED !!!//

import { AgentMaker, ComponentWrapper, createSafeAccessor } from '../../sdk.index';
import { ComponentInput } from '../../types/SDKTypes';

export interface TClassifierSettings {
    name?: string;
    model: string;
    /** Prompt */
    prompt?: string;
}

export type TClassifierInputs = {
    Input?: any;
    [key: string]: any;
};

export function Classifier(settings?: TClassifierSettings, agentMaker?: AgentMaker) {    
    const { name, ...settingsWithoutName } = settings || {};
    const dataObject: any = { 
        name: settings?.name || 'Classifier', 
        settings: {
            ...settingsWithoutName 
        }
    };
    const component = new ComponentWrapper(dataObject, agentMaker);

    if (agentMaker) {
        agentMaker.structure.components.push(component);
    }
    
    const _out: { [key: string]: any } = {
        // No outputs defined
    };

    const _in: { [key: string]: ComponentInput } = {
        Input: {
            component,
            type: 'Any',
            optional: false,
            default: true,
        },
    };

    dataObject.outputs = _out;
    dataObject.inputs = _in;

    component.inputs(_in);

    const wrapper = {
        out: _out,        
        in: component.inputs.bind(component) as (inputs: TClassifierInputs) => void,
    };

    return wrapper;
}
